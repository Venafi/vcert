// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KeyPairData key pair data
//
// swagger:model KeyPairData
type KeyPairData struct {

	// elliptic curve
	EllipticCurve *LockedValue `json:"EllipticCurve,omitempty"`

	// key algorithm
	KeyAlgorithm *LockedValue `json:"KeyAlgorithm,omitempty"`

	// key size
	KeySize *LockedIntValue `json:"KeySize,omitempty"`
}

// Validate validates this key pair data
func (m *KeyPairData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEllipticCurve(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeySize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KeyPairData) validateEllipticCurve(formats strfmt.Registry) error {
	if swag.IsZero(m.EllipticCurve) { // not required
		return nil
	}

	if m.EllipticCurve != nil {
		if err := m.EllipticCurve.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EllipticCurve")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EllipticCurve")
			}
			return err
		}
	}

	return nil
}

func (m *KeyPairData) validateKeyAlgorithm(formats strfmt.Registry) error {
	if swag.IsZero(m.KeyAlgorithm) { // not required
		return nil
	}

	if m.KeyAlgorithm != nil {
		if err := m.KeyAlgorithm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("KeyAlgorithm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("KeyAlgorithm")
			}
			return err
		}
	}

	return nil
}

func (m *KeyPairData) validateKeySize(formats strfmt.Registry) error {
	if swag.IsZero(m.KeySize) { // not required
		return nil
	}

	if m.KeySize != nil {
		if err := m.KeySize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("KeySize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("KeySize")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this key pair data based on the context it is used
func (m *KeyPairData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEllipticCurve(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeyAlgorithm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeySize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KeyPairData) contextValidateEllipticCurve(ctx context.Context, formats strfmt.Registry) error {

	if m.EllipticCurve != nil {
		if err := m.EllipticCurve.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EllipticCurve")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EllipticCurve")
			}
			return err
		}
	}

	return nil
}

func (m *KeyPairData) contextValidateKeyAlgorithm(ctx context.Context, formats strfmt.Registry) error {

	if m.KeyAlgorithm != nil {
		if err := m.KeyAlgorithm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("KeyAlgorithm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("KeyAlgorithm")
			}
			return err
		}
	}

	return nil
}

func (m *KeyPairData) contextValidateKeySize(ctx context.Context, formats strfmt.Registry) error {

	if m.KeySize != nil {
		if err := m.KeySize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("KeySize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("KeySize")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KeyPairData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KeyPairData) UnmarshalBinary(b []byte) error {
	var res KeyPairData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
