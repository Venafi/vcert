// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CheckPolicyResponse check policy response
//
// swagger:model CheckPolicyResponse
type CheckPolicyResponse struct {

	// c s r
	CSR *CSRData `json:"CSR,omitempty"`

	// error
	Error string `json:"Error,omitempty"`

	// policy
	Policy *PolicyData `json:"Policy,omitempty"`
}

// Validate validates this check policy response
func (m *CheckPolicyResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCSR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CheckPolicyResponse) validateCSR(formats strfmt.Registry) error {
	if swag.IsZero(m.CSR) { // not required
		return nil
	}

	if m.CSR != nil {
		if err := m.CSR.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CSR")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CSR")
			}
			return err
		}
	}

	return nil
}

func (m *CheckPolicyResponse) validatePolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.Policy) { // not required
		return nil
	}

	if m.Policy != nil {
		if err := m.Policy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Policy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this check policy response based on the context it is used
func (m *CheckPolicyResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCSR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CheckPolicyResponse) contextValidateCSR(ctx context.Context, formats strfmt.Registry) error {

	if m.CSR != nil {
		if err := m.CSR.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CSR")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CSR")
			}
			return err
		}
	}

	return nil
}

func (m *CheckPolicyResponse) contextValidatePolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.Policy != nil {
		if err := m.Policy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Policy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CheckPolicyResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CheckPolicyResponse) UnmarshalBinary(b []byte) error {
	var res CheckPolicyResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
