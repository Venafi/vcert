schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  @link(url: "https://specs.apollo.dev/inaccessible/v0.2", for: SECURITY)
{
  query: Query
  mutation: Mutation
}

directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type AggregatedKubernetesTag
  @join__type(graph: TLSPK)
{
  name: String!
  resourceNames: [String]!
}

"""AggregateInput defines how to group results within a bucket"""
input AggregateInput
  @join__type(graph: SEARCH)
{
  """Name for this aggregation"""
  name: String!

  """Field to group by"""
  groupBy: String!

  """Maximum number of buckets to return"""
  first: Int
}

"""AggregateResult represents the result of an aggregation"""
type AggregateResult
  @join__type(graph: SEARCH)
{
  """Name identifies the field or value being aggregated"""
  name: String!

  """Count represents the number of items in this aggregation bucket"""
  count: Int!

  """Nested aggregates within this aggregation bucket"""
  aggregates: [TermAggregates!]
}

type AkamaiCertificateMetadata
  @join__type(graph: CLOUD_PROVIDERS)
{
  name: String!
  enrollmentId: String!
}

"""
Application is used in matching rules and allows for querying more information through query
"""
type Application
  @join__type(graph: COMPLIANCE_POLICY, key: "id", resolvable: false)
  @join__type(graph: OUTAGEDETECTION, key: "id")
{
  """ID is the ID of the application for entity linking purposes"""
  id: ID!
  name: String! @join__field(graph: OUTAGEDETECTION)
  description: String @join__field(graph: OUTAGEDETECTION)
  owners: IdentityConnection @join__field(graph: OUTAGEDETECTION)
}

type ApplicationConnection
  @join__type(graph: OUTAGEDETECTION)
{
  pageInfo: PageInfo!
  totalCount: Int!
  nodes: [Application!]
  edges: [ApplicationEdge]
}

type ApplicationEdge
  @join__type(graph: OUTAGEDETECTION)
{
  node: Application!
  cursor: String!
}

"""
ApplicationMatchingRule wraps the Application type to add included to it
"""
type ApplicationMatchingRule
  @join__type(graph: COMPLIANCE_POLICY)
{
  """Application is the reference to the application to include or exclude"""
  application: Application

  """
  Included states whether this application should be included in matching for resources
  """
  included: Boolean
}

type ApprovalDetails
  @join__type(graph: CAOPERATIONS)
{
  approverUserIds: [UUID]
  approverTeamIds: [UUID]
  finalApproverId: UUID
  approvedIds: [UUID]
  rejectedBy: UUID
  rejectionReason: String
}

enum ApproverDecision
  @join__type(graph: CAOPERATIONS)
{
  APPROVE @join__enumValue(graph: CAOPERATIONS)
  REJECT @join__enumValue(graph: CAOPERATIONS)
}

enum AttributeEnumInOperator
  @join__type(graph: TLSPK)
{
  IN @join__enumValue(graph: TLSPK)
}

enum AttributeEnumOperator
  @join__type(graph: TLSPK)
{
  EQUALS @join__enumValue(graph: TLSPK)
}

enum AttributeStringOperator
  @join__type(graph: TLSPK)
{
  EQUALS @join__enumValue(graph: TLSPK)
  CONTAINS @join__enumValue(graph: TLSPK)
}

"""
Indicates the type of authentication used to communicate with Cloud Providers
"""
enum AuthorizationMethod
  @join__type(graph: CLOUD_PROVIDERS)
{
  """
  Venafi generated key uploaded manually by the customer to the Service Account
  """
  VENAFI_GENERATED_KEY @join__enumValue(graph: CLOUD_PROVIDERS)

  """Workload Identity Federation using OIDC"""
  WORKLOAD_IDENTITY_FEDERATION @join__enumValue(graph: CLOUD_PROVIDERS)
}

"""A 12 digit string representing an AWS account ID"""
scalar AWSAccountID
  @join__type(graph: CLOUD_PROVIDERS)

type AWSAccountInfo
  @join__type(graph: CLOUD_PROVIDERS)
{
  id: AWSAccountID!
  name: String!
}

type AWSAccountRegions
  @join__type(graph: CLOUD_PROVIDERS)
{
  cloudProvider: CloudProvider!
  accountId: AWSAccountID!
  awsRegions: [String!]
}

type AWSCertificateMetadata
  @join__type(graph: CLOUD_PROVIDERS)
{
  arn: String!
  in_use: Boolean
  type: String
}

type AWSProviderDetails
  @join__type(graph: CLOUD_PROVIDERS)
{
  cloudProvider: CloudProvider!
  awsRegions: [String!]
  awsOrganizationAccounts: [AWSAccountInfo!]
}

type AzureCertificateMetadata
  @join__type(graph: CLOUD_PROVIDERS)
{
  azureId: String!
  name: String!
  version: String!
}

type AzureKeyVault
  @join__type(graph: CLOUD_PROVIDERS)
{
  id: String!
  name: String!
}

type AzureProviderDetails
  @join__type(graph: CLOUD_PROVIDERS)
{
  cloudProvider: CloudProvider!
  subscriptions: [AzureSubscriptionDetails]
}

type AzureSubscriptionDetails
  @join__type(graph: CLOUD_PROVIDERS)
{
  id: String!
  name: String!
}

"""Represents a Billing Cycle"""
type BillingCycle
  @join__type(graph: ENTITLEMENTS)
{
  start: DateTime!
  end: DateTime!
}

"""Represents a Billing Metric"""
type BillingMetric
  @join__type(graph: ENTITLEMENTS)
{
  key: String!
  value: String!
}

"""BucketInput defines a named aggregation"""
input BucketInput
  @join__type(graph: SEARCH)
{
  """Name of this aggregation bucket"""
  name: String!

  """Field or expression to aggregate by"""
  aggregateBy: CertificateSearchFilterInput!

  """Nested aggregations to apply within this bucket"""
  aggregates: [AggregateInput!]
}

enum Capability
  @join__type(graph: CLOUD_PROVIDERS)
{
  CLOUD_PROVIDERS @join__enumValue(graph: CLOUD_PROVIDERS)
}

"""Certificate"""
type Certificate
  @join__type(graph: CAOPERATIONS, key: "fingerprint")
  @join__type(graph: CERTIFICATE_INVENTORY, key: "fingerprint")
  @join__type(graph: CLOUD_PROVIDERS, key: "fingerprint")
  @join__type(graph: CODESIGN, key: "fingerprint", resolvable: false)
  @join__type(graph: COMPLIANCE_POLICY, key: "fingerprint")
  @join__type(graph: COMPUTED_FIELDS, key: "fingerprint")
  @join__type(graph: OUTAGEDETECTION, key: "id")
  @join__type(graph: PROVISIONING, key: "fingerprint")
  @join__type(graph: SEARCH, key: "fingerprint", resolvable: false)
  @join__type(graph: TAGGING, key: "id")
  @join__type(graph: TLSPK, key: "fingerprint")
{
  """The SHA-1 digest of the entire raw certificate"""
  fingerprint: ID! @join__field(graph: CAOPERATIONS) @join__field(graph: CERTIFICATE_INVENTORY) @join__field(graph: CLOUD_PROVIDERS) @join__field(graph: CODESIGN) @join__field(graph: COMPLIANCE_POLICY) @join__field(graph: COMPUTED_FIELDS) @join__field(graph: PROVISIONING) @join__field(graph: SEARCH) @join__field(graph: TLSPK)
  issuanceCertificateAuthorityAccount: CertificateAuthorityAccount @join__field(graph: CAOPERATIONS)
  productOption: CertificateAuthorityProductOption @join__field(graph: CAOPERATIONS)
  importCertificateAuthorityAccount: CertificateAuthorityAccount @join__field(graph: CAOPERATIONS)
  importOption: CertificateAuthorityImportOption @join__field(graph: CAOPERATIONS)
  lastImportRunId: UUID @join__field(graph: CAOPERATIONS)
  revocation: Revocation @join__field(graph: CAOPERATIONS)
  id: ID! @join__field(graph: CERTIFICATE_INVENTORY) @join__field(graph: OUTAGEDETECTION) @join__field(graph: TAGGING)
  name: String! @join__field(graph: CERTIFICATE_INVENTORY)
  issuer: DirectoryName @join__field(graph: CERTIFICATE_INVENTORY)
  validity: CertificateValidity @join__field(graph: CERTIFICATE_INVENTORY)
  status: CertificateStatus! @join__field(graph: CERTIFICATE_INVENTORY)

  """
  Indicates if this certificate is the current (i.e. last) version of the certificate
  """
  isCurrent: Boolean! @join__field(graph: CERTIFICATE_INVENTORY)

  """Indicates if this certificate is a certificate authority certificate"""
  isCA: Boolean! @join__field(graph: CERTIFICATE_INVENTORY)

  """Indicates if this certificate is a self signed certificate"""
  isSelfSigned: Boolean! @join__field(graph: CERTIFICATE_INVENTORY)

  """
  Timestamp when a new version of this certificate was found (i.e. when isCurrent was set to FALSE)
  """
  archivedTime: DateTime @join__field(graph: CERTIFICATE_INVENTORY)

  """Timestamp when the certificate was created"""
  creationTime: DateTime! @join__field(graph: CERTIFICATE_INVENTORY)

  """Timestamp of the last modification"""
  lastModifiedTime: DateTime! @join__field(graph: CERTIFICATE_INVENTORY)
  subject: DirectoryName @join__field(graph: CERTIFICATE_INVENTORY)
  subjectAlternativeNames: [GeneralName!] @join__field(graph: CERTIFICATE_INVENTORY)
  serialNumber: String! @join__field(graph: CERTIFICATE_INVENTORY)
  publicKeyInformation: PublicKeyInformation! @join__field(graph: CERTIFICATE_INVENTORY)
  signatureAlgorithm: String! @join__field(graph: CERTIFICATE_INVENTORY)
  signatureHashAlgorithm: String! @join__field(graph: CERTIFICATE_INVENTORY)
  extendedKeyUsages: [String!] @join__field(graph: CERTIFICATE_INVENTORY)
  keyUsages: [CertificateKeyUsage!] @join__field(graph: CERTIFICATE_INVENTORY)

  """
  The certificates in the chain. This will return null for nested certificates.
  """
  chain: [Certificate!] @join__field(graph: CERTIFICATE_INVENTORY)

  """
  All other versions of the current certificate. This will return null for nested certificates.
  The pagination can be either forward or backward. To enable forward pagination, two arguments are
  used: `after` and `first`. To enable backward pagination, two arguments are used: `before` and `last`.
  However, 'after' and 'before' arguments are only valid for 'certificate' queries (i.e. single certificate result)
  If arguments for both forward and backward pagination are supplied, forward pagination will be used. If no arguments
  are supplied, it returns the first page of 10 certificates (i.e. defaults `first` to 10). If orderBy is not
  specified, the result will be sorted by fingerprints in ascending order.
  """
  relatedCertificates(after: String, before: String, first: Int, last: Int, orderBy: [RelatedCertificateOrderInput!]): CertificateConnection @join__field(graph: CERTIFICATE_INVENTORY)
  certificateValidationErrors: [ValidationError!] @join__field(graph: CERTIFICATE_INVENTORY)
  certificateErrorCount: ValidationErrorCount! @join__field(graph: CERTIFICATE_INVENTORY) @join__field(graph: COMPUTED_FIELDS, external: true)
  origins: [String!]! @join__field(graph: CERTIFICATE_INVENTORY, override: "computed-fields")

  """
  The group ID for this certificate. This is used to group older and newer versions of the same certificate.
  """
  groupId: ID! @join__field(graph: CERTIFICATE_INVENTORY)

  """The user that last modified the certificate record, if any"""
  lastModifiedBy: ID @join__field(graph: CERTIFICATE_INVENTORY) @deprecated

  """The user that last modified the certificate record, if any"""
  lastModifiedByUser: User @join__field(graph: CERTIFICATE_INVENTORY)

  """The subjectKeyIdentifier SHA1 hash value"""
  subjectKeyIdentifierHash: String! @join__field(graph: CERTIFICATE_INVENTORY)

  """The authorityKeyIdentifier SHA1 hash value"""
  authorityKeyIdentifierHash: String! @join__field(graph: CERTIFICATE_INVENTORY)

  """Returns true if the 'id-pkix-ocsp-nocheck' extension is defined"""
  ocspNoCheck: Boolean! @join__field(graph: CERTIFICATE_INVENTORY)

  """
  The maximum path length for certificates subordinate to this certificate. This is only present for CA certificates
  """
  pathLength: Int @join__field(graph: CERTIFICATE_INVENTORY)

  """
     Policy constraint indicating the number of additional certificates that may appear in the path before an
  explicit policy is required for the entire path
  """
  requireExplicitPolicy: Int @join__field(graph: CERTIFICATE_INVENTORY)

  """
  Policy constraint indicating the number of additional certificates that may appear in the path before
  policy mapping is no longer permitted
  """
  inhibitPolicyMapping: Int @join__field(graph: CERTIFICATE_INVENTORY)

  """
  Indicates the number of additional non-self-issued certificates that may appear in the path before anyPolicy is no
  longer permitted
  """
  inhibitAnyPolicy: Int @join__field(graph: CERTIFICATE_INVENTORY)

  """Indicates the global revocation status of a certificate"""
  globalRevocation: GlobalRevocation @join__field(graph: CERTIFICATE_INVENTORY)
  cloudInstallations: MachineIdentityConnection @join__field(graph: CLOUD_PROVIDERS)

  """
  CompliancePolicyFindings shows how many findings a particular certificate has against it
  """
  compliancePolicyFindings: CompliancePolicyFindingConnection @join__field(graph: COMPLIANCE_POLICY)
  tlsServerEndpoints(after: String, before: String, first: Int, last: Int): TLSServerEndpointConnection @join__field(graph: COMPUTED_FIELDS, external: true) @join__field(graph: OUTAGEDETECTION)
  errorCount: ValidationErrorCount! @join__field(graph: COMPUTED_FIELDS, requires: "certificateErrorCount{warnings alerts} tlsServerEndpoints(after:null,before:null,first:null,last:null) {tlsServerEndpointsErrorCount {warnings alerts}}")
  certificateRequest: CertificateRequest @join__field(graph: OUTAGEDETECTION)
  applications: [Application!] @join__field(graph: OUTAGEDETECTION)
  dekHash: String @join__field(graph: OUTAGEDETECTION)
  lastNotification: Int! @join__field(graph: OUTAGEDETECTION)
  networkDiscovery: [NetworkDiscovery!] @join__field(graph: OUTAGEDETECTION)
  hasTLSServerEndpoints: Boolean @join__field(graph: OUTAGEDETECTION)
  hasTLSServerEndpointsValidationErrors: Boolean @join__field(graph: OUTAGEDETECTION)

  """Machine installations collection associated with the certificate."""
  machineInstallations(after: String, before: String, first: Int, last: Int): MachineInstallationConnection @join__field(graph: PROVISIONING)
  tags: [Tag!] @join__field(graph: TAGGING)
  clusterCertificateInstallations(after: String, before: String, first: Int, last: Int): ClusterCertificateInstallationConnection @join__field(graph: TLSPK)
  hasClusterSourceTag: Boolean! @inaccessible @join__field(graph: TLSPK)
  aggregatedKubernetesLabels: [AggregatedKubernetesTag]! @join__field(graph: TLSPK)
  aggregatedKubernetesAnnotations: [AggregatedKubernetesTag]! @join__field(graph: TLSPK)
  certManagerIssuer: CertManagerIssuer @join__field(graph: TLSPK)
}

type CertificateAuthorityAccount
  @join__type(graph: CAOPERATIONS, key: "id")
{
  id: ID!
  certificateAuthorityType: CertificateAuthorityType!
  name: String!
  productOptions: [CertificateAuthorityProductOption!]
}

type CertificateAuthorityAccountConnection
  @join__type(graph: CAOPERATIONS)
{
  pageInfo: PageInfo!
  totalCount: Int!
  nodes: [CertificateAuthorityAccount!]
  edges: [CertificateAuthorityAccountEdge]
}

type CertificateAuthorityAccountEdge
  @join__type(graph: CAOPERATIONS)
{
  node: CertificateAuthorityAccount!
  cursor: String!
}

type CertificateAuthorityImportOption
  @join__type(graph: CAOPERATIONS)
{
  id: UUID!
}

type CertificateAuthorityProductOption
  @join__type(graph: CAOPERATIONS)
{
  id: UUID!
  name: String!
  friendlyName: String
  types: [CertificateAuthorityProductOptionType!]
}

enum CertificateAuthorityProductOptionType
  @join__type(graph: CAOPERATIONS)
{
  SSL @join__enumValue(graph: CAOPERATIONS)
  CODESIGN @join__enumValue(graph: CAOPERATIONS)
}

enum CertificateAuthorityType
  @join__type(graph: CAOPERATIONS)
{
  DIGICERT @join__enumValue(graph: CAOPERATIONS)
  GLOBALSIGN @join__enumValue(graph: CAOPERATIONS)
  BUILTIN @join__enumValue(graph: CAOPERATIONS)
  ENTRUST @join__enumValue(graph: CAOPERATIONS)
  MICROSOFT @join__enumValue(graph: CAOPERATIONS)
  ACME @join__enumValue(graph: CAOPERATIONS)
  ZTPKI @join__enumValue(graph: CAOPERATIONS)
  GLOBALSIGNMSSL @join__enumValue(graph: CAOPERATIONS)
  TPP @join__enumValue(graph: CAOPERATIONS)
  CONNECTOR @join__enumValue(graph: CAOPERATIONS)
}

input CertificateBooleanFilter
  @join__type(graph: SEARCH)
{
  """The boolean value that we want to match"""
  eq: Boolean

  """The boolean value that we don't want to match"""
  neq: Boolean

  """
  The boolean value that we want to assert whether the boolean field is null or not
  """
  hasValue: Boolean
}

union CertificateCloudMetadata
  @join__type(graph: CLOUD_PROVIDERS)
  @join__unionMember(graph: CLOUD_PROVIDERS, member: "AWSCertificateMetadata")
  @join__unionMember(graph: CLOUD_PROVIDERS, member: "AzureCertificateMetadata")
  @join__unionMember(graph: CLOUD_PROVIDERS, member: "GCPCertificateMetadata")
  @join__unionMember(graph: CLOUD_PROVIDERS, member: "AkamaiCertificateMetadata")
 = AWSCertificateMetadata | AzureCertificateMetadata | GCPCertificateMetadata | AkamaiCertificateMetadata

"""
CertificateCompliancePolicyFindingsOverviewCategory denotes different categories for more details in the widget
"""
type CertificateCompliancePolicyFindingsOverviewCategory
  @join__type(graph: COMPLIANCE_POLICY)
{
  """Id is used to determine which category is being used"""
  id: String

  """
  Count returns the number related to the ID that this category is showing
  """
  count: Int
}

"""
CertificateCompliancePolicyFindingsOverviewWidget provides a summary context for number of certificates evaluated
in policies compared to how many of those certificate findings resulted in issues"
"""
type CertificateCompliancePolicyFindingsOverviewWidget
  @join__type(graph: COMPLIANCE_POLICY)
{
  """
  TotalCertificatesCount is the number of certificates with evaluation findings
  """
  totalCertificatesCount: Int

  """
  CertificatesWithFindingsCount returns the number of certificates with issues from findings
  """
  certificatesWithFindingsCount: Int

  """Categories is the list of certificates that have issues from findings"""
  categories: [CertificateCompliancePolicyFindingsOverviewCategory]
}

"""A page of certificate results"""
type CertificateConnection
  @join__type(graph: CERTIFICATE_INVENTORY)
  @join__type(graph: SEARCH)
  @join__type(graph: TLSPK)
{
  """Current page information"""
  pageInfo: PageInfo!

  """Total number of certificates (in all pages)"""
  totalCount: Int!

  """Certificates in the current page, without cursor"""
  nodes: [Certificate!] @join__field(graph: CERTIFICATE_INVENTORY, type: "[Certificate!]") @join__field(graph: SEARCH, type: "[Certificate!]") @join__field(graph: TLSPK, type: "[Certificate!]!")

  """
  Certificates in the current page, together with their associated cursor
  """
  edges: [CertificateEdge!] @join__field(graph: CERTIFICATE_INVENTORY, type: "[CertificateEdge!]") @join__field(graph: SEARCH, type: "[CertificateEdge!]") @join__field(graph: TLSPK, type: "[CertificateEdge!]!")
}

type CertificateConnectionWithAggregates
  @join__type(graph: SEARCH)
{
  pageInfo: PageInfo!
  totalCount: Int!
  nodes: [Certificate!]
  edges: [CertificateEdge!]
  aggregates(buckets: [BucketInput!]): [AggregateResult!]!
}

input CertificateDateFilter
  @join__type(graph: SEARCH)
{
  """The datetime value for certificate that we want to match"""
  eq: DateTime

  """The datetime value for certificate that we don't want to match"""
  neq: DateTime

  """
  The date range for certificate that we want to assert whether the date value is within the specified range
  """
  between: CertificateDateRange

  """
  The boolean value that we want to assert whether the date field is null or not
  """
  hasValue: Boolean
}

input CertificateDateRange
  @join__type(graph: SEARCH)
{
  """The earliest date value we want to match on"""
  gte: DateTime

  """The latest date value we want to match on"""
  lte: DateTime
}

"""Certificate together with its associated cursor"""
type CertificateEdge
  @join__type(graph: CERTIFICATE_INVENTORY)
  @join__type(graph: SEARCH)
  @join__type(graph: TLSPK)
{
  """The certificate"""
  node: Certificate!

  """The cursor for the certificate"""
  cursor: String!
}

"""
CertificateEvaluationRuleAttributesInput provides information on which attributes are used for evaluation
"""
input CertificateEvaluationRuleAttributesInput
  @join__type(graph: COMPLIANCE_POLICY)
{
  """
  CertificateAuthorityFingerprints allows to filter by certificate authority for Issuing CA evaluation type
  """
  certificateAuthorityFingerprints: CompliancePolicyFieldStringFilter

  """And allows for chaining AND logic"""
  and: [CertificateEvaluationRuleAttributesInput!]

  """Or allows for chaining OR logic"""
  or: [CertificateEvaluationRuleAttributesInput!]
}

"""
Identifies the intended usage for which the public-key certificate has been issued
"""
enum CertificateKeyUsage
  @join__type(graph: CERTIFICATE_INVENTORY)
{
  """
  for verifying digital signatures that are used with an entity authentication service, a data origin authentication service and/or an integrity service
  """
  DIGITAL_SIGNATURE @join__enumValue(graph: CERTIFICATE_INVENTORY)

  """
  for verifying digital signatures which are intended to signal that the signer is committing to the content being signed
  """
  NON_REPUDIATION @join__enumValue(graph: CERTIFICATE_INVENTORY)

  """
  for enciphering keys or other security information, e.g., for key transport
  """
  KEY_ENCIPHERMENT @join__enumValue(graph: CERTIFICATE_INVENTORY)

  """for enciphering user data, but not keys or other security information"""
  DATA_ENCIPHERMENT @join__enumValue(graph: CERTIFICATE_INVENTORY)

  """
  for use as a public key agreement key, such an when an asymmetric Diffie-Hellman key pair is used for key management
  """
  KEY_AGREEMENT @join__enumValue(graph: CERTIFICATE_INVENTORY)

  """for verifying a CA's signature on public-key certificates"""
  KEY_CERT_SIGN @join__enumValue(graph: CERTIFICATE_INVENTORY)

  """for verifying an authority's signature on CRLs"""
  CRL_SIGN @join__enumValue(graph: CERTIFICATE_INVENTORY)

  """
  public key agreement key for use only in enciphering data when used with KEY_AGREEMENT also set
  """
  ENCIPHER_ONLY @join__enumValue(graph: CERTIFICATE_INVENTORY)

  """
  public key agreement key for use only in deciphering data when used with KEY_AGREEMENT also set
  """
  DECIPHER_ONLY @join__enumValue(graph: CERTIFICATE_INVENTORY)
}

input CertificateListFilter
  @join__type(graph: SEARCH)
{
  """The string value that we want to assert whether it is within the list"""
  includes: String

  """The string value that we want to exclude from the list"""
  excludes: String

  """
  The boolean value that we want to assert whether the boolean field is null or not
  """
  hasValue: Boolean
}

"""
CertificateMatchingRuleAttributesInput provides information on which attributes are used for matching for certificate resources
"""
input CertificateMatchingRuleAttributesInput
  @join__type(graph: COMPLIANCE_POLICY)
{
  """ApplicationIDs allows to filter by application"""
  applicationIDs: CompliancePolicyFieldStringFilter

  """Tags allows to filter by application"""
  tags: CompliancePolicyFieldStringFilter

  """And allows for chaining AND logic"""
  and: [CertificateMatchingRuleAttributesInput!]

  """Or allows for chaining OR logic"""
  or: [CertificateMatchingRuleAttributesInput!]
}

input CertificateNumberFilter
  @join__type(graph: SEARCH)
{
  """The generic number value for certificate we want to match"""
  eq: Int64

  """The generic number value for certificate we don't want to match"""
  neq: Int64

  """
  The generic number range value for certificate that we want to assert whether the number value is within the specified range
  """
  between: CertificateNumberRange

  """
  The boolean value that we want to assert whether the number field is null or not
  """
  hasValue: Boolean
}

input CertificateNumberRange
  @join__type(graph: SEARCH)
{
  """The minimum number value we want to match on"""
  gte: Int64

  """The maximum number value we want to match on"""
  lte: Int64
}

"""CertificateOrderField defines the fields that can be used for ordering"""
enum CertificateOrderField
  @join__type(graph: SEARCH)
{
  """Order by field fingerprint"""
  FINGERPRINT @join__enumValue(graph: SEARCH)

  """Order by field subject.cn"""
  CERTIFICATE_NAME @join__enumValue(graph: SEARCH)

  """Order by field issuer.cn"""
  ISSUER @join__enumValue(graph: SEARCH)

  """Order by field validity.to"""
  EXPIRES_ON @join__enumValue(graph: SEARCH)

  """Order by field isCurrent"""
  IS_CURRENT @join__enumValue(graph: SEARCH)

  """Order by field tlsServerEndpoints.totalCount"""
  TLS_SERVER_ENDPOINTS_TOTAL_COUNT @join__enumValue(graph: SEARCH)

  """Order by field lastModifiedTime"""
  LAST_MODIFIED_TIME @join__enumValue(graph: SEARCH)

  """Order by field revocation.status"""
  REVOCATION_STATUS @join__enumValue(graph: SEARCH)

  """Order by field 'globalRevocation.status'"""
  GLOBAL_REVOCATION_STATUS @join__enumValue(graph: SEARCH)

  """Order by field 'globalRevocation.reason'"""
  GLOBAL_REVOCATION_REASON @join__enumValue(graph: SEARCH)

  """Order by field 'globalRevocation.revokedTime'"""
  GLOBAL_REVOCATION_REVOKED_TIME @join__enumValue(graph: SEARCH)
}

"""
CertificateOrderInput contains the ordering information for a specific field
"""
input CertificateOrderInput
  @join__type(graph: SEARCH)
{
  field: CertificateOrderField!
  direction: OrderDirection!
}

"""Identifies the origin of the certificate"""
enum CertificateOrigin
  @join__type(graph: SEARCH)
{
  USER_PROVIDED @join__enumValue(graph: SEARCH)
  USER_IMPORTED @join__enumValue(graph: SEARCH)
  USER_SCAN @join__enumValue(graph: SEARCH)
  ON_PREM_CA_IMPORT @join__enumValue(graph: SEARCH)
  EXTERNAL_CA_IMPORT @join__enumValue(graph: SEARCH)
  EXTERNAL_SCAN @join__enumValue(graph: SEARCH)
  DOMAIN_SCAN @join__enumValue(graph: SEARCH)
  SMART_SCAN_INTERNAL @join__enumValue(graph: SEARCH)
  SMART_SCAN_EXTERNAL @join__enumValue(graph: SEARCH)
  SMART_VALIDATION_INTERNAL @join__enumValue(graph: SEARCH)
  SMART_VALIDATION_EXTERNAL @join__enumValue(graph: SEARCH)
  MACHINE_DISCOVERY @join__enumValue(graph: SEARCH)
  KUBERNETES_DISCOVERY @join__enumValue(graph: SEARCH)
  AWS_DISCOVERY @join__enumValue(graph: SEARCH)
  AKAMAI_DISCOVERY @join__enumValue(graph: SEARCH)
  AZURE_DISCOVERY @join__enumValue(graph: SEARCH)
  GCP_DISCOVERY @join__enumValue(graph: SEARCH)
}

input CertificateOriginFilter
  @join__type(graph: SEARCH)
{
  """The string value that we want to assert whether it is within the list"""
  includes: CertificateOrigin

  """
  The list of origins to match. It will match if at least one of the origins is in the list
  """
  anyOf: [CertificateOrigin!]

  """
  The boolean value that we want to assert whether the boolean field is null or not
  """
  hasValue: Boolean
}

input CertificateProvisioningAWSOptionsInput
  @join__type(graph: CLOUD_PROVIDERS)
{
  """
  Amazon Resource Name (ARN) uniquely identifying AWS certificate resource
  """
  arn: String
  tags: [CertificateProvisioningTagOptionInput]
}

input CertificateProvisioningAzureOptionsInput
  @join__type(graph: CLOUD_PROVIDERS)
{
  """
  An Azure object-name is a user provided name for and must be unique within a key vault. The name must be a 1-127 character string, starting with a letter and containing only 0-9, a-z, A-Z, and -.
  """
  name: String
  enabled: Boolean
  exportable: Boolean
  reuseKey: Boolean
  tags: [CertificateProvisioningTagOptionInput]
}

input CertificateProvisioningGCPOptionsInput
  @join__type(graph: CLOUD_PROVIDERS)
{
  """
  A GCM certificate id is a user provider name and must be unique within a region. The id must be a 1-63 character string, start with a letter and only contain lower case letters, digits and hyphens.
  """
  id: String
  description: String
  scope: GCMCertificateScope
  labels: [CertificateProvisioningTagOptionInput]
}

input CertificateProvisioningOptionsInput
  @join__type(graph: CLOUD_PROVIDERS)
{
  awsOptions: CertificateProvisioningAWSOptionsInput
  azureOptions: CertificateProvisioningAzureOptionsInput
  gcpOptions: CertificateProvisioningGCPOptionsInput
}

input CertificateProvisioningTagOptionInput
  @join__type(graph: CLOUD_PROVIDERS)
{
  name: String!
  value: String!
}

type CertificateRequest
  @join__type(graph: CAOPERATIONS, key: "id")
  @join__type(graph: CODESIGN, key: "id", resolvable: false)
  @join__type(graph: OUTAGEDETECTION, key: "id")
{
  id: ID!
  issuingTemplate: IssuingTemplate @join__field(graph: CAOPERATIONS)
  requester: User @join__field(graph: CAOPERATIONS)
  issuedTime: DateTime @join__field(graph: CAOPERATIONS)
  csr: String @join__field(graph: CAOPERATIONS)
  validityPeriod: String @join__field(graph: CAOPERATIONS)
  certificateAuthorityAccount: CertificateAuthorityAccount @join__field(graph: CAOPERATIONS) @deprecated(reason: "deprecated - use issuingTemplate.certificateAuthorityAccount field")
  application: Application @join__field(graph: OUTAGEDETECTION)
}

enum CertificateRevocationApprovalStatus
  @join__type(graph: CAOPERATIONS)
{
  NOT_STARTED @join__enumValue(graph: CAOPERATIONS)
  COMPLETED @join__enumValue(graph: CAOPERATIONS)
  FAILED @join__enumValue(graph: CAOPERATIONS)
}

type CertificateRevocationApprovalStatusObject
  @join__type(graph: CAOPERATIONS)
{
  fingerprint: String!
  errorInformation: ErrorInformation
  status: CertificateRevocationApprovalStatus!
}

"""
CertificateSearchAttributesInput defines the searchable field attributes. The parent input field name defines the operator
used between the attributes (i.e. "and" will match ALL supplied attributes, "or" will match ANY of the attributes)
"""
input CertificateSearchAttributesInput
  @join__type(graph: SEARCH)
{
  """Filter by field 'application.id'"""
  applicationId: CertificateStringFilter

  """Filter by field 'application.name'"""
  applicationName: CertificateStringFilter

  """Filter by field 'applications.owners.nodes.id'"""
  applicationOwnerId: CertificateStringFilter

  """Filter by field 'lastImportRunId'"""
  lastImportRunId: CertificateStringFilter

  """Filter by field 'issuanceCertificateAuthorityAccount.id'"""
  issuanceCertificateAuthorityAccountId: CertificateStringFilter

  """Filter by field 'productOption.id'"""
  productOptionId: CertificateStringFilter

  """Filter by field 'importCertificateAuthorityAccount.id'"""
  importCertificateAuthorityAccountId: CertificateStringFilter

  """Filter by field 'importOption.id'"""
  importOptionId: CertificateStringFilter

  """Filter by field 'certificateErrorCount.alerts'"""
  certificateAlertsCount: CertificateNumberFilter

  """Filter by field 'certificateErrorCount.warnings'"""
  certificateWarningsCount: CertificateNumberFilter

  """Filter by field 'name'"""
  certificateName: CertificateStringFilter

  """Filter by field 'subject.c'"""
  subjectC: CertificateListFilter

  """Filter by field 'subject.cn'"""
  subjectCN: CertificateStringFilter

  """Filter by field 'subject.commonName'"""
  subjectCommonName: CertificateListFilter

  """Filter by field 'subject.dc'"""
  subjectDC: CertificateStringFilter

  """Filter by field 'subject.l'"""
  subjectL: CertificateListFilter

  """Filter by field 'subject.o'"""
  subjectO: CertificateListFilter

  """Filter by field 'subject.ou'"""
  subjectOU: CertificateListFilter

  """Filter by field 'subject.postalCode'"""
  subjectPostalCode: CertificateListFilter

  """Filter by field 'subject.st'"""
  subjectST: CertificateListFilter

  """Filter by field 'errorCount.alerts'"""
  alertsCount: CertificateNumberFilter

  """Filter by field 'errorCount.warnings'"""
  warningsCount: CertificateNumberFilter

  """Filter by field 'extendedKeyUsages'"""
  extendedKeyUsages: ExtendedKeyUsagesFilter

  """Filter by field 'fingerprint'"""
  fingerprint: CertificateStringFilter

  """Filter by field 'creationTime'"""
  creationTime: CertificateDateFilter

  """Filter by field 'lastModifiedTime'"""
  lastModifiedTime: CertificateDateFilter

  """Filter by field 'serialNumber'"""
  serialNumber: CertificateStringFilter

  """Filter by field 'isCurrent'"""
  isCurrent: CertificateBooleanFilter

  """Filter by field 'isCA'"""
  isCA: CertificateBooleanFilter

  """Filter by field 'isSelfSigned'"""
  isSelfSigned: CertificateBooleanFilter

  """Filter by field 'issuer.c'"""
  issuerC: CertificateListFilter

  """Filter by field 'issuer.cn'"""
  issuerCN: CertificateStringFilter

  """Filter by field 'issuer.dc'"""
  issuerDC: CertificateStringFilter

  """Filter by field 'issuer.l'"""
  issuerL: CertificateListFilter

  """Filter by field 'issuer.o'"""
  issuerO: CertificateListFilter

  """Filter by field 'issuer.ou'"""
  issuerOU: CertificateListFilter

  """Filter by field 'issuer.postalCode'"""
  issuerPostalCode: CertificateListFilter

  """Filter by field 'issuer.st'"""
  issuerST: CertificateListFilter

  """Filter by field 'origins'"""
  origins: CertificateOriginFilter

  """Filter by field 'revocation.status'"""
  revocationStatus: RevocationStatusFilter

  """Filter by field 'revocation.approvalDetails.approverUserIds'"""
  revocationApproverUserIds: RevocationApprovalInformationFilter

  """Filter by field 'revocation.approvalDetails.approverTeamIds'"""
  revocationApproverTeamIds: RevocationApprovalInformationFilter

  """Filter by field 'revocation.approvalDetails.approvedIds'"""
  revocationApprovedIds: RevocationApprovalInformationFilter

  """Filter by field 'revocation.approvalDetails.finalApproverId'"""
  revocationFinalApproverId: RevocationFinalApprovalInformationFilter

  """Filter by field 'dekHash'"""
  dekHash: CertificateStringFilter

  """Filter by field 'publicKeyInformation.__typename'"""
  publicKeyInformationTypeName: PublicKeyInformationTypeFilter

  """Filter by RSAKeyInfo field 'publicKeyInformation.strength'"""
  publicKeyInformationRSAStrength: CertificateNumberFilter

  """Filter by ECKeyInfo field 'publicKeyInformation.curve'"""
  publicKeyInformationECCurve: CertificateStringFilter

  """Filter by DSAKeyInfo field 'publicKeyInformation.l'"""
  publicKeyInformationDSAL: CertificateNumberFilter

  """Filter by DSAKeyInfo field 'publicKeyInformation.n'"""
  publicKeyInformationDSAN: CertificateNumberFilter

  """Filter by GenericKeyInfo field 'publicKeyInformation.oid'"""
  publicKeyInformationOID: CertificateStringFilter

  """Filter by field 'subjectHashAlgorithm'"""
  signatureHashAlgorithm: SignatureHashAlgorithmFilter

  """Filter by field 'status'"""
  status: CertificateStatusFilter

  """Filter by field 'subjectAlternativeNames.__typename'"""
  subjectAlternativeNameTypeName: SubjectAlternativeNameTypeFilter

  """Filter by field 'subjectAlternativeNames.dnsName'"""
  subjectAlternativeNameDNSName: CertificateStringFilter

  """Filter by field 'subjectAlternativeNames.c'"""
  subjectAlternativeNameDirectoryNameC: CertificateListFilter

  """Filter by field 'subjectAlternativeNames.cn'"""
  subjectAlternativeNameDirectoryNameCN: CertificateStringFilter

  """Filter by field 'subjectAlternativeNames.l'"""
  subjectAlternativeNameDirectoryNameL: CertificateListFilter

  """Filter by field 'subjectAlternativeNames.o'"""
  subjectAlternativeNameDirectoryNameO: CertificateListFilter

  """Filter by field 'subjectAlternativeNames.ou'"""
  subjectAlternativeNameDirectoryNameOU: CertificateListFilter

  """Filter by field 'subjectAlternativeNames.postalCode'"""
  subjectAlternativeNameDirectoryNamePostalCode: CertificateListFilter

  """Filter by field 'subjectAlternativeNames.st'"""
  subjectAlternativeNameDirectoryNameST: CertificateListFilter

  """Filter by field 'subjectAlternativeNames.streetAddress'"""
  subjectAlternativeNameDirectoryNameStreetAddress: CertificateListFilter

  """Filter by field 'subjectAlternativeNames.ip'"""
  subjectAlternativeNameIP: CertificateStringFilter

  """Filter by field 'subjectAlternativeNames.uri'"""
  subjectAlternativeNameURI: CertificateStringFilter

  """Filter by field 'subjectAlternativeNames.emailAddress'"""
  subjectAlternativeNameEmailAddress: CertificateStringFilter

  """Filter by field 'tags.name'"""
  tagName: CertificateStringFilter

  """Filter by field 'tlsServerEndpoints.totalCount'"""
  tlsServerEndpointTotalCount: CertificateNumberFilter

  """Filter by field 'tlsServerEndpoints.nodes.lastAttemptTime'"""
  tlsServerEndpointLastAttemptTime: CertificateDateFilter

  """Filter by field 'tlsServerEndpoints.nodes.lastSeenTime'"""
  tlsServerEndpointLastSeenTime: CertificateDateFilter

  """Filter by field 'tlsServerEndpoints.nodes.deploymentStatus'"""
  tlsServerEndpointDeploymentStatus: DeploymentStatusFilter

  """
  Filter by field 'tlsServerEndpoints.nodes.tlsValidationError.errorType'
  """
  tlsServerEndpointTLSValidationErrorType: TLSValidationErrorTypeFilter

  """
  Filter by field 'tlsServerEndpoints.nodes.chainValidationErrors.errorType'
  """
  tlsServerEndpointChainValidationErrorType: ChainValidationErrorTypeFilter

  """Filter by field 'validity.from'"""
  validityFrom: CertificateDateFilter

  """Filter by field 'validity.to'"""
  validityTo: CertificateDateFilter

  """Filter by field 'validity.period'"""
  validityPeriod: CertificateNumberFilter

  """Filter by field 'clusterCertificateInstallations.nodes.__typename'"""
  clusterCertificateInstallationTypeName: CertificateStringFilter

  """Filter by field 'clusterCertificateInstallations.nodes.namespace'"""
  clusterCertificateInstallationClusterSecretNamespace: CertificateStringFilter

  """Filter by field 'clusterCertificateInstallations.nodes.cluster.id'"""
  clusterCertificateInstallationClusterId: CertificateStringFilter

  """Filter by field 'clusterCertificateInstallations.nodes.cluster.name'"""
  clusterCertificateInstallationClusterName: CertificateStringFilter

  """Filter by field 'clusterCertificateInstallations.nodes.lifecycle'"""
  clusterCertificateInstallationClusterSecretLifecycle: CertificateStringFilter

  """
  Filter by field 'clusterCertificateInstallations.nodes.clusterCertificateBinding.resourceType'
  """
  clusterCertificateInstallationClusterSecretUsedBy: CertificateStringFilter

  """Filter by field 'aggregatedKubernetesLabels.name'"""
  kubernetesLabel: CertificateStringFilter

  """Filter by field 'aggregatedKubernetesAnnotations.name'"""
  kubernetesAnnotation: CertificateStringFilter

  """Filter by field 'cloudInstallations.nodes.metadata.cloudId'"""
  cloudInstallationsCloudId: CertificateStringFilter

  """Filter by field 'cloudInstallations.nodes.cloudKeystoreId'"""
  cloudInstallationsCloudKeystoreId: CertificateStringFilter

  """Filter by field 'cloudInstallations.nodes.cloudKeystoreName'"""
  cloudInstallationsCloudKeystoreName: CertificateStringFilter

  """Filter by field 'cloudInstallations.nodes.cloudProviderId'"""
  cloudInstallationsCloudProviderId: CertificateStringFilter

  """Filter by field 'cloudInstallations.nodes.cloudProviderName'"""
  cloudInstallationsCloudProviderName: CertificateStringFilter

  """Filter by field 'cloudInstallations.nodes.addedOn'"""
  cloudInstallationsAddedOn: CertificateDateFilter

  """Filter by field 'cloudInstallations.nodes.status'"""
  cloudInstallationsStatus: CertificateStringFilter

  """Filter by field 'networkDiscovery.id'"""
  networkDiscoveryId: CertificateListFilter

  """Filter by field 'networkDiscovery.name'"""
  networkDiscoveryName: CertificateListFilter

  """Filter by field 'hasTLSServerEndpoints'"""
  hasTLSServerEndpoints: CertificateBooleanFilter

  """Filter by field 'hasTLSServerEndpointsValidationErrors'"""
  hasTLSServerEndpointsValidationErrors: CertificateBooleanFilter

  """Filter by field 'globalRevocation.status'"""
  globalRevocationStatus: GlobalRevocationStatusFilter

  """Filter by field 'globalRevocation.reason'"""
  globalRevocationReason: GlobalRevocationReasonFilter

  """Filter by field 'globalRevocation.revokedTime'"""
  globalRevocationRevokedTime: CertificateDateFilter

  """Filter by field 'certManagerIssuer.name'"""
  certManagerIssuerName: CertificateStringFilter

  """Filter by field 'certManagerIssuer.namespace'"""
  certManagerIssuerNamespace: CertificateStringFilter

  """Filter by field 'certManagerIssuer.scope'"""
  certManagerIssuerScope: CertManagerIssuerScopeFilter

  """Filter by field 'certManagerIssuer.type'"""
  certManagerIssuerType: CertManagerIssuerTypeFilter

  """
  Filter by matching ALL the supplied fields on the array of CertificateSearchAttributes input object
  """
  and: [CertificateSearchAttributesInput!]

  """
  Filter by matching any ONE of the supplied fields on the array of CertificateSearchAttributes input object
  """
  or: [CertificateSearchAttributesInput!]
}

"""
CertificateSearchFilterInput defines the search filter. If more than one field is supplied, the match is on ALL of them
(i.e. using an implicit AND operator)
"""
input CertificateSearchFilterInput
  @join__type(graph: SEARCH)
{
  """
  Simple filter for full-text like search, used for matching across all searchable fields
  """
  quickFilter: String

  """
  Filter by matching ALL the supplied fields on the array of CertificateSearchAttributes input object
  """
  and: [CertificateSearchAttributesInput!]

  """
  Filter by matching any ONE of the supplied fields on the array of CertificateSearchAttributes input object
  """
  or: [CertificateSearchAttributesInput!]
}

"""Indicates the status of a certificate"""
enum CertificateStatus
  @join__type(graph: CERTIFICATE_INVENTORY)
  @join__type(graph: SEARCH)
{
  """certificate is active"""
  ACTIVE @join__enumValue(graph: CERTIFICATE_INVENTORY) @join__enumValue(graph: SEARCH)

  """certificate has been retired by an user"""
  RETIRED @join__enumValue(graph: CERTIFICATE_INVENTORY) @join__enumValue(graph: SEARCH)
}

input CertificateStatusFilter
  @join__type(graph: SEARCH)
{
  """The certificate status value we want to match"""
  eq: CertificateStatus

  """The certificate status value we don't want to match"""
  neq: CertificateStatus

  """
  The list of certificate status that we want to assert whether the string value is included in the provided list
  """
  in: [CertificateStatus!]

  """
  The boolean value that we want to assert whether the field is null or not
  """
  hasValue: Boolean
}

input CertificateStringFilter
  @join__type(graph: SEARCH)
{
  """The generic string value for certificate we want to match"""
  eq: String

  """The generic string value for certificate we don't want to match"""
  neq: String

  """
  The generic string value for certificate we want to assert whether the provided string is present
  """
  contains: String

  """
  The list of generic string values for certificate that we want to assert whether the string value is included in the provided list
  """
  in: [String!]

  """
  The list of generic string values for certificate that we want to assert whether the certificate string value is a prefixed by values in the provided list
  """
  startsWith: [String!]

  """
  The boolean value that we want to assert whether the field is null or not
  """
  hasValue: Boolean
}

"""
CertificateType defines what type of certificate the trusted CA cert is
"""
enum CertificateType
  @join__type(graph: CERTIFICATE)
{
  ROOT_CA @join__enumValue(graph: CERTIFICATE)
  SELF_ISSUED_CA @join__enumValue(graph: CERTIFICATE)
  CA @join__enumValue(graph: CERTIFICATE)
  CROSS_CA @join__enumValue(graph: CERTIFICATE)
  END_ENTITY @join__enumValue(graph: CERTIFICATE)
  END_ENTITY_AC @join__enumValue(graph: CERTIFICATE)
}

type CertificateValidationError implements ValidationError
  @join__implements(graph: CERTIFICATE_INVENTORY, interface: "ValidationError")
  @join__type(graph: CERTIFICATE_INVENTORY)
{
  message: String
  arguments: [String!]
  errorType: CertificateValidationErrorType
}

"""Identifies error type for certificate validation"""
enum CertificateValidationErrorType
  @join__type(graph: CERTIFICATE_INVENTORY)
{
  """indicates when a certificate is expired"""
  CERTIFICATE_EXPIRED @join__enumValue(graph: CERTIFICATE_INVENTORY)

  """
  indicates when a certificate is an older version of an existing current version of certificate
  """
  CERTIFICATE_OLD_VERSION @join__enumValue(graph: CERTIFICATE_INVENTORY)
}

"""Indicates the validity of a certificate"""
type CertificateValidity
  @join__type(graph: CERTIFICATE_INVENTORY)
{
  from: DateTime
  to: DateTime

  """ certificate validity period in seconds"""
  period: Int64
}

type CertManagerIssuer
  @join__type(graph: TLSPK)
{
  """ID is the identifier of the issuer resource in VaaS. It is immutable."""
  id: ID!

  """Name is the name of the issuer."""
  name: String!

  """Namespace is the namespace where the issuer exist, could be empty."""
  namespace: String

  """Kind is the kind of the issuer"""
  kind: String!

  """
  Type is the type of the issuer, e.g; VenafiEnhancedIssuer, VenafiCloud, FreeIPA or Google CAS.
  """
  type: IssuerType!

  """Scope is the scope of the issuer, Cluster wide or namespace targeted."""
  scope: ResourceScope!

  """Status is the status of the issuer resource."""
  status: Status!

  """
  YamlSpec is the yaml representation of the specification of the issuer.
  """
  yamlSpec: String!

  """
  Certificates is the list of certificates linked to a particular issuer.
  """
  certificates: CertificateConnection

  """
  LastUpdatedOn is the timestamp of the last time this issuer was processed by TLSPK.
  """
  lastUpdatedOn: String!

  """
  IssuanceInfo contains the info around venafi if the issuer is a venafi issuer
  """
  issuanceInfo: IssuanceInfo
  aggregatedKubernetesLabels(type: IssuerTagType): [AggregatedKubernetesTag]!
  aggregatedKubernetesAnnotations(type: IssuerTagType): [AggregatedKubernetesTag]!
}

type CertManagerIssuerConnection
  @join__type(graph: TLSPK)
{
  edges: [CertManagerIssuerEdge!]!
  nodes: [CertManagerIssuer!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type CertManagerIssuerEdge
  @join__type(graph: TLSPK)
{
  node: CertManagerIssuer!
  cursor: String!
}

input CertManagerIssuerFilterInput
  @join__type(graph: TLSPK)
{
  clusterId: ID!
}

input CertManagerIssuerScopeFilter
  @join__type(graph: SEARCH)
{
  """The string value we want to match"""
  eq: ResourceScope

  """
  The boolean value that we want to assert whether the boolean field is null or not
  """
  hasValue: Boolean

  """
  The list of strings that we want to assert whether the string value is included in the provided list
  """
  in: [ResourceScope!]
}

input CertManagerIssuerTypeFilter
  @join__type(graph: SEARCH)
{
  """The string value we want to match"""
  eq: IssuerType

  """
  The boolean value that we want to assert whether the boolean field is null or not
  """
  hasValue: Boolean

  """
  The list of strings that we want to assert whether the string value is included in the provided list
  """
  in: [IssuerType!]
}

type ChainValidationError implements ValidationError
  @join__implements(graph: OUTAGEDETECTION, interface: "ValidationError")
  @join__type(graph: OUTAGEDETECTION)
{
  message: String
  arguments: [String!]
  errorType: ChainValidationErrorType
}

"""
Identifies the chain validation error type associated with a tls server endpoint
"""
enum ChainValidationErrorType
  @join__type(graph: OUTAGEDETECTION)
  @join__type(graph: SEARCH)
{
  CHAIN_EXPIRE_BEFORE_EE @join__enumValue(graph: OUTAGEDETECTION) @join__enumValue(graph: SEARCH)
  CHAIN_BUILDING_FAILED @join__enumValue(graph: OUTAGEDETECTION) @join__enumValue(graph: SEARCH)
  INCOMPLETE_CHAIN @join__enumValue(graph: OUTAGEDETECTION) @join__enumValue(graph: SEARCH)
  DISTRUSTED @join__enumValue(graph: OUTAGEDETECTION) @join__enumValue(graph: SEARCH)
  UNKNOWN_ERROR @join__enumValue(graph: OUTAGEDETECTION) @join__enumValue(graph: SEARCH)
  NOT_APPLICABLE @join__enumValue(graph: OUTAGEDETECTION) @join__enumValue(graph: SEARCH)
  SELF_SIGNED @join__enumValue(graph: OUTAGEDETECTION) @join__enumValue(graph: SEARCH)
}

input ChainValidationErrorTypeFilter
  @join__type(graph: SEARCH)
{
  """The chain validation error type value we want to match"""
  eq: ChainValidationErrorType

  """The chain validation error type value we don't want to match"""
  neq: ChainValidationErrorType

  """
  The list of chain validation error types that we want to assert whether the string value is included in the provided list
  """
  in: [ChainValidationErrorType!]

  """
  The boolean value that we want to assert whether the field is null or not
  """
  hasValue: Boolean
}

type CloudDiscovery
  @join__type(graph: CLOUD_PROVIDERS)
{
  id: UUID!
  cloudKeystore: CloudKeystore!
  status: CloudDiscoveryStatus!
  statusDetails: String
  totalCertificatesCount: Int!
  missingCertificatesCount: Int!
  updatedCertificatesCount: Int!
  newCertificatesCount: Int!
  startedBy: User!
  startTime: DateTime
  endTime: DateTime
}

type CloudDiscoveryConfiguration
  @join__type(graph: CLOUD_PROVIDERS)
{
  """
  A crontab expression representing when the scheduled discovery will run, eg: '00 03 * * *' -> 3 AM every day
  """
  scheduleSpecification: String
  includeExpiredCertificates: Boolean!
  includeRevokedCertificates: Boolean!
}

input CloudDiscoveryConfigurationInput
  @join__type(graph: CLOUD_PROVIDERS)
{
  """
  A crontab expression representing when the scheduled discovery will run, eg: '00 03 * * *' -> 3 AM every day
  """
  scheduleSpecification: String
  includeExpiredCertificates: Boolean
  includeRevokedCertificates: Boolean
}

"""Indicates the status of a cloud discovery"""
enum CloudDiscoveryStatus
  @join__type(graph: CLOUD_PROVIDERS)
{
  """The cloud discovery has not been initiated"""
  NEVER_INITIATED @join__enumValue(graph: CLOUD_PROVIDERS)

  """The cloud discovery has been initiated"""
  INITIATED @join__enumValue(graph: CLOUD_PROVIDERS)

  """The cloud discovery is running"""
  RUNNING @join__enumValue(graph: CLOUD_PROVIDERS)

  """The cloud discovery has been successfully completed"""
  COMPLETED @join__enumValue(graph: CLOUD_PROVIDERS)

  """The cloud discovery has been aborted"""
  ABORTED @join__enumValue(graph: CLOUD_PROVIDERS)

  """The cloud discovery is aborting"""
  ABORTING @join__enumValue(graph: CLOUD_PROVIDERS)

  """The cloud discovery has failed"""
  FAILED @join__enumValue(graph: CLOUD_PROVIDERS)
}

type CloudKeystore
  @join__type(graph: CLOUD_PROVIDERS)
{
  id: UUID!

  """
  Cloud Keystore name
  
  A string between 3 and 250 characters
  """
  name: String!
  type: CloudKeystoreType!
  team: Team!
  authorizedTeams: [Team!]
  cloudProvider: CloudProvider!
  configuration: CloudKeystoreConfiguration!
  machineIdentitiesCount: Int!
  createdOn: DateTime!
  createdBy: User!
  lastModifiedOn: DateTime!
  lastModifiedBy: User
  discovery: CloudDiscovery
  discoveryConfiguration: CloudDiscoveryConfiguration!
}

type CloudKeystoreACMConfiguration
  @join__type(graph: CLOUD_PROVIDERS)
{
  region: String!
  accountId: AWSAccountID
}

input CloudKeystoreACMConfigurationInput
  @join__type(graph: CLOUD_PROVIDERS)
{
  region: String!
  accountId: AWSAccountID
}

type CloudKeystoreAkamaiCDNConfiguration
  @join__type(graph: CLOUD_PROVIDERS)
{
  contractId: String!
}

input CloudKeystoreAkamaiCDNConfigurationInput
  @join__type(graph: CLOUD_PROVIDERS)
{
  contractId: String!
}

type CloudKeystoreAKVConfiguration
  @join__type(graph: CLOUD_PROVIDERS)
{
  """
  An Azure Key Vault name
  
  The vault name should be string of 3 to 24 characters and can contain only numbers (0-9), letters (a-z, A-Z), and hyphens (-).
  The name must begin with a letter, end with a letter or digit, and not contain consecutive hyphens.
  """
  keyVaultName: String!
}

input CloudKeystoreAKVConfigurationInput
  @join__type(graph: CLOUD_PROVIDERS)
{
  """
  An Azure Key Vault name
  
  The vault name should be string of 3 to 24 characters and can contain only numbers (0-9), letters (a-z, A-Z), and hyphens (-).
  The name must begin with a letter, end with a letter or digit, and not contain consecutive hyphens.
  """
  keyVaultName: String!
}

union CloudKeystoreConfiguration
  @join__type(graph: CLOUD_PROVIDERS)
  @join__unionMember(graph: CLOUD_PROVIDERS, member: "CloudKeystoreACMConfiguration")
  @join__unionMember(graph: CLOUD_PROVIDERS, member: "CloudKeystoreAKVConfiguration")
  @join__unionMember(graph: CLOUD_PROVIDERS, member: "CloudKeystoreGCMConfiguration")
  @join__unionMember(graph: CLOUD_PROVIDERS, member: "CloudKeystoreAkamaiCDNConfiguration")
 = CloudKeystoreACMConfiguration | CloudKeystoreAKVConfiguration | CloudKeystoreGCMConfiguration | CloudKeystoreAkamaiCDNConfiguration

"""A page of CloudKeystore results"""
type CloudKeystoreConnection
  @join__type(graph: CLOUD_PROVIDERS)
{
  """Current page information"""
  pageInfo: PageInfo!

  """Total number of cloud keystores (in all pages)"""
  totalCount: Int!

  """CloudKeystores in the current page, without cursor"""
  nodes: [CloudKeystore!]

  """
  CloudKeystores in the current page, together with their associated cursor
  """
  edges: [CloudKeystoreEdge!]
}

"""CloudKeystore together with its associated cursor"""
type CloudKeystoreEdge
  @join__type(graph: CLOUD_PROVIDERS)
{
  """The cloud keystore"""
  node: CloudKeystore!

  """The cursor for the cloud keystore"""
  cursor: String!
}

input CloudKeystoreFilterInput
  @join__type(graph: CLOUD_PROVIDERS)
{
  cloudProviderId: UUID
  cloudProviderName: String
  cloudKeystoreId: UUID
  cloudKeystoreName: String
}

type CloudKeystoreGCMConfiguration
  @join__type(graph: CLOUD_PROVIDERS)
{
  projectId: String!
  location: String!
}

input CloudKeystoreGCMConfigurationInput
  @join__type(graph: CLOUD_PROVIDERS)
{
  """
  GCP Certificate Manager project name.
  
  The unique, user-assigned ID of the Project. It must be 6 to 30 lowercase letters, digits, or hyphens. It must start with a letter. Trailing hyphens are prohibited.
  """
  projectId: String!
  location: String!
}

input CloudKeystoreInput
  @join__type(graph: CLOUD_PROVIDERS)
{
  """
  Cloud Keystore name
  
  A string between 3 and 250 characters
  """
  name: String!
  type: CloudKeystoreType!
  teamId: UUID!
  authorizedTeams: [UUID!]
  cloudProviderId: UUID!
  acmConfiguration: CloudKeystoreACMConfigurationInput
  akvConfiguration: CloudKeystoreAKVConfigurationInput
  gcmConfiguration: CloudKeystoreGCMConfigurationInput
  akamaiCdnConfiguration: CloudKeystoreAkamaiCDNConfigurationInput
  discoveryConfiguration: CloudDiscoveryConfigurationInput
}

"""
CloudKeystoreOrderField defines the fields that can be used for ordering
"""
enum CloudKeystoreOrderField
  @join__type(graph: CLOUD_PROVIDERS)
{
  """Order by ID"""
  ID @join__enumValue(graph: CLOUD_PROVIDERS)

  """Order by Name"""
  NAME @join__enumValue(graph: CLOUD_PROVIDERS)

  """Order by Cloud Keystore Type"""
  TYPE @join__enumValue(graph: CLOUD_PROVIDERS)

  """Order by Owner Team ID"""
  TEAM_ID @join__enumValue(graph: CLOUD_PROVIDERS)

  """Order by Authorized Team IDs"""
  AUTHORIZED_TEAMS @join__enumValue(graph: CLOUD_PROVIDERS)

  """Order by Cloud Provider ID"""
  CLOUD_PROVIDER_ID @join__enumValue(graph: CLOUD_PROVIDERS)

  """Order by Cloud Provider Name"""
  CLOUD_PROVIDER_NAME @join__enumValue(graph: CLOUD_PROVIDERS)

  """Order by Machine Identities Count"""
  MACHINE_IDENTITIES_COUNT @join__enumValue(graph: CLOUD_PROVIDERS)

  """Order by Created On date"""
  CREATED_ON @join__enumValue(graph: CLOUD_PROVIDERS)

  """Order by CreatedBy User ID"""
  CREATED_BY @join__enumValue(graph: CLOUD_PROVIDERS)

  """Order by Last Modified date"""
  LAST_MODIFIED_ON @join__enumValue(graph: CLOUD_PROVIDERS)

  """Order by Last Modified By User ID"""
  LAST_MODIFIED_BY @join__enumValue(graph: CLOUD_PROVIDERS)
}

"""
CloudKeystoreOrderInput contains the ordering information for a specific field
"""
input CloudKeystoreOrderInput
  @join__type(graph: CLOUD_PROVIDERS)
{
  field: CloudKeystoreOrderField!
  direction: OrderDirection!
}

"""Indicates the type of a Cloud Keystore"""
enum CloudKeystoreType
  @join__type(graph: CLOUD_PROVIDERS)
{
  """AWS Certificate Manager"""
  ACM @join__enumValue(graph: CLOUD_PROVIDERS)

  """Azure Key Vault"""
  AKV @join__enumValue(graph: CLOUD_PROVIDERS)

  """Google Certificate Manager"""
  GCM @join__enumValue(graph: CLOUD_PROVIDERS)

  """Akamai Content Delivery Network"""
  AKAMAI_CDN @join__enumValue(graph: CLOUD_PROVIDERS)
}

input CloudKeystoreUpdateInput
  @join__type(graph: CLOUD_PROVIDERS)
{
  id: UUID!

  """
  Cloud Keystore name
  
  A string between 3 and 250 characters
  """
  name: String
  teamId: UUID
  authorizedTeams: [UUID!]
  discoveryConfiguration: CloudDiscoveryConfigurationInput
}

input CloudMachineIdentitiesFilterInput
  @join__type(graph: CLOUD_PROVIDERS)
{
  cloudKeystoreId: UUID
  machineIdentityId: UUID
  fingerprints: [String!]
  newlyDiscovered: Boolean
  metadata: String
}

type CloudProvider
  @join__type(graph: CLOUD_PROVIDERS)
{
  id: UUID!
  type: CloudProviderType!
  configuration: CloudProviderConfiguration!
  name: String!
  team: Team!
  authorizedTeams: [Team!]
  status: CloudProviderStatus!
  statusDetails: String
  keystoresCount: Int!
  createdOn: DateTime!
  createdBy: User!
  lastModifiedOn: DateTime!
  lastModifiedBy: User
}

type CloudProviderAkamaiConfiguration
  @join__type(graph: CLOUD_PROVIDERS)
{
  contractIds: [String!]!
  host: String!
  accessToken: String!
  clientToken: String!
  tokenExpiration: DateTime
}

input CloudProviderAkamaiConfigurationInput
  @join__type(graph: CLOUD_PROVIDERS)
{
  contractIds: [String!]!
  host: String!
  accessToken: String!
  clientToken: String!
  clientSecret: String!
}

input CloudProviderAkamaiConfigurationUpdateInput
  @join__type(graph: CLOUD_PROVIDERS)
{
  contractIds: [String!]!
  host: String!
  accessToken: String!
  clientToken: String!
  clientSecret: String
}

type CloudProviderAWSConfiguration
  @join__type(graph: CLOUD_PROVIDERS)
{
  accountId: AWSAccountID!

  """
  An AWS Policy Role.
  
  Maximum 64 characters. Use alphanumeric and '+=,.@-_' characters.
  """
  role: String!
  externalId: String!
  organizationId: String
}

input CloudProviderAWSConfigurationInput
  @join__type(graph: CLOUD_PROVIDERS)
{
  accountId: AWSAccountID!

  """
  An AWS Policy Role.
  
  Maximum 64 characters. Use alphanumeric and '+=,.@-_' characters.
  """
  role: String!
}

input CloudProviderAWSConfigurationUpdateInput
  @join__type(graph: CLOUD_PROVIDERS)
{
  """
  An AWS Policy Role.
  
  Maximum 64 characters. Use alphanumeric and '+=,.@-_' characters.
  """
  role: String
}

type CloudProviderAzureConfiguration
  @join__type(graph: CLOUD_PROVIDERS)
{
  applicationId: String!
  directoryId: String!
}

input CloudProviderAzureConfigurationInput
  @join__type(graph: CLOUD_PROVIDERS)
{
  applicationId: String!
  directoryId: String!
  secret: String!
}

input CloudProviderAzureConfigurationUpdateInput
  @join__type(graph: CLOUD_PROVIDERS)
{
  secret: String!
}

union CloudProviderConfiguration
  @join__type(graph: CLOUD_PROVIDERS)
  @join__unionMember(graph: CLOUD_PROVIDERS, member: "CloudProviderAWSConfiguration")
  @join__unionMember(graph: CLOUD_PROVIDERS, member: "CloudProviderAzureConfiguration")
  @join__unionMember(graph: CLOUD_PROVIDERS, member: "CloudProviderGCPConfiguration")
  @join__unionMember(graph: CLOUD_PROVIDERS, member: "CloudProviderAkamaiConfiguration")
 = CloudProviderAWSConfiguration | CloudProviderAzureConfiguration | CloudProviderGCPConfiguration | CloudProviderAkamaiConfiguration

"""A page of CloudProvider results"""
type CloudProviderConnection
  @join__type(graph: CLOUD_PROVIDERS)
{
  """Current page information"""
  pageInfo: PageInfo!

  """Total number of cloud providers (in all pages)"""
  totalCount: Int!

  """CloudProviders in the current page, without cursor"""
  nodes: [CloudProvider!]

  """
  CloudProviders in the current page, together with their associated cursor
  """
  edges: [CloudProviderEdge!]
}

union CloudProviderDetails
  @join__type(graph: CLOUD_PROVIDERS)
  @join__unionMember(graph: CLOUD_PROVIDERS, member: "AWSProviderDetails")
  @join__unionMember(graph: CLOUD_PROVIDERS, member: "AzureProviderDetails")
  @join__unionMember(graph: CLOUD_PROVIDERS, member: "GCPProviderDetails")
 = AWSProviderDetails | AzureProviderDetails | GCPProviderDetails

"""CloudProvider together with its associated cursor"""
type CloudProviderEdge
  @join__type(graph: CLOUD_PROVIDERS)
{
  """The cloud provider"""
  node: CloudProvider!

  """The cursor for the cloud provider"""
  cursor: String!
}

input CloudProviderFilterInput
  @join__type(graph: CLOUD_PROVIDERS)
{
  status: CloudProviderStatus
  type: CloudProviderType
  name: String
}

type CloudProviderGCPConfiguration
  @join__type(graph: CLOUD_PROVIDERS)
{
  serviceAccountEmail: String!
  publicKey: String
  publicKeyNotAfter: String
  authorizationMethod: AuthorizationMethod!
  projectNumber: String
  workloadIdentityPoolId: String
  workloadIdentityPoolProviderId: String
  issuerUrl: String
}

input CloudProviderGCPConfigurationInput
  @join__type(graph: CLOUD_PROVIDERS)
{
  serviceAccountEmail: String!
  projectNumber: String
  workloadIdentityPoolId: String
  workloadIdentityPoolProviderId: String
  authorizationMethod: AuthorizationMethod
}

input CloudProviderGCPConfigurationUpdateInput
  @join__type(graph: CLOUD_PROVIDERS)
{
  projectNumber: String
  workloadIdentityPoolId: String
  workloadIdentityPoolProviderId: String
}

input CloudProviderInput
  @join__type(graph: CLOUD_PROVIDERS)
{
  """
  Cloud Provider name
  
  A string between 3 and 250 characters
  """
  name: String!
  type: CloudProviderType!
  awsConfiguration: CloudProviderAWSConfigurationInput
  azureConfiguration: CloudProviderAzureConfigurationInput
  gcpConfiguration: CloudProviderGCPConfigurationInput
  akamaiConfiguration: CloudProviderAkamaiConfigurationInput
  teamId: UUID!
  authorizedTeams: [UUID!]
}

"""
CloudKeystoreOrderField defines the fields that can be used for ordering
"""
enum CloudProviderOrderField
  @join__type(graph: CLOUD_PROVIDERS)
{
  """Order by ID"""
  ID @join__enumValue(graph: CLOUD_PROVIDERS)

  """Order by Name"""
  NAME @join__enumValue(graph: CLOUD_PROVIDERS)

  """Order by Cloud Provider Type"""
  TYPE @join__enumValue(graph: CLOUD_PROVIDERS)

  """Order by Validation Status"""
  STATUS @join__enumValue(graph: CLOUD_PROVIDERS)

  """Order by Owner Team ID"""
  TEAM_ID @join__enumValue(graph: CLOUD_PROVIDERS)

  """Order by Authorized Team IDs"""
  AUTHORIZED_TEAMS @join__enumValue(graph: CLOUD_PROVIDERS)

  """Order by Cloud Keystore Count"""
  CLOUD_KEYSTORE_COUNT @join__enumValue(graph: CLOUD_PROVIDERS)

  """Order by Created On date"""
  CREATED_ON @join__enumValue(graph: CLOUD_PROVIDERS)

  """Order by CreatedBy User ID"""
  CREATED_BY @join__enumValue(graph: CLOUD_PROVIDERS)

  """Order by Last Modified date"""
  LAST_MODIFIED_ON @join__enumValue(graph: CLOUD_PROVIDERS)

  """Order by Last Modified By User ID"""
  LAST_MODIFIED_BY @join__enumValue(graph: CLOUD_PROVIDERS)
}

"""
CloudProviderOrderInput contains the ordering information for a specific field
"""
input CloudProviderOrderInput
  @join__type(graph: CLOUD_PROVIDERS)
{
  field: CloudProviderOrderField!
  direction: OrderDirection!
}

"""Indicates the status of a cloud provider"""
enum CloudProviderStatus
  @join__type(graph: CLOUD_PROVIDERS)
{
  """The cloud provider is successfully validated"""
  VALIDATED @join__enumValue(graph: CLOUD_PROVIDERS)

  """
  The cloud provider is not validated or the validation fails for some reason
  """
  NOT_VALIDATED @join__enumValue(graph: CLOUD_PROVIDERS)
}

"""Indicates the type of a Cloud Provider"""
enum CloudProviderType
  @join__type(graph: CLOUD_PROVIDERS)
{
  """AWS cloud provider type"""
  AWS @join__enumValue(graph: CLOUD_PROVIDERS)

  """Azure cloud provider type"""
  AZURE @join__enumValue(graph: CLOUD_PROVIDERS)

  """Google cloud provider type"""
  GCP @join__enumValue(graph: CLOUD_PROVIDERS)

  """Akamai cloud provider type"""
  AKAMAI @join__enumValue(graph: CLOUD_PROVIDERS)
}

input CloudProviderUpdateInput
  @join__type(graph: CLOUD_PROVIDERS)
{
  type: CloudProviderType!
  id: UUID!

  """
  Cloud Provider name
  
  A string between 3 and 250 characters
  """
  name: String
  teamId: UUID
  authorizedTeams: [UUID!]
  awsConfiguration: CloudProviderAWSConfigurationUpdateInput
  azureConfiguration: CloudProviderAzureConfigurationUpdateInput
  gcpConfiguration: CloudProviderGCPConfigurationUpdateInput
  akamaiConfiguration: CloudProviderAkamaiConfigurationUpdateInput
}

type CloudProviderValidationResult
  @join__type(graph: CLOUD_PROVIDERS)
{
  result: CloudProviderStatus!
  details: String
}

type Cluster
  @join__type(graph: TLSPK)
{
  """ID is the identifier of the cluster in VaaS. It is immutable."""
  id: ID!

  """Name is the display name of the cluster."""
  name: String!

  """Description is the description text about the cluster."""
  description: String

  """
  UploaderID is the identifier used by the upload API to assign an upload to a cluster. It sent by agent in the payload.
  """
  uploaderID: ID!

  """LastCheckInTime is the last time the cluster connected with VaaS."""
  lastCheckInTime: String

  """RegisteredOnTime is when the cluster connected for the first time."""
  registeredOnTime: String

  """Status is the status of the cluster connection."""
  status: ClusterStatus!

  """AgentVersion is the version of the agent last time it contacted."""
  agentVersion: String!

  """
  ServiceAccountID is the client ID of the service account linked to the cluster
  """
  serviceAccountID: String

  """ServiceAccount is the service account linked to the cluster"""
  serviceAccount: ServiceAccount

  """
  Certificates is the connection to list of certificates per cluster that were sent to cert-inventory
  """
  certificates: CertificateConnection

  """
  UniqueCertificates is the total number of unique certificates currently in the cluster
  """
  uniqueCertificates: Int!
}

type ClusterCertificateBinding
  @join__type(graph: TLSPK)
{
  id: ID!
  resourceName: String!
  resourceType: String!
  namespace: String!
  policyViolation: [PolicyViolation!]!
  certificate: Certificate
  clusterSecret: ClusterSecret!
  cluster: Cluster!
  aggregatedKubernetesLabels(type: String): [AggregatedKubernetesTag]!
  aggregatedKubernetesAnnotations(type: String): [AggregatedKubernetesTag]!
}

type ClusterCertificateBindingConnection
  @join__type(graph: TLSPK)
{
  pageInfo: PageInfo!
  nodes: [ClusterCertificateBinding!]!
  edges: [ClusterCertificateBindingEdge!]!
  totalCount: Int!
}

type ClusterCertificateBindingEdge
  @join__type(graph: TLSPK)
{
  node: ClusterCertificateBinding!
  cursor: String!
}

union ClusterCertificateInstallation
  @join__type(graph: TLSPK)
  @join__unionMember(graph: TLSPK, member: "ClusterSecret")
 = ClusterSecret

type ClusterCertificateInstallationConnection
  @join__type(graph: TLSPK)
{
  pageInfo: PageInfo!
  nodes: [ClusterCertificateInstallation!]!
  edges: [ClusterCertificateInstallationEdge!]!
  totalCount: Int!
}

type ClusterCertificateInstallationEdge
  @join__type(graph: TLSPK)
{
  node: ClusterCertificateInstallation!
  cursor: String!
}

type ClusterComponent
  @join__type(graph: TLSPK)
{
  id: ID!
  name: String!
  namespace: String!
  image: String!
  version: String!
  kind: String!
  yaml: String!
  status: Status!
  replicas: ComponentReplicas!
}

type ClusterComponentConnection
  @join__type(graph: TLSPK)
{
  edges: [ClusterComponentEdge!]!
  nodes: [ClusterComponentNode!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ClusterComponentEdge
  @join__type(graph: TLSPK)
{
  node: ClusterComponent!
  cursor: String!
}

input ClusterComponentFilterInput
  @join__type(graph: TLSPK)
{
  clusterId: ID!
}

type ClusterComponentNode
  @join__type(graph: TLSPK)
{
  name: ComponentName!
  status: ResourceStatus!
  components: [ClusterComponent!]!
}

type ClusterConnection
  @join__type(graph: TLSPK)
{
  edges: [ClusterEdge!]!
  nodes: [Cluster!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ClusterEdge
  @join__type(graph: TLSPK)
{
  node: Cluster
  cursor: String!
}

input ClusterFilterInput
  @join__type(graph: TLSPK)
{
  filter: String
  filterOperator: LogicOperator
  id: ConditionInputForEnum
  name: ConditionInputForString
  status: ConditionInputForEnum
  issuerName: ConditionInputForString
  issuerNamespace: ConditionInputForString
  issuerScope: ConditionInputForResourceScopeEnum
  issuerStatus: ConditionInputForResourceStatusEnum
  issuerType: ConditionInputForIssuerTypeEnum
  issuerVenafiZone: ConditionInputForString
  attributesOperator: LogicOperator
}

input ClusterInput
  @join__type(graph: TLSPK)
{
  """ID is the identifier of the cluster in VaaS. It is immutable."""
  id: ID

  """Name is the display name for the cluster."""
  name: String

  """Description is the description text about the cluster."""
  description: String

  """ServiceAccountID is the client ID of the service account to link"""
  serviceAccountID: String
}

enum ClusterOrderDirection
  @join__type(graph: TLSPK)
{
  ASC @join__enumValue(graph: TLSPK)
  DESC @join__enumValue(graph: TLSPK)
}

enum ClusterOrderField
  @join__type(graph: TLSPK)
{
  name @join__enumValue(graph: TLSPK)
  status @join__enumValue(graph: TLSPK)
  lastCheckInTime @join__enumValue(graph: TLSPK)
  registeredOnTime @join__enumValue(graph: TLSPK)
}

input ClusterOrderInput
  @join__type(graph: TLSPK)
{
  field: ClusterOrderField
  direction: ClusterOrderDirection
}

type ClusterSecret
  @join__type(graph: TLSPK)
{
  id: ID!
  name: String!
  namespace: String!
  policyViolation: [PolicyViolation!]!
  certificate: Certificate
  lifecycle: Lifecycle
  clusterCertificateBindings: [ClusterCertificateBinding!]!
  cluster: Cluster!
  aggregatedKubernetesLabels(type: String): [AggregatedKubernetesTag]!
  aggregatedKubernetesAnnotations(type: String): [AggregatedKubernetesTag]!
}

type ClusterSecretConnection
  @join__type(graph: TLSPK)
{
  pageInfo: PageInfo!
  nodes: [ClusterSecret!]!
  edges: [ClusterSecretEdge!]!
  totalCount: Int!
}

type ClusterSecretEdge
  @join__type(graph: TLSPK)
{
  node: ClusterSecret!
  cursor: String!
}

enum ClusterStatus
  @join__type(graph: TLSPK)
{
  WAITING_FOR_FIRST_CONTACT @join__enumValue(graph: TLSPK)
  REGISTERED @join__enumValue(graph: TLSPK)
  ACTIVE @join__enumValue(graph: TLSPK)
  INACTIVE @join__enumValue(graph: TLSPK)
  DELETED @join__enumValue(graph: TLSPK)
}

"""Code Sign X.509 Certificate Values"""
type CodeSignCertificateValues
  @join__type(graph: CODESIGN)
{
  """
  A read-only idenfitier to access this X.509 certificate to perform
  cryptographic operations.
  """
  label: String!

  """
  A human readable message describing the status of the cryptographic object
  that has been created using this pattern, or null if there are no issues.
  """
  statusMessage: String

  """
  The issued `Certificate` object, or null if it has not yet been issued.
  """
  object: Certificate

  """
  When a `Certificate` is renewed the now historic `Certificate` may be placed
  in this list if it is still accessible.
  """
  historicObjects: [Certificate!]

  """The CSR that was used to generate the current `Certificate`."""
  certificateRequest: CertificateRequest

  """
  The X.509 Subject attribute value to use when issuing the certificate
  material.
  """
  subject: String

  """
  The X.509 SAN attribute values to use when issuing the certificate material.
  """
  subjectAlternativeNames: [GeneralName!]

  """The length of time the certificate should be valid for after issuance."""
  validity: Duration!

  """
  True if the private key should be reused when renewing. If false then the
  associated Key Pair will be rotated when the certificate is renewed.
  """
  reusePrivateKey: Boolean!

  """True if the chain should be provided to a client with this object"""
  provideChain: Boolean!
}

"""
Code Sign Configuration

A representation of all tenant level configuration options for Code Sign
Manager, SaaS.
"""
type CodeSignConfiguration
  @join__type(graph: CODESIGN)
{
  """The duration in seconds to wait before a signing request has timed out"""
  keyUseSecondsTimeout: Int!

  """
  If true then any user who is allowed to modify a `CodeSignSigningKey` may
  not act as an authorized signer on that same object, even if they are
  included in the `authorizedSigners` list.
  """
  preventSelfDealing: Boolean!

  """
  A set of IP addresses and IP address ranges from which API requests for
  cryptographic operations are permitted.
  """
  ipRestrictions: [String!]

  """
  The maximum number of key pairs and/or certificates to keep in the 
  `historicObjects` list on a `CodeSignSigningKey` after every rotation or
  renewal.
  """
  maxHistoricalObjects: Int!
}

"""
Code Sign Configuration Input

Any value omitted from this input will preserve the previously stored value.
"""
input CodeSignConfigurationInput
  @join__type(graph: CODESIGN)
{
  """The duration in seconds to wait before a signing request has timed out"""
  keyUseSecondsTimeout: Int

  """
  If true then any user who is allowed to modify a `CodeSignSigningKey` may
  not act as an authorized signer on that same object, even if they are
  included in the `authorizedSigners` list.
  """
  preventSelfDealing: Boolean

  """
  A set of IP addresses and IP address ranges from which API requests for
  cryptographic operations are permitted.
  """
  ipRestrictions: [String!]

  """
  The maximum number of key pairs and/or certificates to keep in the 
  `historicObjects` list on a `CodeSignSigningKey` after every rotation or
  renewal.
  """
  maxHistoricalObjects: Int
}

"""Code Sign Key Pair Statistics"""
type CodeSignKeyPairStatistics
  @join__type(graph: CODESIGN)
{
  """
  The total number of signing operations that have been performed using this
  Signing Key at any point since it was created.
  """
  totalSignings: Int

  """
  The total number of signing operations that have been performed using this
  Signing Key within the last 24 hours.
  """
  lastDaySignings: Int
}

"""Code Sign Key Pair Values"""
type CodeSignKeyPairValues
  @join__type(graph: CODESIGN)
{
  """
  A read-only idenfitier to access this key pair to perform cryptographic
  operations.
  """
  label: String!

  """
  A human readable message describing the status of the cryptographic object
  that has been created using this pattern, or null if there are no issues.
  """
  statusMessage: String

  """
  A reference to the resulting `KeyPair` cryptographic object, or null if it
  has not yet been minted.
  """
  object: KeyPair

  """
  When a `KeyPair` is rotated the now historic `KeyPair` may be placed in this
  list if it is still accessible.
  """
  historicObjects: [KeyPair!]

  """
  The `KeyStorageLocation` that should be used when minting the initial
  `KeyPair` or when performing key rotation.
  
  A key will not be minted until a valid location has been set.
  """
  location: KeyStorageLocation

  """The intended usage of the key"""
  keyUsage: KeyUsage

  """The desired key type, along with type specific parameters"""
  parameterSet: KeyParameterSet!

  """
  The time period after a key has been minted or rotated that it should be
  considered valid.
  """
  validity: Duration
}

"""
Signing Key

A `CodeSignSigningKey` represents a key pair, and a set of related cryptographic
objects, and related configuration.

This includes the set of values that should be applied the next time a key pair
is rotated, or a certificate is renewed along with the current values of each of
these objects.
"""
type CodeSignSigningKey
  @join__type(graph: CODESIGN)
{
  """A UUID representing this Signing Key."""
  id: UUID!

  """A unique name identifying this Signing Key."""
  name: String!

  """A human readable description of this Signing Key."""
  description: String

  """
  If set to false then this Signing Key may not be used for any cryptographic
  operations, and no cryptographic objects will be created for it.
  """
  enabled: Boolean!

  """
  The set of cryptographic objects and renewal values assosiated with this
  Signing Key.
  """
  objects: CodeSignSigningKeyObjects!

  """Usage statistics of operations performed on this Signing Key."""
  statistics: CodeSignKeyPairStatistics!

  """
  A set of IP addresses and IP address ranges from which API requests for
  cryptographic operations are permitted for this Signing Key.
  """
  ipRestrictions: [String!]

  """A list of users who are allowed to modify this Signing Key."""
  owners: [HumanIdentity!]!

  """
  A list of users and/or teams who are allowed to view this Signing Key, for
  auditing purposes.
  """
  auditors: [HumanIdentity!]

  """
  A list of users, teams, and/or service accounts that are allowed to perform
  cryptographic operations using this Signing Key.
  """
  authorizedSigners: [Identity!]

  """The user that last modified this Signing Key"""
  lastModifiedBy: User!

  """Timestamp when this Signing Key was created"""
  creationTime: DateTime!

  """Timestamp of the last modification"""
  lastModifiedTime: DateTime!

  """
  The effective permissions that the current user has to this Signing Key.
  """
  effectivePermissions: CodeSignSigningKeyPermissions!
}

type CodeSignSigningKeyConnection
  @join__type(graph: CODESIGN)
{
  pageInfo: PageInfo!
  totalCount: Int!
  nodes: [CodeSignSigningKey!]
  edges: [CodeSignSigningKeyEdge!]
}

type CodeSignSigningKeyEdge
  @join__type(graph: CODESIGN)
{
  node: CodeSignSigningKey!
  cursor: String!
}

"""
The values of a set of cryptographic objects, along with the
contained material, and its previous versions.
"""
type CodeSignSigningKeyObjects
  @join__type(graph: CODESIGN)
{
  """
  A key pair object including values for the next rotation, the active key
  pair, and a set of historical versions.
  """
  keyPair: CodeSignKeyPairValues!

  """
  A X.509 certificate object including values for the next renewal, the active
  certificate, and a set of historical versions.
  """
  certificate: CodeSignCertificateValues
}

"""Code Sign Signing Key Permissions"""
type CodeSignSigningKeyPermissions
  @join__type(graph: CODESIGN)
{
  """True if the user is permitted to modify this Signing Key."""
  modify: Boolean!

  """
  True if the user is permitted to perform cryptographic operations using this
  Signing Key.
  """
  use: Boolean!
}

"""
CompliancePoliciesSummary defines a summary view of widgets to provide more context for the collection of compliance policies
"""
type CompliancePoliciesSummary
  @join__type(graph: COMPLIANCE_POLICY)
{
  """
  CertificatePolicyFindings is used to provide information on how many certs have issues
  """
  certificatePolicyFindings: CertificateCompliancePolicyFindingsOverviewWidget
}

"""
CompliancePolicy refers to a policy set on resources in VCP to check certain rules
These consist of matching rules (which assets should be checked)
and evaluation rules (what attributes should be checked)
Based on the configured matching and evaluation rules, a certain amount of
findings can be generated which show a status for each evaluation rule
"""
type CompliancePolicy
  @join__type(graph: COMPLIANCE_POLICY)
{
  id: UUID!

  """Name for compliance policy"""
  name: String

  """Status of the compliance policy"""
  status: CompliancePolicyStatus

  """Description of the compliance policy"""
  description: String

  """
  Matching rules of the compliance policy, referring to Application and Tags
  """
  matchingRules: [CompliancePolicyMatchingRule!]

  """
  Evaluation rules of the compliance policy, attributes to check on certificates
  """
  evaluationRules: [CompliancePolicyEvaluationRule!]

  """Findings is a list of findings found per policy"""
  findings: CompliancePolicyFindingConnection

  """UpdatedOn shows the time the compliance policy was last updated"""
  updatedOn: String

  """Active states whether this policy is active for evaluation"""
  active: Boolean

  """
  RemediationText is text used to inform a user of what steps can be taken to fix issues
  """
  remediationText: String
}

"""
CompliancePolicyConnection is used to provide pagination to compliance policies
"""
type CompliancePolicyConnection
  @join__type(graph: COMPLIANCE_POLICY)
{
  """Edges of the compliance policy connection for linking"""
  edges: [CompliancePolicyEdge!]!

  """Nodes of the compliance policy connection for paginated results"""
  nodes: [CompliancePolicy!]!

  """PageInfo is information for pagination"""
  pageInfo: PageInfo!

  """TotalCount of compliance policies that match pagination criteria"""
  totalCount: Int!
}

"""
CompliancePolicyInput provides information on a compliance policy insert.
"""
input CompliancePolicyCreateInput
  @join__type(graph: COMPLIANCE_POLICY)
{
  """Name is the name to create for the compliance policy"""
  name: String

  """Description is the description to create for the compliance policy"""
  description: String

  """
  RemediationText is the input to provide feedback on how to resolve policy issues
  """
  remediationText: String

  """
  MatchingRules is the configured matching rules to attach to the compliance policy
  """
  matchingRules: CompliancePolicyMatchingRuleInput

  """
  EvaluationRules is the configured evaluation rules to attach to the compliance policy
  """
  evaluationRules: CompliancePolicyEvaluationRuleInput
}

"""CompliancePolicyEdge is used for the CompliancePolicyConnection"""
type CompliancePolicyEdge
  @join__type(graph: COMPLIANCE_POLICY)
{
  """Node of the compliance policy"""
  node: CompliancePolicy

  """Cursor is the link to the next edge"""
  cursor: String!
}

"""
CompliancePolicyEvaluationRule defines what is compared against in a resource to determine the evaluation status for a policy
"""
type CompliancePolicyEvaluationRule
  @join__type(graph: COMPLIANCE_POLICY)
{
  """Type is used to determine which type the evaluation rule is configured"""
  type: CompliancePolicyEvaluationRuleType

  """Severity shows the level of importance for the policy in its findings"""
  severity: CompliancePolicySeverity

  """
  EvaluationValue is used to display information about the configuration of the evaluation rule
  """
  evaluationValue: EvaluationRuleValueType
}

"""
CompliancePolicyEvaluationRuleInput provides details about an evaluation rule to be processed
"""
input CompliancePolicyEvaluationRuleInput
  @join__type(graph: COMPLIANCE_POLICY)
{
  """
  CertificateEvaluationValues stores a list of values related to the configuration
  """
  certificateEvaluationValues: CompliancePolicyEvaluationRuleRootInput
}

"""
CompliancePolicyEvaluationRuleRootInput provides the root level matching operators for evaluation rules
"""
input CompliancePolicyEvaluationRuleRootInput
  @join__type(graph: COMPLIANCE_POLICY)
{
  """And allows for chaining AND logic at the root level"""
  and: [CertificateEvaluationRuleAttributesInput!]

  """Or allows for chaining OR logic at the root level"""
  or: [CertificateEvaluationRuleAttributesInput!]
}

"""
CompliancePolicyEvaluationRuleType denotes what group of rules an evaluation rule is evaluating for a policy
"""
enum CompliancePolicyEvaluationRuleType
  @join__type(graph: COMPLIANCE_POLICY)
{
  """IssuingCA is for the group of rules related to issuing CAs"""
  ISSUING_CA @join__enumValue(graph: COMPLIANCE_POLICY)
}

"""
CompliancePolicyFieldStringFilter provides a list of options for fields in matching and evaluation rules
"""
input CompliancePolicyFieldStringFilter
  @join__type(graph: COMPLIANCE_POLICY)
{
  """Includes is used for checking if elements are in list"""
  includes: [String!]

  """Excludes is used for checking if elements are not in list"""
  excludes: [String!]

  """
  HasValue is used to include/exclude all of a resource (all applications, etc.)
  """
  hasValue: Boolean
}

"""
CompliancePolicyFinding denotes the result of an evaluation rule on a particular resource
"""
type CompliancePolicyFinding
  @join__type(graph: COMPLIANCE_POLICY)
{
  """
  Type is used to differentiate which type of finding resource is in the finding
  """
  type: CompliancePolicyResourceType

  """CompliancePolicy is the policy that evaluated and created this finding"""
  compliancePolicy: CompliancePolicy

  """Status is used to show the status of the finding"""
  status: CompliancePolicyFindingStatus

  """Severity shows the level of importance for the policy for this finding"""
  severity: CompliancePolicySeverity

  """FindingResource is the parent resource that this finding came from"""
  findingResource: FindingResource
}

"""
CompliancePolicyConnection is used to provide pagination to compliance policy findings
"""
type CompliancePolicyFindingConnection
  @join__type(graph: COMPLIANCE_POLICY)
{
  """Edges of the compliance policy finding connection for linking"""
  edges: [CompliancePolicyFindingEdge!]!

  """
  Nodes of the compliance policy finding connection for paginated results
  """
  nodes: [CompliancePolicyFinding!]!

  """PageInfo is information for pagination"""
  pageInfo: PageInfo!

  """
  TotalCount of compliance policy findings that match pagination criteria
  """
  totalCount: Int!
}

"""
CompliancePolicyFindingEdge is used for CompliancePolicyFindingConnection
"""
type CompliancePolicyFindingEdge
  @join__type(graph: COMPLIANCE_POLICY)
{
  """Node of the compliance policy finding"""
  node: CompliancePolicyFinding

  """Cursor is the link to the next edge"""
  cursor: String!
}

"""
CompliancePolicyFindingResource is the resource generated for a finding and is used to store the CompliancePolicyFinding
"""
type CompliancePolicyFindingResource
  @join__type(graph: COMPLIANCE_POLICY)
{
  """ID is the ID of the compliance policy finding evaluation"""
  id: UUID!

  """
  EvaluationRuleID is the ID of the evaluation rule that the compliance policy finding evaluation is associated with
  """
  evaluationRuleId: UUID!

  """
  ResourceType is the type of resource that the compliance policy finding evaluation is associated with
  """
  resourceType: String!

  """
  ResourceId is the ID of the resource that the compliance policy finding evaluation is associated with
  """
  resourceId: String!

  """Status is the status of the compliance policy finding evaluation"""
  status: CompliancePolicyFindingStatus

  """
  CreatedAt is the time the compliance policy finding evaluation was created
  """
  createdAt: String
}

"""CompliancePolicyFindingStatus denotes the status of the policy finding"""
enum CompliancePolicyFindingStatus
  @join__type(graph: COMPLIANCE_POLICY)
{
  """Passed states that the finding passed evaluation"""
  PASSED @join__enumValue(graph: COMPLIANCE_POLICY)

  """Failed states that the finding failed evaluation"""
  FAILED @join__enumValue(graph: COMPLIANCE_POLICY)
}

"""
CompliancePolicyMatchingRule defines a matching set of resources that should be used in evaluation for a particular policy
"""
type CompliancePolicyMatchingRule
  @join__type(graph: COMPLIANCE_POLICY)
{
  """Type is used to differentiate which type of matching rule is stored"""
  type: CompliancePolicyResourceType

  """AllApplications is the flag to determine if all applications are set"""
  allApplications: Boolean

  """
  Applications is the list of all applications that have been set for this matching rule
  """
  applications: [ApplicationMatchingRule!]

  """AllTags is the flag to determine if all tags are set"""
  allTags: Boolean

  """Tags is the list of all tags that have been set for this matching rule"""
  tags: [TagMatchingRule!]
}

"""
CompliancePolicyMatchingRuleInput provides details about a matching rule to be processed
"""
input CompliancePolicyMatchingRuleInput
  @join__type(graph: COMPLIANCE_POLICY)
{
  """
  CertificateMatchingValues stores a list of values related to the configuration
  """
  certificateMatchingValues: CompliancePolicyMatchingRuleRootInput
}

"""
CompliancePolicyMatchingRuleRootInput provides the root level matching operators for matching rules
"""
input CompliancePolicyMatchingRuleRootInput
  @join__type(graph: COMPLIANCE_POLICY)
{
  """And allows for chaining AND logic at the root level"""
  and: [CertificateMatchingRuleAttributesInput!]

  """Or allows for chaining OR logic at the root level"""
  or: [CertificateMatchingRuleAttributesInput!]
}

"""CompliancePolicyOrderDirection denotes the different ordering types"""
enum CompliancePolicyOrderDirection
  @join__type(graph: COMPLIANCE_POLICY)
{
  """Asc means ascending order"""
  ASC @join__enumValue(graph: COMPLIANCE_POLICY)

  """Desc means descending order"""
  DESC @join__enumValue(graph: COMPLIANCE_POLICY)
}

"""CompliancePolicyOrderField is the type of fields that can be ordered"""
enum CompliancePolicyOrderField
  @join__type(graph: COMPLIANCE_POLICY)
{
  """Name refers to the policy name that can be sorted"""
  NAME @join__enumValue(graph: COMPLIANCE_POLICY)
}

"""CompliancePolicyOrderInput is used to set an order direction per field"""
input CompliancePolicyOrderInput
  @join__type(graph: COMPLIANCE_POLICY)
{
  """Field determines which field is sorted"""
  field: CompliancePolicyOrderField

  """Direction determines if ascending or descending direction"""
  direction: CompliancePolicyOrderDirection
}

"""
CompliancePolicyResourceType denotes which resource type the matching rule will target
"""
enum CompliancePolicyResourceType
  @join__type(graph: COMPLIANCE_POLICY)
{
  """
  Certificate is used to show the matching is evaluating certificate resources
  """
  CERTIFICATE @join__enumValue(graph: COMPLIANCE_POLICY)

  """Ingress is used to show the matching is evaluating ingress resources"""
  INGRESS @join__enumValue(graph: COMPLIANCE_POLICY)
}

"""
CompliancePolicySearchAttributesInput provides information on which filter attributes are used for filtering
"""
input CompliancePolicySearchAttributesInput
  @join__type(graph: COMPLIANCE_POLICY)
{
  """Name allows to search by name"""
  name: CompliancePolicyStringFilter

  """And allows for chaining AND logic"""
  and: [CompliancePolicySearchAttributesInput!]

  """Or allows for chaining OR logic"""
  or: [CompliancePolicySearchAttributesInput!]
}

"""
CompliancePolicySearchFilterInput provides information on how filtering should be performed
"""
input CompliancePolicySearchFilterInput
  @join__type(graph: COMPLIANCE_POLICY)
{
  """QuickFilter is the string filter to be applied"""
  quickFilter: String

  """And allows for chaining AND logic"""
  and: [CompliancePolicySearchAttributesInput!]

  """Or allows for chaining OR logic"""
  or: [CompliancePolicySearchAttributesInput!]
}

"""
CompliancePolicySeverity denotes how severe the finding is in its evaluation result for a policy
"""
enum CompliancePolicySeverity
  @join__type(graph: COMPLIANCE_POLICY)
{
  """Critical determines critical severity"""
  CRITICAL @join__enumValue(graph: COMPLIANCE_POLICY)

  """High determines high severity"""
  HIGH @join__enumValue(graph: COMPLIANCE_POLICY)

  """Medium determines medium severity"""
  MEDIUM @join__enumValue(graph: COMPLIANCE_POLICY)

  """Low determines low severity"""
  LOW @join__enumValue(graph: COMPLIANCE_POLICY)

  """Info determines info severity"""
  INFO @join__enumValue(graph: COMPLIANCE_POLICY)
}

"""
CompliancePolicyStatus denotes the status for a compliance policy in terms of activity
"""
enum CompliancePolicyStatus
  @join__type(graph: COMPLIANCE_POLICY)
{
  """Created refers to a policy that has been created but not activated"""
  CREATED @join__enumValue(graph: COMPLIANCE_POLICY)

  """
  Running refers to a policy when it is currently evaluating (will switch to ACTIVE or INACTIVE)
  """
  RUNNING @join__enumValue(graph: COMPLIANCE_POLICY)

  """
  Active refers to a policy that has finished running and is actively listening to resources for evaluation
  """
  ACTIVE @join__enumValue(graph: COMPLIANCE_POLICY)

  """
  Inactive refers to a policy that has finished running and is set to an inactive status to not actively listen to resources for evaluation
  """
  INACTIVE @join__enumValue(graph: COMPLIANCE_POLICY)

  """Error refers to a policy that has run into an error during evaluation"""
  ERROR @join__enumValue(graph: COMPLIANCE_POLICY)
}

"""
CompliancePolicyStringFilter provides a list of options for string filters on how to compare against a field
"""
input CompliancePolicyStringFilter
  @join__type(graph: COMPLIANCE_POLICY)
{
  """Eq is used for checking field equals this string"""
  eq: String

  """Neq is used for checking field not equals this string"""
  neq: String

  """Contains is used for checking field contains this string"""
  contains: String

  """In is used for checking if elements are in list"""
  in: [String!]

  """HasValue is used for checking if field has a value"""
  hasValue: Boolean
}

"""
CompliancePolicyInput provides information on a compliance policy update.
"""
input CompliancePolicyUpdateInput
  @join__type(graph: COMPLIANCE_POLICY)
{
  """ID refers to the ID of a compliance policy for updates"""
  id: UUID

  """Name is the name to update for the compliance policy"""
  name: String

  """Description is the description to update for the compliance policy"""
  description: String

  """
  RemediationText is the input to provide feedback on how to resolve policy issues
  """
  remediationText: String

  """
  MatchingRules is the configured matching rules to attach to the compliance policy
  """
  matchingRules: CompliancePolicyMatchingRuleInput

  """
  EvaluationRules is the configured evaluation rules to attach to the compliance policy
  """
  evaluationRules: CompliancePolicyEvaluationRuleInput
}

enum ComponentName
  @join__type(graph: TLSPK)
{
  CERT_MANAGER @join__enumValue(graph: TLSPK)
  CERT_MANAGER_WEBHOOK @join__enumValue(graph: TLSPK)
  CERT_MANAGER_CAINJECTOR @join__enumValue(graph: TLSPK)
  DISCOVERY_AGENT @join__enumValue(graph: TLSPK)
  ENTERPRISE_ISSUER @join__enumValue(graph: TLSPK)
  ENTERPRISE_APPROVER_POLICY @join__enumValue(graph: TLSPK)
  FIREFLY @join__enumValue(graph: TLSPK)
  ISTIO_CSR @join__enumValue(graph: TLSPK)
  OPENSHIFT_OPERATOR @join__enumValue(graph: TLSPK)
  OPENSHIFT_ROUTES @join__enumValue(graph: TLSPK)
}

type ComponentReplicas
  @join__type(graph: TLSPK)
{
  ready: Int!
  updated: Int!
  available: Int!
  unavailable: Int!
  total: Int!
}

input ConditionInputForEnum
  @join__type(graph: TLSPK)
{
  operator: AttributeEnumOperator
  value: String
}

input ConditionInputForIssuerTypeEnum
  @join__type(graph: TLSPK)
{
  operator: AttributeEnumInOperator!
  value: [IssuerType!]
}

input ConditionInputForResourceScopeEnum
  @join__type(graph: TLSPK)
{
  operator: AttributeEnumOperator!
  value: ResourceScope!
}

input ConditionInputForResourceStatusEnum
  @join__type(graph: TLSPK)
{
  operator: AttributeEnumOperator!
  value: ResourceStatus!
}

input ConditionInputForString
  @join__type(graph: TLSPK)
{
  operator: AttributeStringOperator
  value: String
}

"""Represents the configuration details of a machine installation."""
type Configuration
  @join__type(graph: PLUGIN_SERVICE)
{
  """Configuration details related to the keystore."""
  keystore: ConfigurationItem

  """Configuration details related to the binding."""
  binding: ConfigurationItem
}

"""Represents a field in the configuration details."""
type ConfigurationField
  @join__type(graph: PLUGIN_SERVICE)
{
  """The name of the field."""
  field: String!

  """The translated description of the field extracted from the manifest."""
  description: String!

  """The value of the field."""
  value: String!

  """The rank value indicating order."""
  rank: Float
}

"""Represents an item in the configuration details."""
type ConfigurationItem
  @join__type(graph: PLUGIN_SERVICE)
{
  """Description of the configuration details item."""
  description: String!

  """The data associated with the configuration details item."""
  data: [ConfigurationField]
}

"""
Code Sign X.509 Certificate Values Input

This object is used to specify the options and parameters that should be used
when issuing a `Certificate` object for this `CodeSignSigningKey`.

Certificate issuance requires a `KeyPair` and will use the object resulting from
the `CodeSignKeyPairValues` object on the same `CodeSignSigningKey`.
"""
input CreateCodeSignCertificateValuesInput
  @join__type(graph: CODESIGN)
{
  """
  The ID of the `IssuingTemplate` to be used to create the
  `CertificateRequest` used when issuing the `Certificate`
  """
  issuingTemplate: ID!

  """
  The X.509 Subject attribute value to use when issuing the certificate
  material.
  """
  subject: String!

  """
  The X.509 SAN attribute values to use when issuing the certificate material.
  """
  subjectAlternativeNames: [String!]

  """The length of time the certificate should be valid for after issuance."""
  validity: Duration!

  """
  True if the private key should be reused when renewing. If false then the
  associated Key Pair will be rotated when the certificate is renewed.
  """
  reusePrivateKey: Boolean

  """True if the chain should be provided to a client with this object"""
  provideChain: Boolean
}

"""
Code Sign Key Pair Values Input

This object is used to specify the options and parameters that should be used
when minting (or rotating) a `KeyPair` object for this `CodeSignSigningKey`.
"""
input CreateCodeSignKeyPairValuesInput
  @join__type(graph: CODESIGN)
{
  """
  The ID of the `KeyStorageLocation` that should be used when minting or
  rotating the `KeyPair`.
  """
  location: ID!

  """
  The intended usage of the key. It will default to 'signing' usage if
  omitted.
  """
  keyUsage: KeyUsageInput

  """The desired key type, along with type specific parameters."""
  parameterSet: KeyParameterSet!

  """
  The time period after a key has been issued that it is considered valid. A
  duration with a value of zero (ie `P0D`) may be used to indicate that the
  key pair should never expire.
  
  Attempting to perform a cryptographic operation using a Signing Key who's
  Key Pair is no longer within the configured validity period will
  automatically be rotated.
  """
  validity: Duration
}

input CreateCodeSignSigningKeyInput
  @join__type(graph: CODESIGN)
{
  """
  A unique name identifying this `CodeSignSigningKey` of no more than 255
  characters.
  """
  name: String!

  """
  A human readable description of this `CodeSignSigningKey` of no more than
  500 characters.
  """
  description: String

  """The renewal values to use for getting a set of cryptographic objects."""
  objects: CreateCodeSignSigningKeyObjectsInput!

  """
  A set of IP addresses and IP address ranges from which API requests for
  cryptographic operations are permitted for this `CodeSignSigningKey`.
  """
  ipRestrictions: [String!]

  """
  A list of PKI or System Administrator accounts who are allowed to modify
  this `CodeSignSigningKey`.
  
  Note: teams and service-accounts are not allowed.
  """
  owners: [UserOrTeamInput!]!

  """
  A list of users and/or teams who are allowed to view this
  `CodeSignSigningKey`, for auditing purposes.
  """
  auditors: [UserOrTeamInput!]

  """
  A list of users, teams, and/or service accounts that are allowed to perform
  cryptographic operations using this `CodeSignSigningKey`.
  
  Note: administrators are not allowed as key-users.
  """
  authorizedSigners: [IdentityInput!]

  """
  Whether or not to mint key pairs and/or initiate certificate issuance upon
  successfull creation of this `CodeSignSigningKey`.
  
  If `true`, key pairs will be minted and certificate issuance will be
  initiated upon successful object creation.
  
  If `false` no cryptographic object will be minted/issued, and you will be
  able to do that manually in the future, using the
  `renewCodeSignObjects` mutation.
  """
  triggerCryptoObjectCreation: Boolean!
}

"""The set of values to use for the contained cryptographic objects."""
input CreateCodeSignSigningKeyObjectsInput
  @join__type(graph: CODESIGN)
{
  """The values to use for the key pair"""
  keyPair: CreateCodeSignKeyPairValuesInput!

  """The values to use for the X.509 certificate"""
  certificate: CreateCodeSignCertificateValuesInput
}

type CreateCodeSignSigningKeyPayload
  @join__type(graph: CODESIGN)
{
  signingKey: CodeSignSigningKey
}

"""
CreateExternalEmailRecipientInput represents the input for creating an external email recipient.
Name is limited to 256 characters.
Address cannot exceed 254 characters and should be a proper email address.
External email recipient will receive a welcome email.
"""
input CreateExternalEmailRecipientInput
  @join__type(graph: MESSAGING)
{
  name: String!
  address: String!
}

"""Represents the input for creating a PagerDuty integration."""
input CreatePagerDutyIntegrationInput
  @join__type(graph: MESSAGING)
{
  name: String!
  pagerDutyParams: PagerDutyIntegrationInputParams
}

"""ReportDefinition creation request input."""
input CreateReportDefinitionInput
  @join__type(graph: CUSTOM_REPORTING)
{
  """The report name."""
  name: String!

  """The report description."""
  description: String

  """
  The query to be run for generating the report. Currently being ignored for update requests.
  """
  query: String!

  """The schedule for the report"""
  schedule: ReportScheduleInput

  """The email destination for the report"""
  emailDestinationInput: NotificationEmailDestinationInput
}

"""Represents the input for creating a Zoom Team Chat integration."""
input CreateZoomTeamChatIntegrationInput
  @join__type(graph: MESSAGING)
{
  name: String!
  zoomTeamChatParams: ZoomTeamChatIntegrationInputParams
}

"""Schedule pattern based on cron expression"""
type CronPattern
  @join__type(graph: INTEGRATIONS)
{
  """Type of recurrence pattern - will be CRON"""
  recurrenceType: SchedulerPatternRecurrenceType!

  """Cron expression in standard format"""
  cronExpression: String!
}

type CustomReportObject
  @join__type(graph: CUSTOM_REPORTING_EXEC)
{
  """The key."""
  key: String!

  """The value."""
  value: String!
}

"""customReportObjects request input."""
input CustomReportObjectsInput
  @join__type(graph: CUSTOM_REPORTING_EXEC)
{
  """The data source."""
  type: String!
}

type DailyReportSchedule
  @join__type(graph: CUSTOM_REPORTING)
{
  hour: Int!
  minute: Int!
}

input DailyReportScheduleInput
  @join__type(graph: CUSTOM_REPORTING)
{
  hour: Int!
  minute: Int!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, is compliant with the date-time format outlined in section 5.6
of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime
  @join__type(graph: CAOPERATIONS)
  @join__type(graph: CERTIFICATE)
  @join__type(graph: CERTIFICATE_INVENTORY)
  @join__type(graph: CLOUD_PROVIDERS)
  @join__type(graph: CODESIGN)
  @join__type(graph: CUSTOM_REPORTING)
  @join__type(graph: ENTITLEMENTS)
  @join__type(graph: INTEGRATIONS)
  @join__type(graph: KEY_INVENTORY)
  @join__type(graph: LEGACY)
  @join__type(graph: NOTIFICATION_ROUTER)
  @join__type(graph: OUTAGEDETECTION)
  @join__type(graph: SEARCH)
  @join__type(graph: USAGEMETRIC)

enum DayOfMonth
  @join__type(graph: INTEGRATIONS)
{
  D1 @join__enumValue(graph: INTEGRATIONS)
  D2 @join__enumValue(graph: INTEGRATIONS)
  D3 @join__enumValue(graph: INTEGRATIONS)
  D4 @join__enumValue(graph: INTEGRATIONS)
  D5 @join__enumValue(graph: INTEGRATIONS)
  D6 @join__enumValue(graph: INTEGRATIONS)
  D7 @join__enumValue(graph: INTEGRATIONS)
  D8 @join__enumValue(graph: INTEGRATIONS)
  D9 @join__enumValue(graph: INTEGRATIONS)
  D10 @join__enumValue(graph: INTEGRATIONS)
  D11 @join__enumValue(graph: INTEGRATIONS)
  D12 @join__enumValue(graph: INTEGRATIONS)
  D13 @join__enumValue(graph: INTEGRATIONS)
  D14 @join__enumValue(graph: INTEGRATIONS)
  D15 @join__enumValue(graph: INTEGRATIONS)
  D16 @join__enumValue(graph: INTEGRATIONS)
  D17 @join__enumValue(graph: INTEGRATIONS)
  D18 @join__enumValue(graph: INTEGRATIONS)
  D19 @join__enumValue(graph: INTEGRATIONS)
  D20 @join__enumValue(graph: INTEGRATIONS)
  D21 @join__enumValue(graph: INTEGRATIONS)
  D22 @join__enumValue(graph: INTEGRATIONS)
  D23 @join__enumValue(graph: INTEGRATIONS)
  D24 @join__enumValue(graph: INTEGRATIONS)
  D25 @join__enumValue(graph: INTEGRATIONS)
  D26 @join__enumValue(graph: INTEGRATIONS)
  D27 @join__enumValue(graph: INTEGRATIONS)
  D28 @join__enumValue(graph: INTEGRATIONS)
  D29 @join__enumValue(graph: INTEGRATIONS)
  D30 @join__enumValue(graph: INTEGRATIONS)
  D31 @join__enumValue(graph: INTEGRATIONS)
  L @join__enumValue(graph: INTEGRATIONS)
  LW @join__enumValue(graph: INTEGRATIONS)
}

"""Days of week"""
enum DayOfWeek
  @join__type(graph: CUSTOM_REPORTING)
  @join__type(graph: INTEGRATIONS)
{
  MONDAY @join__enumValue(graph: CUSTOM_REPORTING) @join__enumValue(graph: INTEGRATIONS)
  TUESDAY @join__enumValue(graph: CUSTOM_REPORTING) @join__enumValue(graph: INTEGRATIONS)
  WEDNESDAY @join__enumValue(graph: CUSTOM_REPORTING) @join__enumValue(graph: INTEGRATIONS)
  THURSDAY @join__enumValue(graph: CUSTOM_REPORTING) @join__enumValue(graph: INTEGRATIONS)
  FRIDAY @join__enumValue(graph: CUSTOM_REPORTING) @join__enumValue(graph: INTEGRATIONS)
  SATURDAY @join__enumValue(graph: CUSTOM_REPORTING) @join__enumValue(graph: INTEGRATIONS)
  SUNDAY @join__enumValue(graph: CUSTOM_REPORTING) @join__enumValue(graph: INTEGRATIONS)
}

"""
DeleteCertificateInput defines the input required for deleting a retired certificates
"""
input DeleteCertificateInput
  @join__type(graph: CERTIFICATE_INVENTORY)
{
  """The fingerprint for the certificate to delete"""
  fingerprint: ID!
}

"""
DeleteCertificatePayload holds the result of deleting a retired certificate
"""
type DeleteCertificatePayload
  @join__type(graph: CERTIFICATE_INVENTORY)
{
  """The fingerprint for the certificate that was deleted"""
  fingerprint: ID!
}

"""
DeleteCertificatesInput defines the input required for deleting one or more retired certificates
"""
input DeleteCertificatesInput
  @join__type(graph: CERTIFICATE_INVENTORY)
{
  """List of certificates to delete"""
  certificates: [DeleteCertificateInput!]!
}

input DeleteCodeSignSigningKeyInput
  @join__type(graph: CODESIGN)
{
  ids: [ID!]!
}

type DeleteCodeSignSigningKeyPayload
  @join__type(graph: CODESIGN)
{
  ids: [ID!]!
}

"""
DeleteExternalEmailRecipientPayload represents the payload for deleting external email recipients.
"""
type DeleteExternalEmailRecipientPayload
  @join__type(graph: MESSAGING)
{
  addresses: [String!]
}

"""Represents the payload for deleting an integration."""
type DeleteIntegrationPayload
  @join__type(graph: MESSAGING)
{
  ids: [UUID!]
}

"""The result of bulk delete containing the successfully deleted IDs"""
type DeleteNotificationRoutingPayload
  @join__type(graph: NOTIFICATION_ROUTER)
{
  ids: [UUID!]!
}

"""Identifies the deployment status of a tls server endpoint"""
enum DeploymentStatus
  @join__type(graph: OUTAGEDETECTION)
  @join__type(graph: SEARCH)
{
  IN_USE @join__enumValue(graph: OUTAGEDETECTION) @join__enumValue(graph: SEARCH)
  SUPERSEDED @join__enumValue(graph: OUTAGEDETECTION) @join__enumValue(graph: SEARCH)
  UNKNOWN @join__enumValue(graph: OUTAGEDETECTION) @join__enumValue(graph: SEARCH)
}

input DeploymentStatusFilter
  @join__type(graph: SEARCH)
{
  """The deployment status value we want to match"""
  eq: DeploymentStatus

  """The deployment status value we don't want to match"""
  neq: DeploymentStatus

  """
  The list of deployment statuses that we want to assert whether the string value is included in the provided list
  """
  in: [DeploymentStatus!]

  """
  The boolean value that we want to assert whether the field is null or not
  """
  hasValue: Boolean
}

type DirectoryName
  @join__type(graph: CERTIFICATE_INVENTORY)
  @join__type(graph: CODESIGN)
{
  """Can contain in LDAP format, standard and non-standard ones"""
  dn: String!

  """The commonName (CN) elements of the Distinguished Name (OID: 2.5.4.3)."""
  cn: String @deprecated(reason: "Deprecated, use `commonName` instead")

  """The commonName (CN) elements of the Distinguished Name (OID: 2.5.4.3)."""
  commonName: [String!]

  """The countryName (C) elements of the Distinguished Name (OID: 2.5.4.6)."""
  c: [String!]

  """
  The domainComponent (DC) elements of the Distinguished Name (OID: 0.9.2342.19200300.100.1.25).
  """
  dc: String

  """
  The organizationName (O) elements of the Distinguished Name (OID: 2.5.4.10).
  """
  o: [String!]
  l: [String!]

  """
  The organizationalUnit (OU) elements of the Distinguished Name (OID: 2.5.4.11).
  """
  ou: [String!]

  """
  The stateOrProvinceName (ST) elements of the Distinguished Name (OID: 2.5.4.8).
  """
  st: [String!]

  """The postalCode elements of the Distinguished Name (OID: 2.5.4.17)."""
  postalCode: [String!]

  """
  The streetAddress (STREET) elements of the Distinguished Name (OID: 2.5.4.9).
  """
  streetAddress: [String!]
}

type DNSName
  @join__type(graph: CERTIFICATE_INVENTORY)
  @join__type(graph: CODESIGN)
{
  dnsName: String!
}

"""DSA public key information"""
type DSAKeyInfo
  @join__type(graph: CERTIFICATE_INVENTORY)
{
  """Bit length of parameter p"""
  l: Int!

  """Bit length of parameter q"""
  n: Int!
}

"""
ISO 8601 Duration

This type is used to represent a period of time as a string, such as "P1Y" to
represent a period of 1 year, "PT1M" to represent 1 minute, or "P1DT12H" to
represent 1 day and 12 hours.
"""
scalar Duration
  @join__type(graph: CODESIGN)

"""Elliptic curve public key information"""
type ECKeyInfo
  @join__type(graph: CERTIFICATE_INVENTORY)
{
  curve: KeyCurve!
}

type EdiPartyName
  @join__type(graph: CERTIFICATE_INVENTORY)
  @join__type(graph: CODESIGN)
{
  nameAssigner: String
  partyName: String
}

input EnableCodeSignSigningKeyInput
  @join__type(graph: CODESIGN)
{
  ids: [ID!]!
  enabled: Boolean!
}

type EnableCodeSignSigningKeyPayload
  @join__type(graph: CODESIGN)
{
  signingKeys: [CodeSignSigningKey!]
}

"""Represents an entitlement including features and packages."""
type Entitlement
  @join__type(graph: ENTITLEMENTS)
  @join__type(graph: USAGEMETRIC, key: "tenantId")
{
  tenantId: UUID! @inaccessible
  features: [Feature!]! @join__field(graph: ENTITLEMENTS)
  packages: [Package!]! @join__field(graph: ENTITLEMENTS)
  allFeatures: [Feature!]! @join__field(graph: ENTITLEMENTS)
  billingMetrics: [BillingMetric!] @join__field(graph: ENTITLEMENTS)
  plan: Plan @join__field(graph: ENTITLEMENTS)
  usageMetrics: UsageMetrics @join__field(graph: USAGEMETRIC)
}

type ErrorInformation
  @join__type(graph: CAOPERATIONS)
{
  message: String!
  arguments: [String!]
  code: Int
}

"""
EvaluationIssuingCAs provides a configuration on which CAs of a certificate are evaluated against and how they should be treated
"""
type EvaluationIssuingCAs
  @join__type(graph: COMPLIANCE_POLICY)
{
  """Approved stores a list of IDs approved for evaluation"""
  trustedCAs: [TrustedCAEvaluationRule!]
}

"""
EvaluationRuleValueType is a collection of types that will provide a structure for evaluation rule particulars
"""
union EvaluationRuleValueType
  @join__type(graph: COMPLIANCE_POLICY)
  @join__unionMember(graph: COMPLIANCE_POLICY, member: "EvaluationIssuingCAs")
 = EvaluationIssuingCAs

enum ExtendedKeyUsages
  @join__type(graph: SEARCH)
{
  SERVER_AUTH @join__enumValue(graph: SEARCH)
  CLIENT_AUTH @join__enumValue(graph: SEARCH)
  CODE_SIGNING @join__enumValue(graph: SEARCH)
  EMAIL_PROTECTION @join__enumValue(graph: SEARCH)
  TIME_STAMPING @join__enumValue(graph: SEARCH)
  OCSP_SIGNING @join__enumValue(graph: SEARCH)
  IPSEC_IKE @join__enumValue(graph: SEARCH)
  IPSEC_IKE_INTERMEDIATE @join__enumValue(graph: SEARCH)
}

input ExtendedKeyUsagesFilter
  @join__type(graph: SEARCH)
{
  """The string value we want to match"""
  eq: ExtendedKeyUsages

  """
  The list of strings that we want to assert whether the string value is included in the provided list
  """
  in: [ExtendedKeyUsages!]
}

"""Represents an external email recipient."""
type ExternalEmailRecipient
  @join__type(graph: MESSAGING)
{
  name: String!
  address: String!
  enabled: Boolean!
  createdAt: String!
  createdBy: UUID!
  createdByType: String!
  updatedAt: String
  updatedBy: UUID
  updatedByType: String
}

"""
ExternalEmailRecipientConnection represents a connection of ExternalEmailRecipient nodes with pagination.
"""
type ExternalEmailRecipientConnection
  @join__type(graph: MESSAGING)
{
  pageInfo: PageInfo!
  totalCount: Int!
  nodes: [ExternalEmailRecipient!]
  edges: [ExternalEmailRecipientEdge!]
}

"""
ExternalEmailRecipientEdge represents an edge in the ExternalEmailRecipientConnection.
"""
type ExternalEmailRecipientEdge
  @join__type(graph: MESSAGING)
{
  node: ExternalEmailRecipient!
  cursor: String!
}

"""
ExternalEmailRecipientFilterInput represents the input for filtering external email recipients.
Name is limited to 256 characters.
"""
input ExternalEmailRecipientFilterInput
  @join__type(graph: MESSAGING)
{
  name: String
  enabled: Boolean
}

"""
ExternalEmailRecipientOrderBy represents an external email recipient order by to use.
"""
enum ExternalEmailRecipientOrderBy
  @join__type(graph: MESSAGING)
{
  name @join__enumValue(graph: MESSAGING)
  address @join__enumValue(graph: MESSAGING)
}

"""Represents an individual feature."""
type Feature
  @join__type(graph: ENTITLEMENTS)
{
  id: String!
  name: String!
  description: String!
}

"""
FindingResource refers to what resource was evaluated against to produce the finding
"""
union FindingResource
  @join__type(graph: COMPLIANCE_POLICY)
  @join__unionMember(graph: COMPLIANCE_POLICY, member: "Certificate")
 = Certificate

"""
A fully qualified domain name as specified in section 2.3.1 of the RFC 1035
"""
scalar FQDN
  @join__type(graph: OUTAGEDETECTION)

"""
Indicates the Scope for a certificate provisioned to GCP Certificate Manager
"""
enum GCMCertificateScope
  @join__type(graph: CLOUD_PROVIDERS)
{
  """
  Certificates with default scope are served from core Google data centers. If unsure, choose this option.
  """
  DEFAULT @join__enumValue(graph: CLOUD_PROVIDERS)

  """
  Certificates with scope EDGE_CACHE are special-purposed certificates, served from Edge Points of Presence.
  See https://cloud.google.com/vpc/docs/edge-locations.
  """
  EDGE_CACHE @join__enumValue(graph: CLOUD_PROVIDERS)

  """
  Certificates with ALL_REGIONS scope are served from all Google Cloud
  regions. See https://cloud.google.com/compute/docs/regions-zones.
  """
  ALL_REGIONS @join__enumValue(graph: CLOUD_PROVIDERS)
}

type GCPCertificateMetadata
  @join__type(graph: CLOUD_PROVIDERS)
{
  gcpId: String!
  name: String!
}

type GCPLocation
  @join__type(graph: CLOUD_PROVIDERS)
{
  name: String!
}

type GCPProjectDetails
  @join__type(graph: CLOUD_PROVIDERS)
{
  id: String!
  name: String!
}

type GCPProviderDetails
  @join__type(graph: CLOUD_PROVIDERS)
{
  cloudProvider: CloudProvider!
  projects: [GCPProjectDetails]
}

union GeneralName
  @join__type(graph: CERTIFICATE_INVENTORY)
  @join__type(graph: CODESIGN)
  @join__unionMember(graph: CERTIFICATE_INVENTORY, member: "RFC822Name")
  @join__unionMember(graph: CODESIGN, member: "RFC822Name")
  @join__unionMember(graph: CERTIFICATE_INVENTORY, member: "DNSName")
  @join__unionMember(graph: CODESIGN, member: "DNSName")
  @join__unionMember(graph: CERTIFICATE_INVENTORY, member: "DirectoryName")
  @join__unionMember(graph: CODESIGN, member: "DirectoryName")
  @join__unionMember(graph: CERTIFICATE_INVENTORY, member: "EdiPartyName")
  @join__unionMember(graph: CODESIGN, member: "EdiPartyName")
  @join__unionMember(graph: CERTIFICATE_INVENTORY, member: "UniformResourceIdentifier")
  @join__unionMember(graph: CODESIGN, member: "UniformResourceIdentifier")
  @join__unionMember(graph: CERTIFICATE_INVENTORY, member: "IPAddress")
  @join__unionMember(graph: CODESIGN, member: "IPAddress")
 = RFC822Name | DNSName | DirectoryName | EdiPartyName | UniformResourceIdentifier | IPAddress

"""PublicKeyInformation when the public key is other than RSA, DSA, or EC"""
type GenericKeyInfo
  @join__type(graph: CERTIFICATE_INVENTORY)
{
  """ASN1 object identifier"""
  oid: String!
}

"""
Global revocation refers to the revocation details of a certificate derived from Certificate Revocation Lists issued by
the Certificate Authorities we monitor worldwide. If a certificate is identified as revoked, the reason for revocation
and the date of revocation will also be provided.
"""
type GlobalRevocation
  @join__type(graph: CERTIFICATE_INVENTORY)
{
  status: GlobalRevocationStatus
  reason: GlobalRevocationReason
  revokedTime: DateTime
}

"""
Global revocation reason indicates the reason for a certificate that is revoked
"""
enum GlobalRevocationReason
  @join__type(graph: CERTIFICATE_INVENTORY)
  @join__type(graph: SEARCH)
{
  UNSPECIFIED @join__enumValue(graph: CERTIFICATE_INVENTORY) @join__enumValue(graph: SEARCH)
  KEY_COMPROMISED @join__enumValue(graph: CERTIFICATE_INVENTORY) @join__enumValue(graph: SEARCH)
  CA_COMPROMISED @join__enumValue(graph: CERTIFICATE_INVENTORY) @join__enumValue(graph: SEARCH)
  AFFILIATION_CHANGED @join__enumValue(graph: CERTIFICATE_INVENTORY) @join__enumValue(graph: SEARCH)
  SUPERSEDED @join__enumValue(graph: CERTIFICATE_INVENTORY) @join__enumValue(graph: SEARCH)
  CESSATION_OF_OPERATION @join__enumValue(graph: CERTIFICATE_INVENTORY) @join__enumValue(graph: SEARCH)
  CERTIFICATE_HOLD @join__enumValue(graph: CERTIFICATE_INVENTORY) @join__enumValue(graph: SEARCH)
  REMOVE_FROM_CRL @join__enumValue(graph: CERTIFICATE_INVENTORY) @join__enumValue(graph: SEARCH)
  PRIVILEGE_WITHDRAWN @join__enumValue(graph: CERTIFICATE_INVENTORY) @join__enumValue(graph: SEARCH)
  AA_COMPROMISE @join__enumValue(graph: CERTIFICATE_INVENTORY) @join__enumValue(graph: SEARCH)
}

input GlobalRevocationReasonFilter
  @join__type(graph: SEARCH)
{
  """The string value we want to match"""
  eq: GlobalRevocationReason

  """
  The boolean value that we want to assert whether the boolean field is null or not
  """
  hasValue: Boolean

  """
  The list of strings that we want to assert whether the string value is included in the provided list
  """
  in: [GlobalRevocationReason!]
}

"""
Global revocation status indicates whether a certificate is revoked, not revoked, or its revocation status is unknown
"""
enum GlobalRevocationStatus
  @join__type(graph: CERTIFICATE_INVENTORY)
  @join__type(graph: SEARCH)
{
  REVOKED @join__enumValue(graph: CERTIFICATE_INVENTORY) @join__enumValue(graph: SEARCH)
  NOT_REVOKED @join__enumValue(graph: CERTIFICATE_INVENTORY) @join__enumValue(graph: SEARCH)
  UNKNOWN @join__enumValue(graph: CERTIFICATE_INVENTORY) @join__enumValue(graph: SEARCH)
}

input GlobalRevocationStatusFilter
  @join__type(graph: SEARCH)
{
  """The string value we want to match"""
  eq: GlobalRevocationStatus

  """
  The boolean value that we want to assert whether the boolean field is null or not
  """
  hasValue: Boolean

  """
  The list of strings that we want to assert whether the string value is included in the provided list
  """
  in: [GlobalRevocationStatus!]
}

"""
Types that represent human actors with distinct identities that can use the system
"""
union HumanIdentity
  @join__type(graph: CODESIGN)
  @join__unionMember(graph: CODESIGN, member: "User")
  @join__unionMember(graph: CODESIGN, member: "Team")
 = User | Team

"""
Types that represent actors with distinct identities that can use the system, includes User and ServiceAccount types
"""
union Identity
  @join__type(graph: CODESIGN)
  @join__type(graph: LEGACY)
  @join__type(graph: OUTAGEDETECTION)
  @join__unionMember(graph: CODESIGN, member: "User")
  @join__unionMember(graph: LEGACY, member: "User")
  @join__unionMember(graph: OUTAGEDETECTION, member: "User")
  @join__unionMember(graph: CODESIGN, member: "ServiceAccount")
  @join__unionMember(graph: LEGACY, member: "ServiceAccount")
  @join__unionMember(graph: OUTAGEDETECTION, member: "ServiceAccount")
  @join__unionMember(graph: CODESIGN, member: "Team")
  @join__unionMember(graph: LEGACY, member: "Team")
  @join__unionMember(graph: OUTAGEDETECTION, member: "Team")
 = User | ServiceAccount | Team

"""The connection type for Identity"""
type IdentityConnection
  @join__type(graph: LEGACY)
  @join__type(graph: OUTAGEDETECTION)
{
  """A list of edges."""
  edges: [IdentityEdge!]

  """A list of nodes."""
  nodes: [Identity!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a IdentityConnection."""
type IdentityEdge
  @join__type(graph: LEGACY)
  @join__type(graph: OUTAGEDETECTION)
{
  """A cursor for use in pagination"""
  cursor: ID!

  """The item at the end of the edge"""
  node: Identity!
}

input IdentityInput
  @join__type(graph: CODESIGN)
{
  id: UUID!
  type: IdentityType!
}

enum IdentityType
  @join__type(graph: CODESIGN)
{
  User @join__enumValue(graph: CODESIGN)
  Team @join__enumValue(graph: CODESIGN)
  ServiceAccount @join__enumValue(graph: CODESIGN)
}

"""A data type that represents a 64 bit signed integer"""
scalar Int64
  @join__type(graph: CERTIFICATE_INVENTORY)
  @join__type(graph: SEARCH)

"""Represents a configured integration details."""
type Integration
  @join__type(graph: MESSAGING, key: "id")
  @join__type(graph: NOTIFICATION_ROUTER, key: "id", resolvable: false)
{
  id: UUID!
  integrationType: IntegrationType! @join__field(graph: MESSAGING)
  name: String @join__field(graph: MESSAGING)
  enabled: Boolean! @join__field(graph: MESSAGING)
  createdAt: String @join__field(graph: MESSAGING)
  createdBy: UUID @join__field(graph: MESSAGING)
  updatedAt: String @join__field(graph: MESSAGING)
  updatedBy: UUID @join__field(graph: MESSAGING)
  usage: [IntegrationUsage!] @join__field(graph: MESSAGING)
  default: Boolean! @join__field(graph: MESSAGING)
}

"""
IntegrationConnection represents a connection of Integration nodes with pagination.
"""
type IntegrationConnection
  @join__type(graph: MESSAGING)
{
  pageInfo: PageInfo!
  totalCount: Int!
  nodes: [Integration!]
  edges: [IntegrationEdge!]
}

"""IntegrationEdge represents an edge in the IntegrationConnection."""
type IntegrationEdge
  @join__type(graph: MESSAGING)
{
  node: Integration!
  cursor: String!
}

"""Represents a integration order by to use"""
enum IntegrationOrderBy
  @join__type(graph: MESSAGING)
{
  UUID @join__enumValue(graph: MESSAGING)
}

"""Represents an integration type."""
type IntegrationType
  @join__type(graph: MESSAGING)
{
  type: String!
  name: String!
  description: String!
}

"""
IntegrationTypeConnection represents a connection of IntegrationType nodes with pagination.
"""
type IntegrationTypeConnection
  @join__type(graph: MESSAGING)
{
  pageInfo: PageInfo!
  totalCount: Int!
  nodes: [IntegrationType!]
  edges: [IntegrationTypeEdge!]
}

"""IntegrationEdge represents an edge in the IntegrationTypeConnection."""
type IntegrationTypeEdge
  @join__type(graph: MESSAGING)
{
  node: IntegrationType!
  cursor: String!
}

type IntegrationUsage
  @join__type(graph: MESSAGING)
{
  reference: String!
  callCount: Int!
}

"""
A field whose value is either an IPv4 address(opens in a new tab) or IPv6 address(opens in a new tab).
"""
scalar IP
  @join__type(graph: CERTIFICATE_INVENTORY)
  @join__type(graph: CODESIGN)
  @join__type(graph: OUTAGEDETECTION)

type IPAddress
  @join__type(graph: CERTIFICATE_INVENTORY)
  @join__type(graph: CODESIGN)
{
  ip: IP!
}

type IssuanceInfo
  @join__type(graph: TLSPK)
{
  zone: String!
  connection: String!
  platform: IssuerPlatform!
}

enum IssuerPlatform
  @join__type(graph: TLSPK)
{
  SAAS @join__enumValue(graph: TLSPK)
  SELF_HOSTED @join__enumValue(graph: TLSPK)
}

enum IssuerTagType
  @join__type(graph: TLSPK)
{
  NAMESPACE @join__enumValue(graph: TLSPK)
  ISSUER @join__enumValue(graph: TLSPK)
}

enum IssuerType
  @join__type(graph: SEARCH)
  @join__type(graph: TLSPK)
{
  ACME @join__enumValue(graph: SEARCH) @join__enumValue(graph: TLSPK)
  CA @join__enumValue(graph: SEARCH) @join__enumValue(graph: TLSPK)
  SELF_SIGNED @join__enumValue(graph: SEARCH) @join__enumValue(graph: TLSPK)
  HASHI_CORP_VAULT @join__enumValue(graph: SEARCH) @join__enumValue(graph: TLSPK)
  OPEN_SOURCE @join__enumValue(graph: SEARCH) @join__enumValue(graph: TLSPK)
  ENTERPRISE @join__enumValue(graph: SEARCH) @join__enumValue(graph: TLSPK)
  FIREFLY @join__enumValue(graph: SEARCH) @join__enumValue(graph: TLSPK)
  SMALL_STEP @join__enumValue(graph: SEARCH) @join__enumValue(graph: TLSPK)
  GOOGLE_CERTIFICATE_AUTHORITY_SERVICE @join__enumValue(graph: SEARCH) @join__enumValue(graph: TLSPK)
  AWS_PRIVATE_CERTIFICATE_AUTHORITY @join__enumValue(graph: SEARCH) @join__enumValue(graph: TLSPK)
  CLOUD_FLARE_ORIGIN_CA @join__enumValue(graph: SEARCH) @join__enumValue(graph: TLSPK)
  FREE_IPA @join__enumValue(graph: SEARCH) @join__enumValue(graph: TLSPK)
  EJBCA @join__enumValue(graph: SEARCH) @join__enumValue(graph: TLSPK)
}

type IssuingTemplate
  @join__type(graph: CAOPERATIONS, key: "id")
{
  id: ID!
  name: String!
  certificateAuthorityAccount: CertificateAuthorityAccount
}

scalar join__FieldSet

enum join__Graph {
  CAOPERATIONS @join__graph(name: "caoperations", url: "http://caoperations-service:2522/system/graphql")
  CERTIFICATE @join__graph(name: "certificate", url: "http://certificate-service:2322/system/graphql")
  CERTIFICATE_INVENTORY @join__graph(name: "certificate-inventory", url: "http://certificate-query-service:80/graphql")
  CLOUD_PROVIDERS @join__graph(name: "cloud-providers", url: "http://cloudproviders-service:4488/graphql")
  CODESIGN @join__graph(name: "codesign", url: "http://codesign-service:8080/graphql")
  COMPLIANCE_POLICY @join__graph(name: "compliance-policy", url: "http://compliance-policy-service:8080/graphql")
  COMPUTED_FIELDS @join__graph(name: "computed-fields", url: "http://graphql-computed-fields:8080/graphql")
  CUSTOM_REPORTING @join__graph(name: "custom-reporting", url: "http://report-inventory-service:80/graphql")
  CUSTOM_REPORTING_EXEC @join__graph(name: "custom-reporting-exec", url: "http://report-execution-service:80/graphql")
  DISCOVERY @join__graph(name: "discovery", url: "http://discovery-service:2422/system/graphql")
  ENTITLEMENTS @join__graph(name: "entitlements", url: "http://iam-entitlement-service:80/graphql")
  INTEGRATIONS @join__graph(name: "integrations", url: "http://integrations-service:2722/system/graphql")
  KEY_INVENTORY @join__graph(name: "key-inventory", url: "http://key-inventory-service:8080/graphql")
  LEGACY @join__graph(name: "legacy", url: "http://graphql-legacy-api-adapter:8080/graphql")
  MESSAGING @join__graph(name: "messaging", url: "http://ext-integration-msg-service:80/graphql")
  NOTIFICATION_ROUTER @join__graph(name: "notification-router", url: "http://notification-router-service:8080/graphql")
  OUTAGEDETECTION @join__graph(name: "outagedetection", url: "http://outagedetection-service:7777/system/graphql")
  PLUGIN_SERVICE @join__graph(name: "plugin-service", url: "http://platform-plugin-service:80/graphql")
  PROVISIONING @join__graph(name: "provisioning", url: "http://provisioning-service:3022/system/graphql")
  SEARCH @join__graph(name: "search", url: "http://search-query-service:80/graphql")
  TAGGING @join__graph(name: "tagging", url: "http://tagging-service:3122/system/graphql")
  TLSPK @join__graph(name: "tlspk", url: "http://tlspk-backend-service:443/graphql")
  USAGEMETRIC @join__graph(name: "usagemetric", url: "http://iam-usagemetric-service:80/graphql")
}

scalar JSON
  @join__type(graph: PLUGIN_SERVICE)
  @join__type(graph: PROVISIONING)

"""Elliptic curves"""
enum KeyCurve
  @join__type(graph: CERTIFICATE_INVENTORY)
{
  """
  NIST P-224 (FIPS 186-4, section D.2.2), also known as secp224r1, wap-wsg-idm-ecid-wtls12, and ansip224r1
  """
  P224 @join__enumValue(graph: CERTIFICATE_INVENTORY)

  """
  NIST P-256 (FIPS 186-4, section D.2.3), also known as secp256r1 or prime256v1
  """
  P256 @join__enumValue(graph: CERTIFICATE_INVENTORY)

  """NIST P-384 (FIPS 186-4, section D.2.4), also known as secp384r1"""
  P384 @join__enumValue(graph: CERTIFICATE_INVENTORY)

  """NIST P-521 (FIPS 186-4, section D.2.5), also known as secp521r1"""
  P521 @join__enumValue(graph: CERTIFICATE_INVENTORY)

  """Ed25519 signature algorithm"""
  ED25519 @join__enumValue(graph: CERTIFICATE_INVENTORY)

  """Unknown (or unsupported) key curve"""
  UNSUPPORTED @join__enumValue(graph: CERTIFICATE_INVENTORY)
}

"""Key Pair"""
type KeyPair
  @join__type(graph: CODESIGN, key: "id locationID", resolvable: false)
  @join__type(graph: KEY_INVENTORY, key: "id locationID")
{
  """The UUID of the key pair"""
  id: ID!

  """The UUID of the storage location where this key pair resides"""
  locationID: ID! @inaccessible

  """The location where this key pair resides"""
  location: KeyStorageLocation! @join__field(graph: KEY_INVENTORY)

  """A human readable string label to identify this key pair"""
  label: String @join__field(graph: KEY_INVENTORY)

  """The PKCS#11 CKK_ key type of the key"""
  parameterSet: KeyParameterSet! @join__field(graph: KEY_INVENTORY)

  """The ISO8601 date/time that the key was created on"""
  creationTime: DateTime! @join__field(graph: KEY_INVENTORY)

  """A PEM representation of the public key data"""
  publicKey: String! @join__field(graph: KEY_INVENTORY)

  """
  True if the private key material was imported, indicating that there is a possibility that the key material exists in another location
  """
  imported: Boolean! @join__field(graph: KEY_INVENTORY)

  """True if the private key material can be exported"""
  exportable: Boolean! @join__field(graph: KEY_INVENTORY)

  """The cyrptographic operation usages this key pair is meant for"""
  usage: KeyUsage! @join__field(graph: KEY_INVENTORY)
}

"""
A representation of each supported combination of key type, and any type
specific parameters.
"""
enum KeyParameterSet
  @join__type(graph: CODESIGN)
  @join__type(graph: KEY_INVENTORY)
{
  KeyParameterSetEd25519 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetEd448 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetRsa1024 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetRsa2048 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetRsa3072 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetRsa4096 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetRsa8192 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetRsaPssOaep1024 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetRsaPssOaep2048 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetRsaPssOaep3072 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetRsaPssOaep4096 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetRsaPssOaep8192 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetSlhDsaSHA2128f @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetSlhDsaSHA2128s @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetSlhDsaSHA2192f @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetSlhDsaSHA2192s @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetSlhDsaSHA2256f @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetSlhDsaSHA2256s @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetSlhDsaShake128f @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetSlhDsaShake128s @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetSlhDsaShake192f @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetSlhDsaShake192s @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetSlhDsaShake256f @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetSlhDsaShake256s @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetHashSlhDsaSHA2128fSHA256 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetHashSlhDsaSHA2128sSHA256 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetHashSlhDsaSHA2192fSHA512 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetHashSlhDsaSHA2192sSHA512 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetHashSlhDsaSHA2256fSHA512 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetHashSlhDsaSHA2256sSHA512 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetHashSlhDsaShake128fShake128 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetHashSlhDsaShake128sShake128 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetHashSlhDsaShake192fShake256 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetHashSlhDsaShake192sShake256 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetHashSlhDsaShake256fShake256 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetHashSlhDsaShake256sShake256 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetDsa @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetDesEde3Cbc @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetAes128Cbc @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetAes192Cbc @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetAes256Cbc @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetAes128Gcm @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetAes192Gcm @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetAes256Gcm @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetEcdsaP256 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetEcdsaP384 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetEcdsaP521 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetBrainpoolP160r1 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetBrainpoolP160t1 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetBrainpoolP192r1 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetBrainpoolP192t1 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetBrainpoolP224r1 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetBrainpoolP224t1 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetBrainpoolP256r1 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetBrainpoolP256t1 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetBrainpoolP320r1 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetBrainpoolP320t1 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetBrainpoolP384r1 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetBrainpoolP384t1 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetBrainpoolP512r1 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetBrainpoolP512t1 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetSecP192r1 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetSecP192k1 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetSecP224k1 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetSecP224r1 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetSecP256k1 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetMlDsa44 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetMlDsa65 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetMlDsa87 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetcompositeMlDsa44PlusRsa2048 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetcompositeMlDsa44PlusPss2048 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetcompositeMlDsa44PlusEd25519 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetcompositeMlDsa44PlusECP256 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetcompositeMlDsa65PlusRsa3072 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetcompositeMlDsa65PlusPss3072 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetcompositeMlDsa65PlusRsa4096 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetcompositeMlDsa65PlusPss4096 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetcompositeMlDsa65PlusECP256 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetcompositeMlDsa65PlusECP384 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetcompositeMlDsa65PlusBrainpoolP256 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetcompositeMlDsa65PlusEd25519 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetcompositeMlDsa87PlusECP384 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetcompositeMlDsa87PlusBrainpoolP384 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetcompositeMlDsa87PlusEd448 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
  KeyParameterSetcompositeMlDsa87PlusPss4096 @join__enumValue(graph: CODESIGN) @join__enumValue(graph: KEY_INVENTORY)
}

"""Key Storage Location"""
type KeyStorageLocation
  @join__type(graph: CODESIGN, key: "id", resolvable: false)
  @join__type(graph: KEY_INVENTORY, key: "id")
{
  """The UUID of the key storage location"""
  id: ID!

  """A short human readable description of the driver"""
  name: String! @join__field(graph: KEY_INVENTORY)

  """
  The ISO8601 date/time that the Key Storage Location was created on.
  Null if the location is provided by the platform instead of user-created.
  """
  creationTime: DateTime @join__field(graph: KEY_INVENTORY)

  """The set of capabilities the storage location is able to perform"""
  capabilities: KeyStorageLocationCapabilities! @join__field(graph: KEY_INVENTORY)
}

"""The set of capabilities the storage location is able to perform"""
type KeyStorageLocationCapabilities
  @join__type(graph: KEY_INVENTORY)
{
  """True if the Key Storage Location allows minting new keys"""
  keyCreation: Boolean!

  """True if the Key Storage Location allows importing keys"""
  keyImport: Boolean!

  """True if the Key Storage Location allows exporting keys"""
  keyExport: Boolean!

  """True if the Key Storage Location supports signing"""
  sign: Boolean!

  """True if the Key Storage Location supports decryption"""
  decrypt: Boolean!

  """True if the Key Storage Location supports key derivation"""
  derive: Boolean!

  """
  A list of PKCS#11 CK_MECHANISM_TYPE representing the algorithms that are supported for signing operations
  """
  signingMechanisms: [Int!]

  """
  A list of PKCS#11 CK_MECHANISM_TYPE representing the algorithms that are supported for decryption operations
  """
  decryptionMechanisms: [Int!]

  """
  A list of PKCS#11 CK_MECHANISM_TYPE representing the algorithms that are supported for key derivation operations
  """
  derivationMechanisms: [Int!]

  """
  A list of parameter sets that may be used with this location when creating a key pair
  """
  supportedParameterSets: [KeyParameterSet!]
}

type KeyStorageLocationEdge
  @join__type(graph: KEY_INVENTORY)
{
  node: KeyStorageLocation!
  cursor: String!
}

type KeyStorageLocationsConnection
  @join__type(graph: KEY_INVENTORY)
{
  pageInfo: PageInfo!
  totalCount: Int!
  nodes: [KeyStorageLocation!]
  edges: [KeyStorageLocationEdge!]
}

"""A representation of the allowed usage of a key"""
type KeyUsage
  @join__type(graph: CODESIGN)
  @join__type(graph: KEY_INVENTORY)
{
  """Indicates that the key may be used to perform key derivation"""
  derivation: Boolean!

  """Indicates that the key may be used for decryption"""
  encipherment: Boolean!

  """Indicates that the key may be used for creating signatures"""
  signing: Boolean!
}

"""A representation of the allowed usage of a key"""
input KeyUsageInput
  @join__type(graph: CODESIGN)
{
  """Indicates that the key may be used to perform key derivation"""
  derivation: Boolean

  """Indicates that the key may be used for decryption"""
  encipherment: Boolean

  """Indicates that the key may be used for creating signatures"""
  signing: Boolean
}

"""Certificate Lifecycle enum"""
enum Lifecycle
  @join__type(graph: TLSPK)
{
  NOT_MANAGED @join__enumValue(graph: TLSPK)
  CERT_MANAGER @join__enumValue(graph: TLSPK)
  SYSTEM_MANAGED @join__enumValue(graph: TLSPK)
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

enum LogicOperator
  @join__type(graph: TLSPK)
{
  AND @join__enumValue(graph: TLSPK)
  OR @join__enumValue(graph: TLSPK)
}

"""Represents information about a machine."""
type Machine
  @join__type(graph: PLUGIN_SERVICE, key: "id", resolvable: false)
  @join__type(graph: PROVISIONING, key: "id")
{
  """The unique identifier of the machine."""
  id: ID!

  """The plugin associated with the machine."""
  plugin: Plugin!

  """The name of the machine."""
  name: String! @join__field(graph: PROVISIONING)
}

type MachineIdentity
  @join__type(graph: CLOUD_PROVIDERS)
{
  id: UUID!
  cloudKeystoreId: UUID!
  cloudKeystoreName: String
  cloudProviderId: UUID
  cloudProviderName: String
  metadata: CertificateCloudMetadata
  status: MachineIdentityStatus!
  statusDetails: String
  addedOn: DateTime!
  addedBy: User
  certificate: Certificate!
  certificateId: UUID!
}

"""A page of MachineIdentity results"""
type MachineIdentityConnection
  @join__type(graph: CLOUD_PROVIDERS)
{
  """Current page information"""
  pageInfo: PageInfo!

  """Total number of certificates (in all pages)"""
  totalCount: Int!

  """MachineIdentity in the current page, without cursor"""
  nodes: [MachineIdentity!]

  """
  MachineIdentities in the current page, together with their associated cursor
  """
  edges: [MachineIdentityEdge!]
}

"""MachineIdentity together with its associated cursor"""
type MachineIdentityEdge
  @join__type(graph: CLOUD_PROVIDERS)
{
  """The machine identity"""
  node: MachineIdentity!

  """The cursor for the machine identity"""
  cursor: String!
}

enum MachineIdentityStatus
  @join__type(graph: CLOUD_PROVIDERS)
{
  NEW @join__enumValue(graph: CLOUD_PROVIDERS)
  PENDING @join__enumValue(graph: CLOUD_PROVIDERS)
  INSTALLED @join__enumValue(graph: CLOUD_PROVIDERS)
  DISCOVERED @join__enumValue(graph: CLOUD_PROVIDERS)
  VALIDATED @join__enumValue(graph: CLOUD_PROVIDERS)
  MISSING @join__enumValue(graph: CLOUD_PROVIDERS)
  FAILED @join__enumValue(graph: CLOUD_PROVIDERS)
}

"""
Represents an instance of machine installation identified by a certificate.
"""
type MachineInstallation
  @join__type(graph: PLUGIN_SERVICE, key: "id")
  @join__type(graph: PROVISIONING, key: "id")
{
  """The unique identifier of the machine installation."""
  id: ID!

  """JSON data representing keystore specifics."""
  keystoreJson: JSON @join__field(graph: PLUGIN_SERVICE, external: true) @join__field(graph: PROVISIONING)

  """JSON data representing binding specifics."""
  bindingJson: JSON @join__field(graph: PLUGIN_SERVICE, external: true) @join__field(graph: PROVISIONING)

  """Details of the associated machine."""
  machine: Machine! @join__field(graph: PLUGIN_SERVICE, external: true) @join__field(graph: PROVISIONING)

  """Details about the configurations of the machine installation."""
  configurationDetails: Configuration @join__field(graph: PLUGIN_SERVICE, requires: "machine { plugin { manifest } } keystoreJson bindingJson")

  """The status of the machine installation."""
  status: MachineInstallationStatus! @join__field(graph: PROVISIONING)
}

"""A connection to a list of MachineInstallation objects."""
type MachineInstallationConnection
  @join__type(graph: PROVISIONING)
{
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The total count of machine installations in the connection."""
  totalCount: Int!

  """A list of nodes representing machine installations."""
  nodes: [MachineInstallation!]

  """A list of edges representing connections to machine installations."""
  edges: [MachineInstallationEdge!]
}

"""An edge in a MachineInstallationConnection."""
type MachineInstallationEdge
  @join__type(graph: PROVISIONING)
{
  """A cursor for use in pagination."""
  cursor: ID!

  """The item at the end of the edge."""
  node: MachineInstallation!
}

"""Represents the possible statuses for a machine installation."""
enum MachineInstallationStatus
  @join__type(graph: PROVISIONING)
{
  NEW @join__enumValue(graph: PROVISIONING)
  PENDING @join__enumValue(graph: PROVISIONING)
  INSTALLED @join__enumValue(graph: PROVISIONING)
  DISCOVERED @join__enumValue(graph: PROVISIONING)
  VALIDATED @join__enumValue(graph: PROVISIONING)
  MISSING @join__enumValue(graph: PROVISIONING)
  FAILED @join__enumValue(graph: PROVISIONING)
}

"""Monthly schedule pattern"""
type MonthlyPattern
  @join__type(graph: INTEGRATIONS)
{
  """Type of recurrence pattern - will be DAY_OF_MONTH"""
  recurrenceType: SchedulerPatternRecurrenceType!

  """Days of month when service should run"""
  daysOfMonth: [DayOfMonth!]!

  """Time of day when service should run (HH:mm:ss)"""
  recurrenceTime: DateTime!
}

type MonthlyReportSchedule
  @join__type(graph: CUSTOM_REPORTING)
{
  dayOfMonth: [Int!]!
  hour: Int!
  minute: Int!
}

input MonthlyReportScheduleInput
  @join__type(graph: CUSTOM_REPORTING)
{
  dayOfMonth: [Int!]!
  hour: Int!
  minute: Int!
}

type Mutation
  @join__type(graph: CAOPERATIONS)
  @join__type(graph: CERTIFICATE_INVENTORY)
  @join__type(graph: CLOUD_PROVIDERS)
  @join__type(graph: CODESIGN)
  @join__type(graph: COMPLIANCE_POLICY)
  @join__type(graph: CUSTOM_REPORTING)
  @join__type(graph: MESSAGING)
  @join__type(graph: NOTIFICATION_ROUTER)
  @join__type(graph: TLSPK)
{
  """Revoke a certificate by SHA1 fingerprint"""
  revokeCertificate(fingerprint: ID!, certificateAuthorityAccountId: UUID, revocationReason: RevocationReason!, revocationComment: String): Certificate @join__field(graph: CAOPERATIONS)

  """Approve or reject pending certificate revocation by SHA1 fingerprint"""
  approveCertificateRevocation(fingerprint: ID!, rejectReason: String, decision: ApproverDecision!): Certificate @join__field(graph: CAOPERATIONS)

  """
  Approve or reject pending certificates revocation by SHA1 fingerprints in BULK
  """
  approveCertificateRevocationInBulk(fingerprints: [ID!]!, rejectReason: String, decision: ApproverDecision!, wsClientId: String): String @join__field(graph: CAOPERATIONS)

  """
  Retire one or more certificates. If a current certificate (i.e. latest version of a certificate) is retired, all
  previous versions of the certificate will be retired as well.
  """
  retireCertificates(input: RetireCertificatesInput!): [RetireCertificatePayload]! @join__field(graph: CERTIFICATE_INVENTORY)

  """Recover one or more retired certificates."""
  recoverCertificates(input: RecoverCertificatesInput!): [RecoverCertificatePayload]! @join__field(graph: CERTIFICATE_INVENTORY)

  """Delete one or more retired certificates."""
  deleteCertificates(input: DeleteCertificatesInput!): [DeleteCertificatePayload]! @join__field(graph: CERTIFICATE_INVENTORY)

  """Creates a Cloud Provider"""
  createCloudProvider(input: CloudProviderInput!): CloudProvider @join__field(graph: CLOUD_PROVIDERS)

  """Validates a Cloud Provider configuration by ID"""
  validateCloudProvider(cloudProviderId: UUID!): CloudProviderValidationResult! @join__field(graph: CLOUD_PROVIDERS)

  """Updates a cloud provider"""
  updateCloudProvider(input: CloudProviderUpdateInput!): CloudProvider @join__field(graph: CLOUD_PROVIDERS)

  """Deletes a list of Cloud Providers by ID"""
  deleteCloudProvider(cloudProviderId: [UUID!]!): Boolean! @join__field(graph: CLOUD_PROVIDERS)

  """Creates a Cloud Keystore"""
  createCloudKeystore(input: CloudKeystoreInput!): CloudKeystore @join__field(graph: CLOUD_PROVIDERS)

  """Updates a Cloud Keystore"""
  updateCloudKeystore(input: CloudKeystoreUpdateInput!): CloudKeystore @join__field(graph: CLOUD_PROVIDERS)

  """Deletes a list of Cloud Keystores by ID"""
  deleteCloudKeystore(cloudKeystoreIds: [UUID!]!): Boolean! @join__field(graph: CLOUD_PROVIDERS)

  """Provision a certificate to a Cloud Keystore"""
  provisionToCloudKeystore(certificateId: UUID!, cloudKeystoreId: UUID!, wsClientId: UUID!, options: CertificateProvisioningOptionsInput): WorkflowResult @join__field(graph: CLOUD_PROVIDERS)

  """
  Provision to existing Cloud Machine Identity. If `certificateId` is not provided a re-provisioning of the existing certificate would be triggered
  """
  provisionToCloudMachineIdentity(machineIdentityId: UUID!, wsClientId: UUID!, certificateId: UUID): WorkflowResult @join__field(graph: CLOUD_PROVIDERS)

  """Deletes a list of Cloud machine identities"""
  deleteCloudMachineIdentities(machineIdentityIds: [UUID!]!): Boolean! @join__field(graph: CLOUD_PROVIDERS)

  """Start cloud discovery"""
  startCloudDiscovery(cloudKeystoreId: UUID!, wsClientId: UUID!): WorkflowResult @join__field(graph: CLOUD_PROVIDERS)

  """Abort cloud discovery"""
  abortCloudDiscovery(cloudKeystoreId: UUID!): Boolean! @join__field(graph: CLOUD_PROVIDERS)

  """
  Rotate the secrets of the given Cloud Provider
  GCP - Venafi Generated Key: Rotates the private/public key pair
  GCP - Workload Identity Federation: Rotates the private/public key pair and exposes the new pair in the given OIDC endpoint
  """
  rotateSecrets(cloudProviderId: UUID!): CloudProvider @join__field(graph: CLOUD_PROVIDERS)

  """Modify the current CodeSign Protect Cloud configuration."""
  updateCodeSignConfiguration(input: CodeSignConfigurationInput!): CodeSignConfiguration! @join__field(graph: CODESIGN)

  """Create a Code Sign Protect Signing Key"""
  createCodeSignSigningKey(input: CreateCodeSignSigningKeyInput!): CreateCodeSignSigningKeyPayload! @join__field(graph: CODESIGN)

  """
  Update a Code Sign Protect Signing Key
  
  Any fields that are ommitted from the `input` field will preserve the
  previously stored value.
  """
  updateCodeSignSigningKey(input: UpdateCodeSignSigningKeyInput!): UpdateCodeSignSigningKeyPayload! @join__field(graph: CODESIGN)

  """Delete one or more Code Sign Protect Signing Keys"""
  deleteCodeSignSigningKey(input: DeleteCodeSignSigningKeyInput!): DeleteCodeSignSigningKeyPayload! @join__field(graph: CODESIGN)

  """
  Enable or disable one or more Code Sign Protect Signing Key
  
  A Signing Key which is disabled may not be used to perform any cryptographic
  operations, and any attempts to trigger renewal or key rotation will not be
  permitted.
  
  Any cryptographic objects which were created before the Signing Key was
  disabled will be preserved.
  """
  enableCodeSignSigningKey(input: EnableCodeSignSigningKeyInput!): EnableCodeSignSigningKeyPayload! @join__field(graph: CODESIGN)

  """
  Renew or rotate cryptographic objects associated to a set of Code Sign
  Signing Key
  """
  renewCodeSignObjects(input: RenewCodeSignObjectsInput!): RenewCodeSignObjectsPayload! @join__field(graph: CODESIGN)

  """
  CreateCompliancePolicy is the mutation to create one or many compliance policies
  """
  createCompliancePolicy(input: [CompliancePolicyCreateInput!]!): [CompliancePolicy]! @join__field(graph: COMPLIANCE_POLICY)

  """
  UpdateCompliancePolicy is the mutation to update one or many compliance policies
  """
  updateCompliancePolicy(input: [CompliancePolicyUpdateInput!]!): [CompliancePolicy]! @join__field(graph: COMPLIANCE_POLICY)

  """
  DeleteCompliancePolicy is the mutation to delete one or many compliance policies
  """
  deleteCompliancePolicy(id: [UUID!]!): [CompliancePolicy]! @join__field(graph: COMPLIANCE_POLICY)

  """
  EvaluateCompliancePolicy runs an evaluation of the provided compliance policy IDs
  """
  evaluateCompliancePolicy(id: UUID!): CompliancePolicy @join__field(graph: COMPLIANCE_POLICY)

  """
  Runs a report definition's query to generate the report with the latest information.
  """
  runReportDefinitionQuery(id: UUID!): ReportInformation @join__field(graph: CUSTOM_REPORTING)

  """Deletes a report definition by id."""
  deleteReportDefinition(id: UUID!): Boolean @join__field(graph: CUSTOM_REPORTING)

  """Creates a report definition."""
  createReportDefinition(input: CreateReportDefinitionInput!): ReportDefinition @join__field(graph: CUSTOM_REPORTING)

  """Updates a report definition."""
  updateReportDefinition(id: UUID!, input: UpdateReportDefinitionInput!): ReportDefinition @join__field(graph: CUSTOM_REPORTING)
  createPagerDutyIntegration(input: CreatePagerDutyIntegrationInput!): Integration @join__field(graph: MESSAGING)
  updatePagerDutyIntegration(input: UpdatePagerDutyIntegrationInput!): Integration @join__field(graph: MESSAGING)
  createZoomTeamChatIntegration(input: CreateZoomTeamChatIntegrationInput!): Integration @join__field(graph: MESSAGING)
  updateZoomTeamChatIntegration(input: UpdateZoomTeamChatIntegrationInput!): Integration @join__field(graph: MESSAGING)
  deleteIntegrations(ids: [UUID!]): DeleteIntegrationPayload @join__field(graph: MESSAGING)
  createExternalEmailRecipient(input: CreateExternalEmailRecipientInput!): ExternalEmailRecipient @join__field(graph: MESSAGING)
  updateExternalEmailRecipient(input: UpdateExternalEmailRecipientInput!): ExternalEmailRecipient @join__field(graph: MESSAGING)
  deleteExternalEmailRecipients(addresses: [String!]): DeleteExternalEmailRecipientPayload @join__field(graph: MESSAGING)
  createNotificationRouter(details: NotificationRouterConfigDetailsInput!, filterConfig: NotificationRouterFilterConfigInput!, integrationConfig: NotificationRouterIntegrationConfigurationInput!, emailDestinationInput: NotificationEmailDestinationInput): NotificationRouter @join__field(graph: NOTIFICATION_ROUTER)
  updateNotificationRouter(id: UUID!, updateNotificationRouterConfigurationInput: UpdateNotificationRouterConfigurationInput!): NotificationRouter @join__field(graph: NOTIFICATION_ROUTER)
  deleteNotificationRouter(ids: [UUID!]): DeleteNotificationRoutingPayload @join__field(graph: NOTIFICATION_ROUTER)
  createNotificationRoutingConfiguration(notificationRouterFilterConfig: NotificationRouterFilterConfigInput!, notificationRouterIntegrationConfig: NotificationRouterIntegrationConfigInput!): NotificationRouter @join__field(graph: NOTIFICATION_ROUTER)
  updateNotificationRoutingConfiguration(id: UUID!, notificationRouterFilterConfig: NotificationRouterFilterConfigInput, notificationRouterIntegrationConfig: NotificationRouterIntegrationConfigInput, enabled: Boolean): NotificationRouter @join__field(graph: NOTIFICATION_ROUTER)
  deleteNotificationRouting(id: UUID!): NotificationRouter @join__field(graph: NOTIFICATION_ROUTER)

  """CreateCluster creates a new cluster."""
  createCluster(input: [ClusterInput!]!): [Cluster!]! @join__field(graph: TLSPK)

  """UpdateCluster updates the properties of a cluster."""
  updateCluster(input: [ClusterInput!]!): [Cluster!]! @join__field(graph: TLSPK)

  """DeleteCluster deletes a cluster."""
  deleteCluster(id: [ID!]!): [Cluster!]! @join__field(graph: TLSPK)
}

type NetworkDiscovery
  @join__type(graph: DISCOVERY, key: "id")
  @join__type(graph: INTEGRATIONS, key: "id")
  @join__type(graph: OUTAGEDETECTION, key: "id")
{
  id: ID!
  targets: Targets! @join__field(graph: DISCOVERY)
  environmentId: ID! @join__field(graph: INTEGRATIONS)
  edgeInstanceIds: [ID!] @join__field(graph: INTEGRATIONS)
  name: String! @join__field(graph: INTEGRATIONS)
  status: NetworkDiscoveryStatus! @join__field(graph: INTEGRATIONS)
  serviceType: ServiceType! @join__field(graph: INTEGRATIONS)
  schedulerEnabled: Boolean! @join__field(graph: INTEGRATIONS)
  schedulePattern: SchedulerPattern @join__field(graph: INTEGRATIONS)
}

"""Status of an integration service"""
enum NetworkDiscoveryStatus
  @join__type(graph: INTEGRATIONS)
{
  """Service is active and functioning normally"""
  ACTIVE @join__enumValue(graph: INTEGRATIONS)

  """Service has been disabled"""
  DISABLED @join__enumValue(graph: INTEGRATIONS)

  """Service is currently executing"""
  RUNNING @join__enumValue(graph: INTEGRATIONS)

  """Service is active but has warnings"""
  WARNING @join__enumValue(graph: INTEGRATIONS)

  """Service configuration is in draft state"""
  DRAFT @join__enumValue(graph: INTEGRATIONS)

  """Service encountered an error"""
  ERROR @join__enumValue(graph: INTEGRATIONS)
}

"""
The thresholds currently in use across all routing configs for certificate expiration events
"""
type NotificationActiveThresholds
  @join__type(graph: NOTIFICATION_ROUTER)
{
  thresholds: [Int!]!
}

"""
NotificationDestinationConfiguration is the BACKWARD COMPATIBLE union type for the different destination types.
"""
union NotificationDestinationConfiguration
  @join__type(graph: NOTIFICATION_ROUTER)
  @join__unionMember(graph: NOTIFICATION_ROUTER, member: "NotificationEmailDestination")
  @join__unionMember(graph: NOTIFICATION_ROUTER, member: "NotificationZoomDestination")
  @join__unionMember(graph: NOTIFICATION_ROUTER, member: "NotificationSlackDestination")
  @join__unionMember(graph: NOTIFICATION_ROUTER, member: "NotificationPagerDutyDestination")
 = NotificationEmailDestination | NotificationZoomDestination | NotificationSlackDestination | NotificationPagerDutyDestination

"""
NotificationDestinationInfo is the union type for the different destination types.
"""
union NotificationDestinationInfo
  @join__type(graph: NOTIFICATION_ROUTER)
  @join__unionMember(graph: NOTIFICATION_ROUTER, member: "NotificationEmailDestination")
  @join__unionMember(graph: NOTIFICATION_ROUTER, member: "NotificationZoomDestination")
  @join__unionMember(graph: NOTIFICATION_ROUTER, member: "NotificationSlackDestination")
  @join__unionMember(graph: NOTIFICATION_ROUTER, member: "NotificationPagerDutyDestination")
 = NotificationEmailDestination | NotificationZoomDestination | NotificationSlackDestination | NotificationPagerDutyDestination

"""
NotificationEmailDestination represents the configuration options for email destination integration type
"""
type NotificationEmailDestination
  @join__type(graph: NOTIFICATION_ROUTER)
{
  users: [UUID!]
  roles: [String!]
  externalEmails: [String!]
  primary: NotificationEmailRecipientsLists
  cc: NotificationEmailRecipientsLists
  bcc: NotificationEmailRecipientsLists
}

"""
NotificationEmailDestinationInput is the input structure to set email integration type configs
"""
input NotificationEmailDestinationInput
  @join__type(graph: CUSTOM_REPORTING)
  @join__type(graph: NOTIFICATION_ROUTER)
{
  primary: NotificationEmailRecipientsListsInput
  cc: NotificationEmailRecipientsListsInput
  bcc: NotificationEmailRecipientsListsInput
}

"""The possible recipients to configure on email notifications"""
type NotificationEmailRecipientsLists
  @join__type(graph: NOTIFICATION_ROUTER)
{
  users: [User!]!
  roles: [String!]!
  externalEmails: [String!]!
  teams: [Team!]!
}

"""The possible recipients for an email integration"""
input NotificationEmailRecipientsListsInput
  @join__type(graph: CUSTOM_REPORTING)
  @join__type(graph: NOTIFICATION_ROUTER)
{
  users: [UUID!]
  roles: [String!]
  teams: [UUID!]
}

"""
NotificationPagerDutyDestination represents the configuration options for pager duty destination integration type
"""
type NotificationPagerDutyDestination
  @join__type(graph: NOTIFICATION_ROUTER)
{
  placeHolder: String
}

"""
NotificationRouter is the structure defining the router unifying the filter configuration and the integration configuration.
"""
type NotificationRouter
  @join__type(graph: CUSTOM_REPORTING, key: "id", resolvable: false)
  @join__type(graph: NOTIFICATION_ROUTER, key: "id", resolvable: true)
{
  """The unique identifier for the router."""
  id: UUID!
  name: String! @join__field(graph: NOTIFICATION_ROUTER)
  eventType: NotificationRouterEventType! @join__field(graph: NOTIFICATION_ROUTER)
  template: NotificationRouterIntegrationTemplate @join__field(graph: NOTIFICATION_ROUTER)
  createdBy: User @join__field(graph: NOTIFICATION_ROUTER)
  createdOn: DateTime @join__field(graph: NOTIFICATION_ROUTER)
  lastUpdated: DateTime @join__field(graph: NOTIFICATION_ROUTER)
  enabled: Boolean! @join__field(graph: NOTIFICATION_ROUTER)
  notificationRouterFilterConfig: NotificationRouterFilterConfig! @join__field(graph: NOTIFICATION_ROUTER)
  notificationRouterIntegrationConfig: NotificationRouterIntegrationConfig! @join__field(graph: NOTIFICATION_ROUTER)
}

type NotificationRouterCelExample
  @join__type(graph: NOTIFICATION_ROUTER)
{
  displayName: String!
  expression: String!
}

"""
NotificationRouterConfigDetailsInput is the inout structure for the config name and event ID
"""
input NotificationRouterConfigDetailsInput
  @join__type(graph: NOTIFICATION_ROUTER)
{
  name: String!
  eventTypeId: String!
}

"""
NotificationRouterConnection is the structure for the list of notification routers.
"""
type NotificationRouterConnection
  @join__type(graph: NOTIFICATION_ROUTER)
{
  pageInfo: PageInfo!
  nodes: [NotificationRouter!]!
  edges: [NotificationRouterEdge!]!
  totalCount: Int!
}

"""
NotificationRouterEdge is the structure for the edges in the notification router connection.
"""
type NotificationRouterEdge
  @join__type(graph: NOTIFICATION_ROUTER)
{
  node: NotificationRouter!
  cursor: String!
}

"""An Email integration type template"""
type NotificationRouterEmailTemplate
  @join__type(graph: NOTIFICATION_ROUTER)
{
  subject: String!
  body: String!
}

input NotificationRouterEmailTemplateInput
  @join__type(graph: NOTIFICATION_ROUTER)
{
  subject: String!
  body: String!
}

"""
The structure defining the router unifying the filter configuration and the integration configuration.
"""
type NotificationRouterEventType
  @join__type(graph: NOTIFICATION_ROUTER, key: "id")
{
  id: String!
  displayName: String!
}

"""
NotificationRouterEventTypeConnection is the structure for the list of even types
"""
type NotificationRouterEventTypeConnection
  @join__type(graph: NOTIFICATION_ROUTER)
{
  pageInfo: PageInfo!
  nodes: [NotificationRouterEventType!]!
  edges: [NotificationRouterEventTypeEdge!]!
  totalCount: Int!
}

"""
NotificationRouterEventTypeEdge is the structure for the edges in the event type connection.
"""
type NotificationRouterEventTypeEdge
  @join__type(graph: NOTIFICATION_ROUTER)
{
  node: NotificationRouterEventType!
  cursor: String!
}

"""Represents an event type field filter input"""
input NotificationRouterEventTypeFieldFilterInput
  @join__type(graph: NOTIFICATION_ROUTER)
{
  displayName: NotificationRouterStringFilterInput
  and: [NotificationRouterEventTypeFieldFilterInput!]
  or: [NotificationRouterEventTypeFieldFilterInput!]
}

"""Represents the event type filters input"""
input NotificationRouterEventTypeFilterInput
  @join__type(graph: NOTIFICATION_ROUTER)
{
  and: [NotificationRouterEventTypeFieldFilterInput!]
  or: [NotificationRouterEventTypeFieldFilterInput!]
}

"""Represents a notification field filter input"""
input NotificationRouterFieldFilterInput
  @join__type(graph: NOTIFICATION_ROUTER)
{
  name: NotificationRouterStringFilterInput
  eventType: NotificationRouterStringMatchFilterInput
  and: [NotificationRouterFieldFilterInput!]
  or: [NotificationRouterFieldFilterInput!]
}

"""
NotificationRouterFilterConfig uses a CEL expression as advancedFilterExpression to filter notifications.
"""
type NotificationRouterFilterConfig
  @join__type(graph: NOTIFICATION_ROUTER)
{
  notificationRouterCelExpression: String
  advancedFilterExpression: String
  queryFilterJSON: String
}

"""
NotificationRouterFilterConfigInput is the input structure for creating a new filter configuration.
"""
input NotificationRouterFilterConfigInput
  @join__type(graph: NOTIFICATION_ROUTER)
{
  notificationRouterCelExpression: String
  advancedFilterExpression: String
  queryFilter: NotificationRouterQueryFilterInput
}

"""The available examples for the router config"""
type NotificationRouterFilterExamples
  @join__type(graph: NOTIFICATION_ROUTER)
{
  celExamples: [NotificationRouterCelExample!]!
}

"""Represents the notification routing filters input"""
input NotificationRouterFilterInput
  @join__type(graph: NOTIFICATION_ROUTER)
{
  and: [NotificationRouterFieldFilterInput!]
  or: [NotificationRouterFieldFilterInput!]
}

"""
NotificationRouterIntegrationConfig is the structure for the integration configuration.
"""
type NotificationRouterIntegrationConfig
  @join__type(graph: NOTIFICATION_ROUTER)
{
  integration: Integration
  destinationInfo: NotificationDestinationInfo
  notificationRouterIntegrationID: UUID!
  notificationRouterIntegration: Integration
  notificationRouterTemplateID: String
  notificationRouterDestinationInfo: NotificationDestinationConfiguration
}

"""
NotificationRouterIntegrationConfigInput is the input structure for creating a new integration configuration.
"""
input NotificationRouterIntegrationConfigInput
  @join__type(graph: NOTIFICATION_ROUTER)
{
  notificationRouterIntegrationID: UUID!
  notificationRouterTemplateID: String
  users: [UUID!]
  roles: [String!]
  externalEmails: [String!]
}

"""
NotificationRouterIntegrationConfigurationInput is the input structure for creating a new integration configuration.
"""
input NotificationRouterIntegrationConfigurationInput
  @join__type(graph: NOTIFICATION_ROUTER)
{
  integrationId: UUID!
  emailTemplate: NotificationRouterEmailTemplateInput
  zoomTeamChatTemplate: NotificationRouterZoomTeamChatTemplateInput
}

"""A template associated with an integration"""
union NotificationRouterIntegrationTemplate
  @join__type(graph: NOTIFICATION_ROUTER)
  @join__unionMember(graph: NOTIFICATION_ROUTER, member: "NotificationRouterEmailTemplate")
  @join__unionMember(graph: NOTIFICATION_ROUTER, member: "NotificationRouterZoomTeamChatTemplate")
 = NotificationRouterEmailTemplate | NotificationRouterZoomTeamChatTemplate

"""Represents the notification routing configuration order input"""
input NotificationRouterOrderInput
  @join__type(graph: NOTIFICATION_ROUTER)
{
  field: NotificationRoutingConfigurationsField!
  direction: OrderDirection!
}

input NotificationRouterQueryFilterInput
  @join__type(graph: NOTIFICATION_ROUTER)
{
  queryFilterJSON: String!
  schema: String!
}

"""Represents a string filter"""
input NotificationRouterStringFilterInput
  @join__type(graph: NOTIFICATION_ROUTER)
{
  eq: String
  contains: String
  in: [String!]
}

"""Represents a string match filter"""
input NotificationRouterStringMatchFilterInput
  @join__type(graph: NOTIFICATION_ROUTER)
{
  eq: String
  in: [String!]
}

"""A Zoom Team Chat integration type template"""
type NotificationRouterZoomTeamChatTemplate
  @join__type(graph: NOTIFICATION_ROUTER)
{
  payload: String!
}

input NotificationRouterZoomTeamChatTemplateInput
  @join__type(graph: NOTIFICATION_ROUTER)
{
  payload: String!
}

"""
NotificationRoutingConfigurationsOrderField represents a notification routing configuration value to order by.
"""
enum NotificationRoutingConfigurationsField
  @join__type(graph: NOTIFICATION_ROUTER)
{
  name @join__enumValue(graph: NOTIFICATION_ROUTER)
  eventType @join__enumValue(graph: NOTIFICATION_ROUTER)
}

"""
NotificationSlackDestination represents the configuration options for slack destination integration type
"""
type NotificationSlackDestination
  @join__type(graph: NOTIFICATION_ROUTER)
{
  placeHolder: String
}

"""
NotificationZoomDestination represents the configuration options for zoom destination integration type
"""
type NotificationZoomDestination
  @join__type(graph: NOTIFICATION_ROUTER)
{
  placeHolder: String
}

"""OrderDirection represents the ordering direction"""
enum OrderDirection
  @join__type(graph: CLOUD_PROVIDERS)
  @join__type(graph: NOTIFICATION_ROUTER)
  @join__type(graph: SEARCH)
{
  """ASC is the ascending order"""
  ASC @join__enumValue(graph: CLOUD_PROVIDERS) @join__enumValue(graph: NOTIFICATION_ROUTER) @join__enumValue(graph: SEARCH)

  """DESC is the descending order"""
  DESC @join__enumValue(graph: CLOUD_PROVIDERS) @join__enumValue(graph: NOTIFICATION_ROUTER) @join__enumValue(graph: SEARCH)
}

"""Represents a package containing a list of features."""
type Package
  @join__type(graph: ENTITLEMENTS)
{
  id: String!
  name: String!
  tier: String!
  billingCycle: BillingCycle
  expiryDate: DateTime
  plan: Plan
}

"""
PageInfo provides pagination information as defined by [https://relay.dev/graphql/connections.htm](GraphQL Cursor Connections Specification)
"""
type PageInfo
  @join__type(graph: CAOPERATIONS)
  @join__type(graph: CERTIFICATE)
  @join__type(graph: CERTIFICATE_INVENTORY)
  @join__type(graph: CLOUD_PROVIDERS)
  @join__type(graph: CODESIGN)
  @join__type(graph: COMPLIANCE_POLICY)
  @join__type(graph: CUSTOM_REPORTING)
  @join__type(graph: CUSTOM_REPORTING_EXEC)
  @join__type(graph: KEY_INVENTORY)
  @join__type(graph: LEGACY)
  @join__type(graph: MESSAGING)
  @join__type(graph: NOTIFICATION_ROUTER)
  @join__type(graph: OUTAGEDETECTION)
  @join__type(graph: PROVISIONING)
  @join__type(graph: SEARCH)
  @join__type(graph: TAGGING)
  @join__type(graph: TLSPK)
{
  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """Cursor corresponding to the last node in edges."""
  endCursor: String

  """Cursor corresponding to the first node in edges."""
  startCursor: String
}

"""Represents the input parameters for a PagerDuty integration."""
input PagerDutyIntegrationInputParams
  @join__type(graph: MESSAGING)
{
  IntegrationKey: String!
  APIRegion: String
}

"""Represents plan containing a list of features."""
type Plan
  @join__type(graph: ENTITLEMENTS)
{
  id: String!
  name: String!
}

"""Represents information about a plugin."""
type Plugin
  @join__type(graph: PLUGIN_SERVICE, key: "id")
  @join__type(graph: PROVISIONING, key: "id", resolvable: false)
{
  """The plugin unique identifier."""
  id: ID!

  """The definition of the plugin's manifest."""
  manifest: JSON @join__field(graph: PLUGIN_SERVICE)

  """The name of the plugin."""
  name: String @join__field(graph: PLUGIN_SERVICE)
}

type PolicyViolation
  @join__type(graph: TLSPK)
{
  id: ID!
  message: String!
  description: String
  remidiation: String
  code: String!
}

"""Product Roles"""
enum ProductRole
  @join__type(graph: LEGACY)
{
  """Guest"""
  GUEST @join__enumValue(graph: LEGACY)

  """PKI Administrator"""
  PKI_ADMIN @join__enumValue(graph: LEGACY)

  """Resource Owner"""
  RESOURCE_OWNER @join__enumValue(graph: LEGACY)
}

type ProductRoles
  @join__type(graph: LEGACY)
{
  outageDetection: [ProductRole!]
}

"""Certificate public key information"""
union PublicKeyInformation
  @join__type(graph: CERTIFICATE_INVENTORY)
  @join__unionMember(graph: CERTIFICATE_INVENTORY, member: "RSAKeyInfo")
  @join__unionMember(graph: CERTIFICATE_INVENTORY, member: "ECKeyInfo")
  @join__unionMember(graph: CERTIFICATE_INVENTORY, member: "DSAKeyInfo")
  @join__unionMember(graph: CERTIFICATE_INVENTORY, member: "GenericKeyInfo")
 = RSAKeyInfo | ECKeyInfo | DSAKeyInfo | GenericKeyInfo

"""Identifies a certificate's public key information type"""
enum PublicKeyInformationType
  @join__type(graph: SEARCH)
{
  RSAKeyInfo @join__enumValue(graph: SEARCH)
  ECKeyInfo @join__enumValue(graph: SEARCH)
  DSAKeyInfo @join__enumValue(graph: SEARCH)
  GenericKeyInfo @join__enumValue(graph: SEARCH)
}

input PublicKeyInformationTypeFilter
  @join__type(graph: SEARCH)
{
  """The string value we want to match"""
  eq: PublicKeyInformationType

  """The string value we don't want to match"""
  neq: PublicKeyInformationType

  """
  The list of strings that we want to assert whether the string value is included in the provided list
  """
  in: [PublicKeyInformationType!]

  """
  The boolean value that we want to assert whether the field is null or not
  """
  hasValue: Boolean
}

"""The query root of Venafi Control Plane GraphQL interface."""
type Query
  @join__type(graph: CAOPERATIONS)
  @join__type(graph: CERTIFICATE)
  @join__type(graph: CERTIFICATE_INVENTORY)
  @join__type(graph: CLOUD_PROVIDERS)
  @join__type(graph: CODESIGN)
  @join__type(graph: COMPLIANCE_POLICY)
  @join__type(graph: COMPUTED_FIELDS)
  @join__type(graph: CUSTOM_REPORTING)
  @join__type(graph: CUSTOM_REPORTING_EXEC)
  @join__type(graph: DISCOVERY)
  @join__type(graph: ENTITLEMENTS)
  @join__type(graph: INTEGRATIONS)
  @join__type(graph: KEY_INVENTORY)
  @join__type(graph: LEGACY)
  @join__type(graph: MESSAGING)
  @join__type(graph: NOTIFICATION_ROUTER)
  @join__type(graph: OUTAGEDETECTION)
  @join__type(graph: PLUGIN_SERVICE)
  @join__type(graph: PROVISIONING)
  @join__type(graph: SEARCH)
  @join__type(graph: TAGGING)
  @join__type(graph: TLSPK)
  @join__type(graph: USAGEMETRIC)
{
  """Returns the certificate request with the given id"""
  certificateRequest(id: ID!): CertificateRequest @join__field(graph: CAOPERATIONS)

  """
  Returns a list of certificate authority accounts.
  - after: returns the certificate authority accounts in the list that come after the specified cursor
  - before: returns the certificate authority accounts in the list that come before the specified cursor
  - first: returns the first _n_ certificate authority accounts from the list
  - last: returns the last _n_ certificate authority accounts from the list
  """
  certificateAuthorityAccounts(after: String, before: String, first: Int, last: Int): CertificateAuthorityAccountConnection @join__field(graph: CAOPERATIONS)

  """
  Returns the result for specific bulk certificate revocation approval request. Every request has individual status.
  """
  bulkCertificateRevocationApprovalRequestStatuses(operationId: ID!): [CertificateRevocationApprovalStatusObject] @join__field(graph: CAOPERATIONS)

  """
  Returns a list of trusted CA certificates.
  - after: returns the trusted CA certificates in the list that come after the specified cursor
  - before: returns the trusted CA certificates in the list that come before the specified cursor
  - first: returns the first _n_ trusted CA certificates from the list
  - last: returns the last _n_ trusted CA certificates from the list
  """
  trustedCaCertificates(after: String, before: String, first: Int, last: Int): TrustedCaCertificatesConnection @join__field(graph: CERTIFICATE)

  """Deprecated, use `certificate` instead"""
  getCertificate(fingerprint: ID!): Certificate @join__field(graph: CERTIFICATE_INVENTORY) @deprecated(reason: "Deprecated, use `certificate` instead")

  """
  Deprecated, use `certificates` instead. Get all certificates (no pagination)
  """
  getAllCertificates: [Certificate!] @join__field(graph: CERTIFICATE_INVENTORY) @deprecated(reason: "Deprecated, use `certificates` instead")

  """Returns the certificate with the given fingerprint"""
  certificate(fingerprint: ID!): Certificate @join__field(graph: CERTIFICATE_INVENTORY)

  """
  Get all certificates. The pagination can be either forward or backward. To enable forward pagination, two arguments
  are used: `after` and `first`. To enable backward pagination, two arguments are used: `before` and `last`.
  If arguments for both forward and backward pagination are supplied, forward pagination will be used. If no arguments
  are supplied, it returns the first page of 10 certificates (i.e. defaults `first` to 10). The result is sorted by
  fingerprints in ascending order.
  - after: returns the elements in the list that come after the specified cursor. Defaults to empty string, meaning
           that we return the first page of certificates, if `first` value is supplied
  - first: non-negative integer, denoting the first `n` number of records to return after the `after` cursor value.
           Max value is 100
  - before: returns the elements in the list that come before the specified cursor. By default is the empty string,
            meaning that the results will be the last page, if `last` value is supplied
  - last: non-negative integer, denoting the last `n` number of records to return before the `before` cursor value.
          Max value is 100
  """
  certificates(after: String, before: String, first: Int, last: Int): CertificateConnection @join__field(graph: CERTIFICATE_INVENTORY)

  """
  Retrieves Cloud Providers.
  The pagination can be either forward or backward. To enable forward pagination, two arguments
  are used: `after` and `first`. To enable backward pagination, two arguments are used: `before` and `last`.
  If arguments for both forward and backward pagination are supplied, forward pagination wil be used. If no arguments
  are supplied, it returns the first page of 10 cloud providers (i.e. defaults `first` to 10). The result is sorted by
  the added on date in ascending order.
  - after: returns the elements in the list that come after the specified cursor. Defaults to empty string, meaning
  that we return the first page of cloud providers, if `first` value is supplied
  - first: non-negative integer, denoting the first `n` number of records to return after the `after` cursor value.
  Max value is 100
  - before: returns the elements in the list that come before the specified cursor. By default is the empty string,
  meaning that the results will be the last page, if `last` value is supplied
  - last: non-negative integer, denoting the last `n` number of records to return before the `before` cursor value.
  Max value is 100
  """
  cloudProviders(after: String, before: String, first: Int, last: Int, filter: CloudProviderFilterInput, orderBy: CloudProviderOrderInput): CloudProviderConnection @join__field(graph: CLOUD_PROVIDERS)

  """
  Retrieves Cloud Keystores.
  The pagination can be either forward or backward. To enable forward pagination, two arguments
  are used: `after` and `first`. To enable backward pagination, two arguments are used: `before` and `last`.
  If arguments for both forward and backward pagination are supplied, forward pagination wil be used. If no arguments
  are supplied, it returns the first page of 10 cloud keystores (i.e. defaults `first` to 10). The result is sorted by
  the added on date in ascending order.
  - after: returns the elements in the list that come after the specified cursor. Defaults to empty string, meaning
  that we return the first page of cloud providers, if `first` value is supplied
  - first: non-negative integer, denoting the first `n` number of records to return after the `after` cursor value.
  Max value is 100
  - before: returns the elements in the list that come before the specified cursor. By default is the empty string,
  meaning that the results will be the last page, if `last` value is supplied
  - last: non-negative integer, denoting the last `n` number of records to return before the `before` cursor value.
  Max value is 100
  """
  cloudKeystores(after: String, before: String, first: Int, last: Int, filter: CloudKeystoreFilterInput, orderBy: CloudKeystoreOrderInput): CloudKeystoreConnection @join__field(graph: CLOUD_PROVIDERS)

  """
  Retrieves details for a Cloud Provider (like the available AWS regions)
  """
  cloudProviderDetails(cloudProviderId: UUID!): CloudProviderDetails @join__field(graph: CLOUD_PROVIDERS)

  """
  Retrieves the available AWS regions for a given AWS Organization Account
  """
  awsAccountRegions(cloudProviderId: UUID!, accountID: String!): AWSAccountRegions @join__field(graph: CLOUD_PROVIDERS)

  """
  Retrieves details for all KeyVaults assigned to the Azure subscriptionId provided
  """
  azureKeyVaultDetails(cloudProviderId: UUID!, subscriptionId: String): [AzureKeyVault] @join__field(graph: CLOUD_PROVIDERS)

  """Retrieves available locations for the project name provided"""
  gcpProjectLocations(cloudProviderId: UUID!, projectId: String): [GCPLocation] @join__field(graph: CLOUD_PROVIDERS)

  """Retrieves machine identities for a Cloud Keystore"""
  cloudKeystoreMachineIdentities(cloudKeystoreId: UUID!): [MachineIdentity]! @join__field(graph: CLOUD_PROVIDERS) @deprecated(reason: "Deprecated, use `cloudMachineIdentities` instead")

  """
  Retrieves machine identities for a Cloud Keystore.
  The pagination can be either forward or backward. To enable forward pagination, two arguments
  are used: `after` and `first`. To enable backward pagination, two arguments are used: `before` and `last`.
  If arguments for both forward and backward pagination are supplied, forward pagination wil be used. If no arguments
  are supplied, it returns the first page of 10 machine identities (i.e. defaults `first` to 10). The result is sorted by
  the added on date in descending order.
  - after: returns the elements in the list that come after the specified cursor. Defaults to empty string, meaning
  that we return the first page of certificates, if `first` value is supplied
  - first: non-negative integer, denoting the first `n` number of records to return after the `after` cursor value.
  Max value is 1000
  - before: returns the elements in the list that come before the specified cursor. By default is the empty string,
  meaning that the results will be the last page, if `last` value is supplied
  - last: non-negative integer, denoting the last `n` number of records to return before the `before` cursor value.
  Max value is 1000
  """
  cloudMachineIdentities(after: String, before: String, first: Int, last: Int, filter: CloudMachineIdentitiesFilterInput): MachineIdentityConnection @join__field(graph: CLOUD_PROVIDERS)

  """Returns the currently active CodeSign Protect Cloud configuration."""
  codeSignConfiguration: CodeSignConfiguration @join__field(graph: CODESIGN)

  """Retrieve a list of Signing Keys."""
  codeSignSigningKeys(
    """
    Returns the Signing Keys in the list that come after the specified cursor
    """
    after: String

    """
    returns the Signing Keys in the list that come before the specified cursor
    """
    before: String

    """returns the first _n_ Signing Keys from the list"""
    first: Int

    """returns the last _n_ Signing Keys from the list"""
    last: Int
  ): CodeSignSigningKeyConnection @join__field(graph: CODESIGN)

  """Retrieve a SigningKey by ID."""
  codeSignSigningKey(id: ID!): CodeSignSigningKey @join__field(graph: CODESIGN)

  """Retrieve a SigningKey by name."""
  codeSignSigningKeyByName(name: String!): CodeSignSigningKey @join__field(graph: CODESIGN)

  """
  SearchCompliancePolicies retrieves a list of compliance policies applying the filters.
  """
  searchCompliancePolicies(
    """After is used for pagination after a cursor"""
    after: String

    """Before is used for pagination before a cursor"""
    before: String

    """First is used for pagination of what the first element should be"""
    first: Int

    """Last is used for pagination of what the last element should be"""
    last: Int

    """Filter is used for search to return a specific set of data"""
    filter: CompliancePolicySearchFilterInput

    """OrderBy is used for sorting by fields and direction"""
    orderBy: [CompliancePolicyOrderInput!]
  ): CompliancePolicyConnection! @join__field(graph: COMPLIANCE_POLICY)

  """
  CompliancePolicy retrieves a compliance policy associated with the ID provided
  """
  compliancePolicy(id: UUID!): CompliancePolicy @join__field(graph: COMPLIANCE_POLICY)

  """
  CompliancePoliciesSummary retrieves a summary of all the clusters, detailing their respective counts and current statuses.
  """
  compliancePoliciesSummary: CompliancePoliciesSummary @join__field(graph: COMPLIANCE_POLICY)

  """
  Get all report definitions.
  The pagination can be either forward or backward.
  To enable forward pagination, two arguments are used: `after` and `first`.
  To enable backward pagination, two arguments are used: `before` and `last`.
  
  When arguments for both forward and backward pagination are supplied, forward pagination will be used.
  When no arguments are supplied, it returns the first page of 10 reports (i.e. defaults `first` to 10).
  """
  searchReportDefinition(after: String, before: String, first: Int, last: Int, filter: ReportDefinitionFilterInput, orderBy: ReportDefinitionOrderInput): ReportDefinitionConnection @join__field(graph: CUSTOM_REPORTING)

  """Get report definition by id."""
  reportDefinition(id: UUID!): ReportDefinition @join__field(graph: CUSTOM_REPORTING)

  """Get the data contract to build the query"""
  dataContract: String @join__field(graph: CUSTOM_REPORTING)

  """Get a link url to download the report"""
  reportDownloadDetails(id: UUID!): ReportDownload @join__field(graph: CUSTOM_REPORTING)

  """Get all custom report objects."""
  customReportObjects(input: CustomReportObjectsInput): [CustomReportObject!]! @join__field(graph: CUSTOM_REPORTING_EXEC)

  """Get report preview."""
  reportPreview(input: ReportPreviewInput!): ReportPreviewConnection @join__field(graph: CUSTOM_REPORTING_EXEC)
  entitlement: Entitlement @join__field(graph: ENTITLEMENTS)
  networkDiscoveries: [NetworkDiscovery!] @join__field(graph: INTEGRATIONS)

  """
  Get a Key Pair by ID. The storage location ID where the key is stored is required.
  """
  keyPair(keyPairId: ID!, locationId: ID!): KeyPair @join__field(graph: KEY_INVENTORY)

  """Get a specific key storage location by ID"""
  keyStorageLocation(id: ID!): KeyStorageLocation @join__field(graph: KEY_INVENTORY)

  """Get a list of all available storage locations available"""
  keyStorageLocations(
    """returns the locations in the list that come after the specified cursor"""
    after: String

    """
    returns the locations in the list that come before the specified cursor
    """
    before: String

    """returns the first _n_ locations from the list"""
    first: Int

    """returns the last _n_ locations from the list"""
    last: Int
  ): KeyStorageLocationsConnection @join__field(graph: KEY_INVENTORY)

  """Retrieve a list of all users, service accounts and teams."""
  identities(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): IdentityConnection @join__field(graph: LEGACY)

  """Retrieve a list of all users."""
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): UserConnection @join__field(graph: LEGACY)

  """Retrieve a list of all teams."""
  teams(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Returns the teams that match the team filter input"""
    filter: TeamFilterInput
  ): TeamConnection @join__field(graph: LEGACY)
  serviceAccounts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ServiceAccountConnection @join__field(graph: LEGACY)
  userActiveApiKey: String @join__field(graph: LEGACY)
  integrationTypes(after: UUID, before: UUID, first: Int, last: Int, orderBy: IntegrationOrderBy! = UUID): IntegrationTypeConnection! @join__field(graph: MESSAGING)
  integrations(after: UUID, before: UUID, first: Int, last: Int, orderBy: IntegrationOrderBy! = UUID): IntegrationConnection! @join__field(graph: MESSAGING)
  integration(id: UUID!): Integration @join__field(graph: MESSAGING)
  searchExternalEmailRecipients(after: String, before: String, first: Int, last: Int, filter: ExternalEmailRecipientFilterInput, orderBy: ExternalEmailRecipientOrderBy! = address): ExternalEmailRecipientConnection! @join__field(graph: MESSAGING)
  externalEmailRecipient(address: String!): ExternalEmailRecipient @join__field(graph: MESSAGING)
  notificationRoutingConfiguration(id: UUID!): NotificationRouter @join__field(graph: NOTIFICATION_ROUTER)
  searchNotificationRoutingConfigurations(before: String, after: String, first: Int, last: Int, filter: NotificationRouterFilterInput, orderBy: NotificationRouterOrderInput): NotificationRouterConnection @join__field(graph: NOTIFICATION_ROUTER)
  searchEventTypes(before: String, after: String, first: Int, last: Int, filter: NotificationRouterEventTypeFilterInput): NotificationRouterEventTypeConnection @join__field(graph: NOTIFICATION_ROUTER)
  getRoutingConfigFilterExamplesByEventType(eventTypeId: String!): NotificationRouterFilterExamples @join__field(graph: NOTIFICATION_ROUTER)
  getDefaultNotificationTemplate(eventTypeId: String!, integrationType: String!): NotificationRouterIntegrationTemplate @join__field(graph: NOTIFICATION_ROUTER)
  getCertExpActiveThresholds: NotificationActiveThresholds @join__field(graph: NOTIFICATION_ROUTER)

  """
  Retrieve a list of applications.
  - after: returns the applications in the list that come after the specified cursor
  - before: returns the applications in the list that come before the specified cursor
  - first: returns the first _n_ applications from the list
  - last: returns the last _n_ applications from the list
  """
  applications(after: String, before: String, first: Int, last: Int): ApplicationConnection @join__field(graph: OUTAGEDETECTION)

  """
  Search certificates repository. The pagination can be either forward or backward. To enable forward pagination, two
  arguments are used: 'after' and 'first'. To enable backward pagination, two arguments are used: 'before' and 'last'.
  If arguments for both forward and backward pagination are supplied, forward pagination wil be used. If no arguments
  are supplied, it returns the first page of 10 certificates (i.e. defaults 'first' to 10). The result is sorted by
  fingerprints in ascending order.
  - after: returns the elements in the list that come after the specified cursor. Defaults to empty string, meaning
  that we return the first page of certificates, if 'first' value is supplied
  - first: non-negative integer, denoting the first 'n' number of records to return after the 'after' cursor value.
  Max value is 100
  - before: returns the elements in the list that come before the specified cursor. By default is the empty string,
  meaning that the results will be the last page, if 'last' value is supplied
  - last: non-negative integer, denoting the last 'n' number of records to return before the 'before' cursor value.
  Max value is 100
  """
  searchCertificates(after: String, before: String, first: Int, last: Int, filter: SearchCertificateFilterInput, filterOn: CertificateSearchFilterInput, orderBy: [CertificateOrderInput!]): CertificateConnection! @join__field(graph: SEARCH)

  """
  Search certificates repository with aggregate bucketing support. The pagination can be either forward or backward. To enable forward pagination, two
  arguments are used: 'after' and 'first'. To enable backward pagination, two arguments are used: 'before' and 'last'.
  If arguments for both forward and backward pagination are supplied, forward pagination will be used. If no arguments
  are supplied, it returns the first page of 10 certificates (i.e. defaults 'first' to 10). The result is sorted by
  fingerprints in ascending order.
  - after: returns the elements in the list that come after the specified cursor. Defaults to empty string, meaning
  that we return the first page of certificates, if 'first' value is supplied
  - first: non-negative integer, denoting the first 'n' number of records to return after the 'after' cursor value.
  Max value is 100
  - before: returns the elements in the list that come before the specified cursor. By default is the empty string,
  meaning that the results will be the last page, if 'last' value is supplied
  - last: non-negative integer, denoting the last 'n' number of records to return before the 'before' cursor value.
  Max value is 100
  - buckets: list of aggregation specifications, each requiring a unique name (containing only alphanumeric characters)
  and an aggregateBy field that defines the aggregation criteria
  """
  searchCertificatesWithAggregates(after: String, before: String, first: Int, last: Int, filterOn: CertificateSearchFilterInput, orderBy: [CertificateOrderInput!]): CertificateConnectionWithAggregates! @join__field(graph: SEARCH)

  """
  Retrieve a list of tags.
  - after: returns the tags in the list that come after the specified cursor
  - before: returns the tags in the list that come before the specified cursor
  - first: returns the first _n_ tags from the list
  - last: returns the last _n_ tags from the list
  """
  tags(after: String, before: String, first: Int, last: Int): TagConnection @join__field(graph: TAGGING)

  """SearchClusters retrieves a list of clusters applying the filters."""
  searchClusters(after: String, before: String, first: Int, last: Int, filter: ClusterFilterInput, orderBy: [ClusterOrderInput!]): ClusterConnection! @join__field(graph: TLSPK)

  """Cluster retrieves one cluster by ID."""
  cluster(id: ID!): Cluster @join__field(graph: TLSPK)

  """Retrieves the list of ClusterCertificateInstallations by cluster ID"""
  clusterCertificateInstallations(clusterID: ID!, after: String, before: String, first: Int, last: Int): ClusterCertificateInstallationConnection @join__field(graph: TLSPK)

  """
  Retrieves a summary of all the clusters, detailing their respective counts and current statuses.
  """
  clustersSummary: TlspkClustersSummary @join__field(graph: TLSPK)

  """
  Retrieves the list of labels contained in an installation:
  * id: The ID of the secret/binding that has the labels/annotations assigned to
  """
  clusterCertificateInstallation(id: ID!): ClusterCertificateInstallation @join__field(graph: TLSPK)
  searchCertManagerIssuers(filter: CertManagerIssuerFilterInput!): CertManagerIssuerConnection! @join__field(graph: TLSPK)
  searchClusterComponents(filter: ClusterComponentFilterInput!): ClusterComponentConnection! @join__field(graph: TLSPK)
  certManagerIssuer(id: ID!): CertManagerIssuer @join__field(graph: TLSPK)
}

"""
RecoverCertificateInput defines the input required for recovering a retired certificate
"""
input RecoverCertificateInput
  @join__type(graph: CERTIFICATE_INVENTORY)
{
  """The fingerprint for the certificate to recover"""
  fingerprint: ID!
}

"""
RecoverCertificatePayload holds the result of recovering a retired certificate
"""
type RecoverCertificatePayload
  @join__type(graph: CERTIFICATE_INVENTORY)
{
  """The fingerprint for the certificate that was recovered"""
  fingerprint: ID!
}

"""
RecoverCertificateInput defines the input required for recovering one or more retired certificates
"""
input RecoverCertificatesInput
  @join__type(graph: CERTIFICATE_INVENTORY)
{
  """List of certificates to recover"""
  certificates: [RecoverCertificateInput!]!

  """
  An optional list of application IDs to associate with the recovered certificates
  """
  applicationIds: [ID!]
}

"""
RelatedCertificateOrderDirection represents the ordering direction for related certificates.
"""
enum RelatedCertificateOrderDirection
  @join__type(graph: CERTIFICATE_INVENTORY)
{
  """ASC is the ascending order"""
  ASC @join__enumValue(graph: CERTIFICATE_INVENTORY)

  """DESC is the descending order"""
  DESC @join__enumValue(graph: CERTIFICATE_INVENTORY)
}

"""
RelatedCertificateOrderField defines the fields that can be used for ordering the related certificates.
"""
enum RelatedCertificateOrderField
  @join__type(graph: CERTIFICATE_INVENTORY)
{
  """Order by field 'fingerprint'"""
  FINGERPRINT @join__enumValue(graph: CERTIFICATE_INVENTORY)

  """Order by field 'archivedTime'"""
  ARCHIVED_TIME @join__enumValue(graph: CERTIFICATE_INVENTORY)

  """Order by field 'isCurrent'"""
  IS_CURRENT @join__enumValue(graph: CERTIFICATE_INVENTORY)
}

"""
RelatedCertificateOrderInput contains the ordering information for the related certificates.
"""
input RelatedCertificateOrderInput
  @join__type(graph: CERTIFICATE_INVENTORY)
{
  field: RelatedCertificateOrderField!
  direction: RelatedCertificateOrderDirection!
}

"""Arguments for the `renewCodeSignObjects` mutation"""
input RenewCodeSignObjectsInput
  @join__type(graph: CODESIGN)
{
  """
  The IDs of each `CodeSignSigningKey` whose cryptographic objects are to be
  renewed/rotated.
  """
  signingKeyIDs: [ID!]!

  """
  The object types to act upon. If omitted, then the operation will
  rotate/renew all of the objects associated with each `CodeSignSigningKey`
  that was specified in the `signingKeyIDs` list.
  """
  objects: [RenewCodeSignObjectsType!]
}

type RenewCodeSignObjectsPayload
  @join__type(graph: CODESIGN)
{
  signingKeys: [CodeSignSigningKey!]
}

"""
The type of cryptographic object that will be affected when triggering a renewal
"""
enum RenewCodeSignObjectsType
  @join__type(graph: CODESIGN)
{
  """
  Asymmetric key pair type. All cryptographic objects linked to each
  key pair will be moved to their corresponding historical list.
  """
  KEY_PAIR @join__enumValue(graph: CODESIGN)

  """X.509 certificate type"""
  CERTIFICATE @join__enumValue(graph: CODESIGN)
}

"""Represents the report definition object"""
type ReportDefinition
  @join__type(graph: CUSTOM_REPORTING)
{
  """The report definition unique identifier."""
  id: UUID!

  """The report name."""
  name: String!

  """The report description."""
  description: String

  """The query to be run for generating the report."""
  query: String!

  """User ID representing the user who created the report."""
  createdBy: UUID!

  """User ID representing the user who updated the report."""
  updatedBy: UUID!

  """The creation date of the report definition."""
  creationDate: DateTime

  """The date the report was last modified."""
  modificationDate: DateTime

  """Information regarding the report's last run if any."""
  lastReportInformation: ReportInformation

  """
  Provides the necessary information to know if the report was executed at least once
  """
  wasExecuted: Boolean!

  """
  Provides the necessary information to know if there is a downloadable report
  """
  isDownloadable: Boolean!

  """Notification router associated with the report"""
  notificationRouter: NotificationRouter

  """The schedule for the report"""
  schedule: ReportSchedule

  """Next run date for the report (if scheduled)"""
  nextRun: DateTime
}

"""A page of custom report results"""
type ReportDefinitionConnection
  @join__type(graph: CUSTOM_REPORTING)
{
  """Current page information."""
  pageInfo: PageInfo!

  """Total number of report definitions (in all pages)."""
  totalCount: Int!

  """Report Definitions in the current page, without cursor."""
  nodes: [ReportDefinition!]

  """Custom reports in the current page, with cursor."""
  edges: [ReportDefinitionEdge!]
}

"""ReportDefinition together with its associated cursor"""
type ReportDefinitionEdge
  @join__type(graph: CUSTOM_REPORTING)
{
  """The report definition."""
  node: ReportDefinition!

  """The cursor for the report definition."""
  cursor: String!
}

"""Represents a report definition enum filter"""
input ReportDefinitionEnumFilterInput
  @join__type(graph: CUSTOM_REPORTING)
{
  eq: ReportQueryRunStatus
}

"""Represents a report definition field filter input"""
input ReportDefinitionFieldFilterInput
  @join__type(graph: CUSTOM_REPORTING)
{
  name: ReportDefinitionStringFilterInput
  createdBy: ReportDefinitionUUIDFilterInput
  status: ReportDefinitionEnumFilterInput
  and: [ReportDefinitionFieldFilterInput!]
  or: [ReportDefinitionFieldFilterInput!]
}

"""Represents the report definition filters input"""
input ReportDefinitionFilterInput
  @join__type(graph: CUSTOM_REPORTING)
{
  and: [ReportDefinitionFieldFilterInput!]
  or: [ReportDefinitionFieldFilterInput!]
}

"""
ReportDefinitionOrderDirection represents the order direction for sorting.
"""
enum ReportDefinitionOrderDirection
  @join__type(graph: CUSTOM_REPORTING)
{
  ASC @join__enumValue(graph: CUSTOM_REPORTING)
  DESC @join__enumValue(graph: CUSTOM_REPORTING)
}

"""
ReportDefinitionOrOrderField represents a report definition value to order by.
"""
enum ReportDefinitionOrderField
  @join__type(graph: CUSTOM_REPORTING)
{
  name @join__enumValue(graph: CUSTOM_REPORTING)
  createdOn @join__enumValue(graph: CUSTOM_REPORTING)
}

"""Represents the report definition order input"""
input ReportDefinitionOrderInput
  @join__type(graph: CUSTOM_REPORTING)
{
  field: ReportDefinitionOrderField!
  direction: ReportDefinitionOrderDirection!
}

"""Represents a string filter"""
input ReportDefinitionStringFilterInput
  @join__type(graph: CUSTOM_REPORTING)
{
  eq: String
  contains: String
  in: [String!]
}

"""Represents a UUID filter"""
input ReportDefinitionUUIDFilterInput
  @join__type(graph: CUSTOM_REPORTING)
{
  in: [UUID!]
}

"""Represents a custom report's download information"""
type ReportDownload
  @join__type(graph: CUSTOM_REPORTING)
{
  """The url for report download of the report's query run."""
  url: String!
}

"""Represents a custom report's execution information"""
type ReportInformation
  @join__type(graph: CUSTOM_REPORTING)
{
  """The report unique identifier."""
  id: UUID!

  """The query to be run for generating the report."""
  query: String!

  """The status of the report's query run."""
  status: ReportQueryRunStatus!

  """UUID for the user who triggered the report generation."""
  runBy: UUID!

  """The start date of the report definition's query run."""
  startDate: DateTime!

  """The completion date of the report definition's query run."""
  completionDate: DateTime

  """The error message for the report if generation failed"""
  errorMessage: String
}

"""A page of report preview results"""
type ReportPreviewConnection
  @join__type(graph: CUSTOM_REPORTING_EXEC)
{
  """The list of fields in the report preview."""
  fieldNames: [String!]!

  """Current page information."""
  pageInfo: PageInfo!

  """Total number of report preview (in all pages)."""
  totalCount: Int!

  """
  Report preview data in the current page, without cursor. Values correspond to fieldNames by index.
  """
  nodes: [[String!]!]

  """Report preview data in the current page, with cursor."""
  edges: [ReportPreviewEdge!]
}

"""Report preview data together with its associated cursor"""
type ReportPreviewEdge
  @join__type(graph: CUSTOM_REPORTING_EXEC)
{
  """The report preview data. Values correspond to fieldNames by index."""
  node: [String!]!

  """The cursor for the report preview."""
  cursor: String!
}

"""reportPreview input."""
input ReportPreviewInput
  @join__type(graph: CUSTOM_REPORTING_EXEC)
{
  """The query to be run for generating the report preview."""
  query: String!
}

"""Represents the status of the report generation"""
enum ReportQueryRunStatus
  @join__type(graph: CUSTOM_REPORTING)
{
  NEW @join__enumValue(graph: CUSTOM_REPORTING)
  PENDING @join__enumValue(graph: CUSTOM_REPORTING)
  IN_PROGRESS @join__enumValue(graph: CUSTOM_REPORTING)
  COMPLETED @join__enumValue(graph: CUSTOM_REPORTING)
  FAILED @join__enumValue(graph: CUSTOM_REPORTING)
  ABORTED @join__enumValue(graph: CUSTOM_REPORTING)
}

type ReportSchedule
  @join__type(graph: CUSTOM_REPORTING)
{
  daily: DailyReportSchedule
  weekly: WeeklyReportSchedule
  monthly: MonthlyReportSchedule
}

input ReportScheduleInput
  @join__type(graph: CUSTOM_REPORTING)
{
  daily: DailyReportScheduleInput
  weekly: WeeklyReportScheduleInput
  monthly: MonthlyReportScheduleInput
}

enum ResourceScope
  @join__type(graph: SEARCH)
  @join__type(graph: TLSPK)
{
  CLUSTER @join__enumValue(graph: SEARCH) @join__enumValue(graph: TLSPK)
  NAMESPACE @join__enumValue(graph: SEARCH) @join__enumValue(graph: TLSPK)
}

enum ResourceStatus
  @join__type(graph: TLSPK)
{
  UNHEALTHY @join__enumValue(graph: TLSPK)
  HEALTHY @join__enumValue(graph: TLSPK)
}

"""
RetireCertificateInput defines the input required for retiring a certificate
"""
input RetireCertificateInput
  @join__type(graph: CERTIFICATE_INVENTORY)
{
  """The fingerprint for the certificate to retire"""
  fingerprint: ID!
}

"""RetireCertificatePayload holds the result of retiring a certificate"""
type RetireCertificatePayload
  @join__type(graph: CERTIFICATE_INVENTORY)
{
  """The fingerprint for the certificate that was retired"""
  fingerprint: ID!
}

"""
RetireCertificatesInput defines the input required for retiring one or more certificates
"""
input RetireCertificatesInput
  @join__type(graph: CERTIFICATE_INVENTORY)
{
  """List of certificates to retire"""
  certificates: [RetireCertificateInput!]!

  """
  Indicate whether to add the certificates to the blocklist as well. If missing, defaults to false
  """
  addToBlocklist: Boolean
}

type Revocation
  @join__type(graph: CAOPERATIONS)
{
  certificateAuthorityAccount: CertificateAuthorityAccount
  status: RevocationStatus
  reason: RevocationReason
  comment: String
  error: ErrorInformation
  user: User
  approvalDetails: ApprovalDetails
}

input RevocationApprovalInformationFilter
  @join__type(graph: SEARCH)
{
  """Includes is used for checking if elements are in list"""
  includes: String

  """Excludes is used for checking if elements are not in list"""
  excludes: String
}

input RevocationFinalApprovalInformationFilter
  @join__type(graph: SEARCH)
{
  """The string value we want to match"""
  eq: String
}

enum RevocationReason
  @join__type(graph: CAOPERATIONS)
{
  UNSPECIFIED @join__enumValue(graph: CAOPERATIONS)
  KEY_COMPROMISE @join__enumValue(graph: CAOPERATIONS)
  AFFILIATION_CHANGED @join__enumValue(graph: CAOPERATIONS)
  SUPERSEDED @join__enumValue(graph: CAOPERATIONS)
  CESSATION_OF_OPERATION @join__enumValue(graph: CAOPERATIONS)
}

"""Indicates the revocation status of a certificate"""
enum RevocationStatus
  @join__type(graph: CAOPERATIONS)
  @join__type(graph: SEARCH)
{
  SUBMITTED @join__enumValue(graph: CAOPERATIONS) @join__enumValue(graph: SEARCH)
  FAILED @join__enumValue(graph: CAOPERATIONS) @join__enumValue(graph: SEARCH)
  PENDING_APPROVAL @join__enumValue(graph: CAOPERATIONS) @join__enumValue(graph: SEARCH)
  PENDING_FINAL_APPROVAL @join__enumValue(graph: CAOPERATIONS) @join__enumValue(graph: SEARCH)
  REJECTED_APPROVAL @join__enumValue(graph: CAOPERATIONS) @join__enumValue(graph: SEARCH)
}

input RevocationStatusFilter
  @join__type(graph: SEARCH)
{
  """The string value we want to match"""
  eq: RevocationStatus

  """
  The boolean value that we want to assert whether the boolean field is null or not
  """
  hasValue: Boolean

  """
  The list of strings that we want to assert whether the string value is included in the provided list
  """
  in: [RevocationStatus!]
}

type RFC822Name
  @join__type(graph: CERTIFICATE_INVENTORY)
  @join__type(graph: CODESIGN)
{
  emailAddress: String!
}

"""Roles"""
enum Role
  @join__type(graph: LEGACY)
{
  """Guest"""
  GUEST @join__enumValue(graph: LEGACY)

  """PKI Administrator"""
  PKI_ADMIN @join__enumValue(graph: LEGACY)

  """Resource Owner"""
  RESOURCE_OWNER @join__enumValue(graph: LEGACY)

  """System Administrator"""
  SYSTEM_ADMIN @join__enumValue(graph: LEGACY)
}

"""RSA public key information"""
type RSAKeyInfo
  @join__type(graph: CERTIFICATE_INVENTORY)
{
  """Strength in bits"""
  strength: Int!
}

enum ScanType
  @join__type(graph: OUTAGEDETECTION)
{
  USER @join__enumValue(graph: OUTAGEDETECTION)
  EXTERNAL @join__enumValue(graph: OUTAGEDETECTION)
  DOMAIN @join__enumValue(graph: OUTAGEDETECTION)
  VALIDATION @join__enumValue(graph: OUTAGEDETECTION)
  SMART_INTERNAL @join__enumValue(graph: OUTAGEDETECTION)
  SMART_EXTERNAL @join__enumValue(graph: OUTAGEDETECTION)
  SMART_VALIDATION_INTERNAL @join__enumValue(graph: OUTAGEDETECTION)
  SMART_VALIDATION_EXTERNAL @join__enumValue(graph: OUTAGEDETECTION)
}

"""Pattern to define the schedule for a service"""
union SchedulerPattern
  @join__type(graph: INTEGRATIONS)
  @join__unionMember(graph: INTEGRATIONS, member: "CronPattern")
  @join__unionMember(graph: INTEGRATIONS, member: "WeeklyPattern")
  @join__unionMember(graph: INTEGRATIONS, member: "MonthlyPattern")
 = CronPattern | WeeklyPattern | MonthlyPattern

"""Type of schedule pattern"""
enum SchedulerPatternRecurrenceType
  @join__type(graph: INTEGRATIONS)
{
  CRON @join__enumValue(graph: INTEGRATIONS)
  DAY_OF_WEEK @join__enumValue(graph: INTEGRATIONS)
  DAY_OF_MONTH @join__enumValue(graph: INTEGRATIONS)
}

"""SearchCertificateFilterInput filter argument for certificate search"""
input SearchCertificateFilterInput
  @join__type(graph: SEARCH)
{
  """filter is a search expression based on the Certificate type"""
  filter: String!
}

"""A representation of an account for a machine"""
type ServiceAccount
  @join__type(graph: CODESIGN, key: "id", resolvable: false)
  @join__type(graph: LEGACY, key: "id")
  @join__type(graph: OUTAGEDETECTION)
  @join__type(graph: TLSPK, key: "id")
{
  """A unique identifier that identifies a specific service account."""
  id: ID!

  """The display name associated with this service account."""
  displayName: String @join__field(graph: LEGACY)

  """A flag representing if the service account is enabled or not."""
  enabled: Boolean @join__field(graph: LEGACY)

  """The team who owns this service account"""
  owner: Team @join__field(graph: LEGACY)

  """Scopes that are assigned to this service account"""
  scopes: [String] @join__field(graph: LEGACY)
  usedByClusters: [Cluster!]! @join__field(graph: TLSPK)
}

"""The connection type for ServiceAccount."""
type ServiceAccountConnection
  @join__type(graph: LEGACY)
{
  """A list of edges"""
  edges: [ServiceAccountEdge!]

  """A list of nodes."""
  nodes: [ServiceAccount!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of service accounts in the connection."""
  totalCount: Int!
}

"""An edge in the ServiceAccountConnection"""
type ServiceAccountEdge
  @join__type(graph: LEGACY)
{
  """A cursor for use in pagination"""
  cursor: ID!

  """The item at the end of the edge"""
  node: ServiceAccount!
}

"""Type of integration service"""
enum ServiceType
  @join__type(graph: INTEGRATIONS)
{
  """Basic certificate and key discovery service"""
  BASIC_DISCOVERY @join__enumValue(graph: INTEGRATIONS)

  """
  Enhanced certificate and key discovery service with additional capabilities
  """
  ENHANCED_DISCOVERY @join__enumValue(graph: INTEGRATIONS)

  """Internet-based discovery service"""
  INTERNET_DISCOVERY @join__enumValue(graph: INTEGRATIONS)

  """External smart discovery service"""
  SMART_DISCOVERY_EXTERNAL @join__enumValue(graph: INTEGRATIONS)
}

"""Indicates the signature hash algorithm of a certificate"""
enum SignatureHashAlgorithm
  @join__type(graph: SEARCH)
{
  GOST_R3410_2001 @join__enumValue(graph: SEARCH)
  GOST_R3410_94 @join__enumValue(graph: SEARCH)
  GOST_R3411_2012 @join__enumValue(graph: SEARCH)
  MD2 @join__enumValue(graph: SEARCH)
  MD5 @join__enumValue(graph: SEARCH)
  SHA1 @join__enumValue(graph: SEARCH)
  SHA224 @join__enumValue(graph: SEARCH)
  SHA256 @join__enumValue(graph: SEARCH)
  SHA384 @join__enumValue(graph: SEARCH)
  SHA512 @join__enumValue(graph: SEARCH)
  SHA3_256 @join__enumValue(graph: SEARCH)
  SHA3_512 @join__enumValue(graph: SEARCH)
  SM3 @join__enumValue(graph: SEARCH)
  RIPEMD160 @join__enumValue(graph: SEARCH)
  UNKNOWN @join__enumValue(graph: SEARCH)
}

input SignatureHashAlgorithmFilter
  @join__type(graph: SEARCH)
{
  """The string value we want to match"""
  eq: SignatureHashAlgorithm

  """
  The list of strings that we want to assert whether the string value is included in the provided list
  """
  in: [SignatureHashAlgorithm!]
}

type Status
  @join__type(graph: TLSPK)
{
  """
  Status is the state in which the kubernetes resource is in the cluster, (Resource.status.conditions[status]).
  """
  status: ResourceStatus!

  """
  Message is the human readable message for a kubernetes resource present in the cluster, (Resource.status.conditions[message]).
  """
  message: String!

  """
  LastStatusChangeOn is the timestamp of the last transaction change on the kubernetes resource, (Resource.status.conditions[lastTransitionTime]).
  """
  lastStatusChangeOn: String!

  """
  Yaml is the yaml representation of the entire kubernetes resource status.
  """
  yaml: String!
}

"""Identifies certificate's subject alternative name type"""
enum SubjectAlternativeNameType
  @join__type(graph: SEARCH)
{
  RFC822Name @join__enumValue(graph: SEARCH)
  DNSName @join__enumValue(graph: SEARCH)
  DirectoryName @join__enumValue(graph: SEARCH)
  EdiPartyName @join__enumValue(graph: SEARCH)
  UniformResourceIdentifier @join__enumValue(graph: SEARCH)
  IPAddress @join__enumValue(graph: SEARCH)
}

input SubjectAlternativeNameTypeFilter
  @join__type(graph: SEARCH)
{
  """The subject alternative name type value we want to match"""
  eq: SubjectAlternativeNameType

  """The subject alternative name type value we don't want to match"""
  neq: SubjectAlternativeNameType

  """
  The list of subject alternative name types that we want to assert whether the string value is included in the provided list
  """
  in: [SubjectAlternativeNameType!]

  """
  The boolean value that we want to assert whether the field is null or not
  """
  hasValue: Boolean
}

"""System Roles"""
enum SystemRole
  @join__type(graph: LEGACY)
{
  """System Administrator"""
  SYSTEM_ADMIN @join__enumValue(graph: LEGACY)
}

"""Tag is used in matching rules and displays the key name"""
type Tag
  @join__type(graph: COMPLIANCE_POLICY)
  @join__type(graph: TAGGING)
{
  """Name refers to the name of the tag"""
  name: String!
}

type TagConnection
  @join__type(graph: TAGGING)
{
  pageInfo: PageInfo!
  totalCount: Int!
  nodes: [Tag!]
  edges: [TagEdge]
}

type TagEdge
  @join__type(graph: TAGGING)
{
  node: Tag!
  cursor: String!
}

"""TagMatchingRule wraps the Tag type to add included to it"""
type TagMatchingRule
  @join__type(graph: COMPLIANCE_POLICY)
{
  """Tag is the reference to the tag to include or exclude"""
  tag: Tag

  """
  Included states whether this tag should be included in matching for resources
  """
  included: Boolean
}

type Targets
  @join__type(graph: DISCOVERY)
{
  ipRanges: [String!]
  fqdns: [String!]
  ports: [String!]
  domains: [String!]
}

"""A team of users"""
type Team
  @join__type(graph: CLOUD_PROVIDERS)
  @join__type(graph: CODESIGN, key: "id", resolvable: false)
  @join__type(graph: LEGACY, key: "id")
  @join__type(graph: NOTIFICATION_ROUTER, key: "id", resolvable: false)
  @join__type(graph: OUTAGEDETECTION)
{
  """A unique identifier that identifies a specific team."""
  id: ID!

  """The name of the team."""
  name: String! @join__field(graph: LEGACY)

  """The accounts that belogn to this team."""
  members(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): UserConnection! @join__field(graph: LEGACY)
}

"""The connection type for Team"""
type TeamConnection
  @join__type(graph: LEGACY)
{
  """A list of edges."""
  edges: [TeamEdge!]

  """A list of nodes."""
  nodes: [Team!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of teams in the connection."""
  totalCount: Int!
}

"""An edge in a TeamConnection."""
type TeamEdge
  @join__type(graph: LEGACY)
{
  """A cursor for use in pagination."""
  cursor: ID!

  """The item at the end of the edge."""
  node: Team!
}

input TeamFilterAttributesInput
  @join__type(graph: LEGACY)
{
  """Filter by user id within team's members"""
  userId: TeamListFilter
}

input TeamFilterInput
  @join__type(graph: LEGACY)
{
  """Filter by matching ALL the supplied filter inputs"""
  and: [TeamFilterAttributesInput!]
}

input TeamListFilter
  @join__type(graph: LEGACY)
{
  """The string value that we want to assert whether it is within the list"""
  includes: String
}

"""TermAggregateResult represents a single bucket in a terms aggregation"""
type TermAggregateResult
  @join__type(graph: SEARCH)
{
  """The bucket's key or term value"""
  value: String!

  """Number of documents in this bucket"""
  count: Int!
}

"""TermAggregates represents a group of term-based aggregation buckets"""
type TermAggregates
  @join__type(graph: SEARCH)
{
  """Name identifies this group of buckets"""
  name: String!

  """The individual buckets within this aggregation"""
  buckets: [TermAggregateResult!]!
}

enum TlspkCertManagerIssuerKind
  @join__type(graph: TLSPK)
{
  CLUSTER @join__enumValue(graph: TLSPK)
  NAMESPACE @join__enumValue(graph: TLSPK)
}

type TlspkClustersCertificatesOverviewCategory
  @join__type(graph: TLSPK)
{
  id: String
  count: Int
}

type TlspkClustersCertificatesOverviewWidget
  @join__type(graph: TLSPK)
{
  """
  totalCount is the number of long, short and ultra short lived certificates found in clusters
  """
  totalCount: Int

  """
  categories is the list of long, short and ultra short lived certificates found in clusters
  """
  categories: [TlspkClustersCertificatesOverviewCategory]
}

type TlspkClustersCertManagerIssuersType
  @join__type(graph: TLSPK)
{
  issuerType: String
  count: Int
  kind: TlspkCertManagerIssuerKind
}

type TlspkClustersCertManagerIssuersWidget
  @join__type(graph: TLSPK)
{
  """
  totalCount is the number of venafi and non-venafi cert-manager issuers found in clusters
  """
  totalCount: Int

  """
  nonVenafiIssuers is the number of non-venafi cert-manager issuers found in clusters
  """
  nonVenafiIssuers: Int

  """types is the list of venafi and non-venafi issuers found in clusters"""
  types: [TlspkClustersCertManagerIssuersType]
}

type TlspkClustersIngressesCategory
  @join__type(graph: TLSPK)
{
  id: String
  count: Int
}

type TlspkClustersIngressesWidget
  @join__type(graph: TLSPK)
{
  """totalCount is the number of ingresses found in clusters"""
  totalCount: Int

  """
  unhealthy is the number of ingresses found in clusters that have certificates that are expired or soon to expire
  """
  unhealthy: Int

  """
  categories is the list of ingresses found in clusters that have certificates that are expired or soon to expire
  """
  categories: [TlspkClustersIngressesCategory]
}

type TlspkClustersLLCertsNotManagedByCertManagerCategory
  @join__type(graph: TLSPK)
{
  id: String
  count: Int
}

type TlspkClustersLLCertsNotManagedByCertManagerWidget
  @join__type(graph: TLSPK)
{
  """totalCount is the number of long lived certificates found in clusters"""
  totalCount: Int

  """
  notManagedByCertManager is the number of long lived certfiicates found in clusters that are not managed by Cert-Manager
  """
  notManagedByCertManager: Int

  """
  categories is the list of long lived certificates found in clusters that are either managed by Cert-Manager or not managed by Cert-Manager
  """
  categories: [TlspkClustersLLCertsNotManagedByCertManagerCategory]
}

type TlspkClustersLongLivedCertificatesCategory
  @join__type(graph: TLSPK)
{
  id: String
  count: Int
}

type TlspkClustersLongLivedCertificatesWidget
  @join__type(graph: TLSPK)
{
  """totalCount is the number of long lived certificates found in clusters"""
  totalCount: Int

  """
  unhealthy is the number of long lived certificates found in clusters that are expired, soon to expire or not managed by cert manager
  """
  unhealthy: Int

  """
  categories is the list of long lived certificates found in clusters that are expired, soon to expire or not managed by cert manager
  """
  categories: [TlspkClustersLongLivedCertificatesCategory]
}

type TlspkClustersOverviewCategory
  @join__type(graph: TLSPK)
{
  id: String
  count: Int
}

type TlspkClustersOverviewWidget
  @join__type(graph: TLSPK)
{
  """totalCount is the number of clusters with any status except DELETED"""
  totalCount: Int

  """
  unhealthy is the number of clusters with status INACTIVE or WAITING_FOR_FIRST_CONTACT
  """
  unhealthy: Int

  """
  categories is the list of clusters with status INACTIVE or WAITING_FOR_FIRST_CONTACT
  """
  categories: [TlspkClustersOverviewCategory]
}

type TlspkClustersSummary
  @join__type(graph: TLSPK)
{
  clusters: TlspkClustersOverviewWidget
  clustersCertificates: TlspkClustersCertificatesOverviewWidget
  clustersLongLivedCertificates: TlspkClustersLongLivedCertificatesWidget
  clustersLLCertsNotManagedByCertManager: TlspkClustersLLCertsNotManagedByCertManagerWidget
  ingresses: TlspkClustersIngressesWidget
  certManagerIssuers: TlspkClustersCertManagerIssuersWidget
}

enum TLSProtocol
  @join__type(graph: OUTAGEDETECTION)
{
  """SSL v2"""
  SSL_V2 @join__enumValue(graph: OUTAGEDETECTION)

  """SSL v3"""
  SSL_V3 @join__enumValue(graph: OUTAGEDETECTION)

  """TLS v1.0"""
  TLS_V1 @join__enumValue(graph: OUTAGEDETECTION)

  """TLS v1.1"""
  TLS_V1_1 @join__enumValue(graph: OUTAGEDETECTION)

  """TLS v1.2"""
  TLS_V1_2 @join__enumValue(graph: OUTAGEDETECTION)

  """TLS v1.3"""
  TLS_V1_3 @join__enumValue(graph: OUTAGEDETECTION)
}

type TLSServerEndpoint
  @join__type(graph: OUTAGEDETECTION)
{
  id: ID!
  scanType: ScanType!
  ipAddress: IP!
  port: Int!
  serverName: FQDN
  lastSeenTime: DateTime!
  tlsProtocols: [TLSProtocol!]
  deploymentStatus: DeploymentStatus
  chainValidationErrors: [ValidationError!]
  tlsValidationError: ValidationError
  lastAttemptTime: DateTime
}

type TLSServerEndpointConnection
  @join__type(graph: COMPUTED_FIELDS)
  @join__type(graph: OUTAGEDETECTION)
{
  tlsServerEndpointsErrorCount: ValidationErrorCount!
  pageInfo: PageInfo! @join__field(graph: OUTAGEDETECTION)
  totalCount: Int! @join__field(graph: OUTAGEDETECTION)
  nodes: [TLSServerEndpoint!] @join__field(graph: OUTAGEDETECTION)
  edges: [TLSServerEndpointEdge] @join__field(graph: OUTAGEDETECTION)
}

type TLSServerEndpointEdge
  @join__type(graph: OUTAGEDETECTION)
{
  node: TLSServerEndpoint!
  cursor: String!
}

type TLSValidationError implements ValidationError
  @join__implements(graph: OUTAGEDETECTION, interface: "ValidationError")
  @join__type(graph: OUTAGEDETECTION)
{
  message: String
  arguments: [String!]
  errorType: TLSValidationErrorType
}

"""
Identifies the tls validation error type associated with a tls server endpoint
"""
enum TLSValidationErrorType
  @join__type(graph: OUTAGEDETECTION)
  @join__type(graph: SEARCH)
{
  INVALID_CERTIFICATE_FOUND @join__enumValue(graph: OUTAGEDETECTION) @join__enumValue(graph: SEARCH)
  OLD_VERSION_CERTIFICATE_FOUND @join__enumValue(graph: OUTAGEDETECTION) @join__enumValue(graph: SEARCH)
  UNEXPECTED_CERTIFICATE_FOUND @join__enumValue(graph: OUTAGEDETECTION) @join__enumValue(graph: SEARCH)
  NO_CERTIFICATE_PRESENTED @join__enumValue(graph: OUTAGEDETECTION) @join__enumValue(graph: SEARCH)
  TARGET_UNREACHABLE @join__enumValue(graph: OUTAGEDETECTION) @join__enumValue(graph: SEARCH)
  HOSTNAME_NOT_RESOLVABLE @join__enumValue(graph: OUTAGEDETECTION) @join__enumValue(graph: SEARCH)
  UNKNOWN_ERROR @join__enumValue(graph: OUTAGEDETECTION) @join__enumValue(graph: SEARCH)
}

input TLSValidationErrorTypeFilter
  @join__type(graph: SEARCH)
{
  """The tls validation error type value we want to match"""
  eq: TLSValidationErrorType

  """The tls validation error type value we don't want to match"""
  neq: TLSValidationErrorType

  """
  The list of tls validation error types that we want to assert whether the string value is included in the provided list
  """
  in: [TLSValidationErrorType!]

  """
  The boolean value that we want to assert whether the field is null or not
  """
  hasValue: Boolean
}

"""
TrustedCaCertificate is the trusted CA certificate that is trusted by the user for use in issuing certificates
"""
type TrustedCaCertificate
  @join__type(graph: CERTIFICATE, key: "fingerprint")
  @join__type(graph: COMPLIANCE_POLICY, key: "fingerprint", resolvable: false)
{
  """Fingerprint of the trusted CA certificate"""
  fingerprint: ID!

  """
  CertificateType defines what type of certificate the trusted CA cert is
  """
  certificateType: CertificateType! @join__field(graph: CERTIFICATE)

  """Source defines how the certificate was loaded into the system"""
  source: TrustedCACertificateSource! @join__field(graph: CERTIFICATE)

  """SubjectCN of the trusted CA certificate"""
  subjectCN: [String]! @join__field(graph: CERTIFICATE)
}

"""
TrustedCaCertificatesConnection is used to provide pagination to trusted CA certificates
"""
type TrustedCaCertificatesConnection
  @join__type(graph: CERTIFICATE)
{
  """PageInfo is information for pagination"""
  pageInfo: PageInfo!

  """TotalCount of trusted CA certificates"""
  totalCount: Int!

  """Nodes of the trusted CA certificate connection for paginated results"""
  nodes: [TrustedCaCertificate!]

  """Edges of the trusted CA certificate connection for linking"""
  edges: [TrustedCaCertificatesEdge]
}

"""
TrustedCaCertificatesEdge is used for the TrustedCaCertificatesConnection edges
"""
type TrustedCaCertificatesEdge
  @join__type(graph: CERTIFICATE)
{
  """Node of the trusted CA certificate connection"""
  node: TrustedCaCertificate!

  """Cursor is the link to the next edge"""
  cursor: String!
}

"""
TrustedCACertificateSource defines how the certificate was loaded into the system
"""
enum TrustedCACertificateSource
  @join__type(graph: CERTIFICATE)
{
  GLOBALLY_TRUSTED @join__enumValue(graph: CERTIFICATE)
  USER_PROVIDED @join__enumValue(graph: CERTIFICATE)
}

"""
TrustedCAEvaluationRule wraps the Trusted CA type to add included to it
"""
type TrustedCAEvaluationRule
  @join__type(graph: COMPLIANCE_POLICY)
{
  """TrustedCA is the reference to the Trusted CA to include or exclude"""
  trustedCA: TrustedCaCertificate

  """
  Included states whether this Trusted CA should be included in matching for resources
  """
  included: Boolean
}

type UniformResourceIdentifier
  @join__type(graph: CERTIFICATE_INVENTORY)
  @join__type(graph: CODESIGN)
{
  uri: URI!
}

"""
Code Sign X.509 Certificate Values Input

This object is used to specify the options and parameters that should be used
when issuing (or renewing) a `Certificate` object for this `CodeSignSigningKey`.

Certificate issuance requires a `KeyPair` and will use the object resulting from
the `CodeSignKeyPairValues` object on the same `CodeSignSigningKey` with a
matching name.

Any value omitted from this input will preserve the previously stored value.

Note that any modifications made to a `CodeSignCertificateValues` object will
not modify any already issued `Certificate` objects and will only take effect
when the `Certificate` is initially issued or renewed.
"""
input UpdateCodeSignCertificateValuesInput
  @join__type(graph: CODESIGN)
{
  """
  The ID of the `IssuingTemplate` to be used to create the
  `CertificateRequest` used when issuing the initial `Certificate` or when
  renewing the `Certificate`.
  """
  issuingTemplate: ID

  """
  The X.509 Subject attribute value to use when issuing the certificate
  material.
  """
  subject: String

  """
  The X.509 SAN attribute values to use when issuing the certificate material.
  """
  subjectAlternativeNames: [String!]

  """The length of time the certificate should be valid for after issuance."""
  validity: Duration

  """
  True if the private key should be reused when renewing. If false then the
  associated Key Pair will be rotated when the certificate is renewed.
  """
  reusePrivateKey: Boolean

  """True if the chain should be provided to a client with this object"""
  provideChain: Boolean
}

"""
Code Sign Key Pair Values Input

This object is used to specify the options and parameters that should be used
when minting (or rotating) a `KeyPair` object for this `CodeSignSigningKey`.

Any value omitted from this input will preserve the previously stored value.

Note that any modifications made to a `CodeSignKeyPairValues` object will
not modify any already minted `KeyPair` objects and will only take effect when
the `KeyPair` is next minted or rotated.
"""
input UpdateCodeSignKeyPairValuesInput
  @join__type(graph: CODESIGN)
{
  """
  The ID of the `KeyStorageLocation` that should be used when minting the
  initial `KeyPair` or when performing key rotation.
  """
  location: ID

  """The intended usage of the key."""
  keyUsage: KeyUsageInput

  """The desired key type, along with type specific parameters."""
  parameterSet: KeyParameterSet

  """
  The time period after a key has been issued that it is considered valid.
  """
  validity: Duration
}

input UpdateCodeSignSigningKeyInput
  @join__type(graph: CODESIGN)
{
  id: ID!

  """
  A unique name identifying this `CodeSignSigningKey` of no more than 255
  characters.
  """
  name: String

  """
  A human readable description of this `CodeSignSigningKey of no more than
  500 characters.
  """
  description: String

  """The renewal values to use for getting a set of cryptographic objects."""
  objects: UpdateCodeSignSigningKeyObjectsInput

  """
  A set of IP addresses and IP address ranges from which API requests for
  cryptographic operations are permitted for this `CodeSignSigningKey`.
  """
  ipRestrictions: [String!]

  """
  A list of PKI or System Administrator accounts who are allowed to modify
  this `CodeSignSigningKey`.
  
  Note: teams and service-accounts are not allowed.
  """
  owners: [UserOrTeamInput!]

  """
  A list of users and/or teams who are allowed to view this
  `CodeSignSigningKey`, for auditing purposes.
  """
  auditors: [UserOrTeamInput!]

  """
  A list of users, teams, and/or service accounts that are allowed to perform cryptographic
  operations using this `CodeSignSigningKey`.
  
  Note: administrators are not allowed as key-users.
  """
  authorizedSigners: [IdentityInput!]
}

"""
The set of values to use for the next rotation or renewal of
the contained cryptographic objects.
"""
input UpdateCodeSignSigningKeyObjectsInput
  @join__type(graph: CODESIGN)
{
  """The values to use for the next key pair"""
  keyPair: UpdateCodeSignKeyPairValuesInput

  """The values to use for the next X.509 certificate"""
  certificate: UpdateCodeSignCertificateValuesInput
}

type UpdateCodeSignSigningKeyPayload
  @join__type(graph: CODESIGN)
{
  signingKey: CodeSignSigningKey
}

"""
UpdateExternalEmailRecipientInput represents the input for updating an external email recipient.
Name is limited to 256 characters.
Address is not updated (it is the search key) and cannot exceed 254 characters and should be a proper email address.
"""
input UpdateExternalEmailRecipientInput
  @join__type(graph: MESSAGING)
{
  name: String
  address: String!
  enabled: Boolean
}

"""Input structure for updating an existing notification router"""
input UpdateNotificationRouterConfigurationInput
  @join__type(graph: NOTIFICATION_ROUTER)
{
  advancedFilterExpression: String
  queryFilter: NotificationRouterQueryFilterInput
  name: String
  integrationId: UUID
  emailTemplate: NotificationRouterEmailTemplateInput
  zoomTeamChatTemplate: NotificationRouterZoomTeamChatTemplateInput
  enabled: Boolean
  notificationEmailDestination: NotificationEmailDestinationInput
}

"""Represents the input for updating a PagerDuty integration."""
input UpdatePagerDutyIntegrationInput
  @join__type(graph: MESSAGING)
{
  id: UUID!
  name: String
  pagerDutyParams: PagerDutyIntegrationInputParams
}

"""ReportDefinition update request input."""
input UpdateReportDefinitionInput
  @join__type(graph: CUSTOM_REPORTING)
{
  """The report name."""
  name: String

  """The report description."""
  description: String

  """The query to be run for generating the report."""
  query: String

  """The schedule for the report"""
  schedule: ReportScheduleInput

  """The email destination for the report"""
  emailDestinationInput: NotificationEmailDestinationInput
}

"""Represents the input for updating a Zoom Team Chat integration."""
input UpdateZoomTeamChatIntegrationInput
  @join__type(graph: MESSAGING)
{
  id: UUID!
  name: String
  zoomTeamChatParams: ZoomTeamChatIntegrationInputParams
}

"""
A field whose value conforms to the standard URI format as specified in RFC3986
"""
scalar URI
  @join__type(graph: CERTIFICATE_INVENTORY)
  @join__type(graph: CODESIGN)
  @join__type(graph: KEY_INVENTORY)

"""Represents the usage metrics per billing plan"""
type Usage
  @join__type(graph: USAGEMETRIC)
{
  billingPlan: String!
  metrics: [UsageMetric]!
}

"""
Represents a metric where the key is the metric name and the value is the metric value
"""
type UsageMetric
  @join__type(graph: USAGEMETRIC)
{
  key: String!
  value: String!
}

"""Represents the usage metrics"""
type UsageMetrics
  @join__type(graph: USAGEMETRIC)
{
  calculatedAt: DateTime
  usage: [Usage]
}

"""A representation of a human user account."""
type User
  @join__type(graph: CAOPERATIONS)
  @join__type(graph: CERTIFICATE_INVENTORY)
  @join__type(graph: CLOUD_PROVIDERS)
  @join__type(graph: CODESIGN, key: "id", resolvable: false)
  @join__type(graph: LEGACY, key: "id")
  @join__type(graph: NOTIFICATION_ROUTER, key: "id", resolvable: false)
  @join__type(graph: OUTAGEDETECTION)
{
  """A unique identifier that identifies a specific user."""
  id: ID!

  """
  The username associated with this user. Note that the username is the user's email address.
  """
  username: String! @join__field(graph: LEGACY)

  """The user's first name."""
  firstName: String @join__field(graph: LEGACY)

  """The user's last name."""
  lastName: String @join__field(graph: LEGACY)

  """The user's status."""
  userStatus: UserStatus @join__field(graph: LEGACY)

  """The user's roles."""
  roles: [Role!] @join__field(graph: LEGACY)

  """The user's disabled state."""
  disabled: Boolean @join__field(graph: LEGACY)
}

"""The connection type for User."""
type UserConnection
  @join__type(graph: LEGACY)
{
  """A list of edges"""
  edges: [UserEdge!]

  """A list of nodes."""
  nodes: [User!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of users in the connection."""
  totalCount: Int!
}

"""An edge in the UserConnection"""
type UserEdge
  @join__type(graph: LEGACY)
{
  """A cursor for use in pagination"""
  cursor: ID!

  """The item at the end of the edge"""
  node: User!
}

input UserOrTeamInput
  @join__type(graph: CODESIGN)
{
  id: UUID!
  type: UserOrTeamType!
}

enum UserOrTeamType
  @join__type(graph: CODESIGN)
{
  User @join__enumValue(graph: CODESIGN)
  Team @join__enumValue(graph: CODESIGN)
}

"""User status"""
enum UserStatus
  @join__type(graph: LEGACY)
{
  """Active"""
  ACTIVE @join__enumValue(graph: LEGACY)

  """Inactive"""
  INACTIVE @join__enumValue(graph: LEGACY)

  """Pending Activation"""
  PENDING_ACTIVATION @join__enumValue(graph: LEGACY)
}

"""A field whose value is a generic Universally Unique Identifier."""
scalar UUID
  @join__type(graph: CAOPERATIONS)
  @join__type(graph: CERTIFICATE)
  @join__type(graph: CLOUD_PROVIDERS)
  @join__type(graph: CODESIGN)
  @join__type(graph: COMPLIANCE_POLICY)
  @join__type(graph: CUSTOM_REPORTING)
  @join__type(graph: ENTITLEMENTS)
  @join__type(graph: KEY_INVENTORY)
  @join__type(graph: LEGACY)
  @join__type(graph: MESSAGING)
  @join__type(graph: NOTIFICATION_ROUTER)
  @join__type(graph: OUTAGEDETECTION)
  @join__type(graph: USAGEMETRIC)

interface ValidationError
  @join__type(graph: CERTIFICATE_INVENTORY)
  @join__type(graph: OUTAGEDETECTION)
{
  message: String
  arguments: [String!]
}

type ValidationErrorCount
  @join__type(graph: CERTIFICATE_INVENTORY)
  @join__type(graph: COMPUTED_FIELDS)
  @join__type(graph: OUTAGEDETECTION)
{
  warnings: Int!
  alerts: Int!
}

"""Weekly schedule pattern"""
type WeeklyPattern
  @join__type(graph: INTEGRATIONS)
{
  """Type of recurrence pattern - will be DAY_OF_WEEK"""
  recurrenceType: SchedulerPatternRecurrenceType!

  """Days of week when service should run"""
  daysOfWeek: [DayOfWeek!]!

  """Time of day when service should run (HH:mm:ss)"""
  recurrenceTime: DateTime!
}

type WeeklyReportSchedule
  @join__type(graph: CUSTOM_REPORTING)
{
  dayOfWeek: [DayOfWeek!]!
  hour: Int!
  minute: Int!
}

input WeeklyReportScheduleInput
  @join__type(graph: CUSTOM_REPORTING)
{
  dayOfWeek: [DayOfWeek!]!
  hour: Int!
  minute: Int!
}

type WorkflowResult
  @join__type(graph: CLOUD_PROVIDERS)
{
  workflowName: String!
  workflowId: UUID!
}

"""Represents the input parameters for a Zoom Team Chat integration."""
input ZoomTeamChatIntegrationInputParams
  @join__type(graph: MESSAGING)
{
  webhookURL: String!
  verificationToken: String!
}